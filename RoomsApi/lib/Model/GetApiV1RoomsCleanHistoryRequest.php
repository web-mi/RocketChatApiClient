<?php
/**
 * GetApiV1RoomsCleanHistoryRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rooms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatRoomsApi\Model;

use \ArrayAccess;
use \RocketChatRoomsApi\ObjectSerializer;

/**
 * GetApiV1RoomsCleanHistoryRequest Class Doc Comment
 *
 * @category Class
 * @package  RocketChatRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1RoomsCleanHistoryRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_rooms_cleanHistory_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'room_id' => 'string',
        'latest' => 'string',
        'oldest' => 'string',
        'inclusive' => 'bool',
        'exclude_pinned' => 'bool',
        'files_only' => 'bool',
        'users' => 'string[]',
        'limit' => 'int',
        'ignore_discussion' => 'bool',
        'ignore_threads' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'room_id' => null,
        'latest' => null,
        'oldest' => null,
        'inclusive' => null,
        'exclude_pinned' => null,
        'files_only' => null,
        'users' => null,
        'limit' => null,
        'ignore_discussion' => null,
        'ignore_threads' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'room_id' => false,
        'latest' => false,
        'oldest' => false,
        'inclusive' => false,
        'exclude_pinned' => false,
        'files_only' => false,
        'users' => false,
        'limit' => false,
        'ignore_discussion' => false,
        'ignore_threads' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'room_id' => 'roomId',
        'latest' => 'latest',
        'oldest' => 'oldest',
        'inclusive' => 'inclusive',
        'exclude_pinned' => 'excludePinned',
        'files_only' => 'filesOnly',
        'users' => 'users',
        'limit' => 'limit',
        'ignore_discussion' => 'ignoreDiscussion',
        'ignore_threads' => 'ignoreThreads'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'room_id' => 'setRoomId',
        'latest' => 'setLatest',
        'oldest' => 'setOldest',
        'inclusive' => 'setInclusive',
        'exclude_pinned' => 'setExcludePinned',
        'files_only' => 'setFilesOnly',
        'users' => 'setUsers',
        'limit' => 'setLimit',
        'ignore_discussion' => 'setIgnoreDiscussion',
        'ignore_threads' => 'setIgnoreThreads'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'room_id' => 'getRoomId',
        'latest' => 'getLatest',
        'oldest' => 'getOldest',
        'inclusive' => 'getInclusive',
        'exclude_pinned' => 'getExcludePinned',
        'files_only' => 'getFilesOnly',
        'users' => 'getUsers',
        'limit' => 'getLimit',
        'ignore_discussion' => 'getIgnoreDiscussion',
        'ignore_threads' => 'getIgnoreThreads'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('latest', $data ?? [], null);
        $this->setIfExists('oldest', $data ?? [], null);
        $this->setIfExists('inclusive', $data ?? [], null);
        $this->setIfExists('exclude_pinned', $data ?? [], null);
        $this->setIfExists('files_only', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('ignore_discussion', $data ?? [], null);
        $this->setIfExists('ignore_threads', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['room_id'] === null) {
            $invalidProperties[] = "'room_id' can't be null";
        }
        if ($this->container['latest'] === null) {
            $invalidProperties[] = "'latest' can't be null";
        }
        if ($this->container['oldest'] === null) {
            $invalidProperties[] = "'oldest' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets room_id
     *
     * @return string
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id The room ID.
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            throw new \InvalidArgumentException('non-nullable room_id cannot be null');
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return string
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param string $latest The end of time range of messages.
     *
     * @return self
     */
    public function setLatest($latest)
    {
        if (is_null($latest)) {
            throw new \InvalidArgumentException('non-nullable latest cannot be null');
        }
        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets oldest
     *
     * @return string
     */
    public function getOldest()
    {
        return $this->container['oldest'];
    }

    /**
     * Sets oldest
     *
     * @param string $oldest The start of the time range of messages.
     *
     * @return self
     */
    public function setOldest($oldest)
    {
        if (is_null($oldest)) {
            throw new \InvalidArgumentException('non-nullable oldest cannot be null');
        }
        $this->container['oldest'] = $oldest;

        return $this;
    }

    /**
     * Gets inclusive
     *
     * @return bool|null
     */
    public function getInclusive()
    {
        return $this->container['inclusive'];
    }

    /**
     * Sets inclusive
     *
     * @param bool|null $inclusive Whether messages which land on the latest and oldest dates should be included. By default, the value is false.
     *
     * @return self
     */
    public function setInclusive($inclusive)
    {
        if (is_null($inclusive)) {
            throw new \InvalidArgumentException('non-nullable inclusive cannot be null');
        }
        $this->container['inclusive'] = $inclusive;

        return $this;
    }

    /**
     * Gets exclude_pinned
     *
     * @return bool|null
     */
    public function getExcludePinned()
    {
        return $this->container['exclude_pinned'];
    }

    /**
     * Sets exclude_pinned
     *
     * @param bool|null $exclude_pinned Whether pinned messages should be deleted. By default, the value is false.
     *
     * @return self
     */
    public function setExcludePinned($exclude_pinned)
    {
        if (is_null($exclude_pinned)) {
            throw new \InvalidArgumentException('non-nullable exclude_pinned cannot be null');
        }
        $this->container['exclude_pinned'] = $exclude_pinned;

        return $this;
    }

    /**
     * Gets files_only
     *
     * @return bool|null
     */
    public function getFilesOnly()
    {
        return $this->container['files_only'];
    }

    /**
     * Sets files_only
     *
     * @param bool|null $files_only Whether to only delete files and keep messages intact. By default, the value is false.
     *
     * @return self
     */
    public function setFilesOnly($files_only)
    {
        if (is_null($files_only)) {
            throw new \InvalidArgumentException('non-nullable files_only cannot be null');
        }
        $this->container['files_only'] = $files_only;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[]|null $users Specific set of users whose content to delete. By default, the value is [], that is, everyone.
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit The amount of messages to prune. By default, the value is 0 (all).
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets ignore_discussion
     *
     * @return bool|null
     */
    public function getIgnoreDiscussion()
    {
        return $this->container['ignore_discussion'];
    }

    /**
     * Sets ignore_discussion
     *
     * @param bool|null $ignore_discussion Determines if messages from discussions should be pruned. By default, the value is true.
     *
     * @return self
     */
    public function setIgnoreDiscussion($ignore_discussion)
    {
        if (is_null($ignore_discussion)) {
            throw new \InvalidArgumentException('non-nullable ignore_discussion cannot be null');
        }
        $this->container['ignore_discussion'] = $ignore_discussion;

        return $this;
    }

    /**
     * Gets ignore_threads
     *
     * @return bool|null
     */
    public function getIgnoreThreads()
    {
        return $this->container['ignore_threads'];
    }

    /**
     * Sets ignore_threads
     *
     * @param bool|null $ignore_threads Determines if messages from threads should be pruned. By default, the value is true.
     *
     * @return self
     */
    public function setIgnoreThreads($ignore_threads)
    {
        if (is_null($ignore_threads)) {
            throw new \InvalidArgumentException('non-nullable ignore_threads cannot be null');
        }
        $this->container['ignore_threads'] = $ignore_threads;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


