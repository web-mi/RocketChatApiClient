<?php
/**
 * PostApiV1RoomsSaveNotificationRequestNotifications
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\RoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rooms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\RoomsApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\RoomsApi\ObjectSerializer;

/**
 * PostApiV1RoomsSaveNotificationRequestNotifications Class Doc Comment
 *
 * @category Class
 * @description The object that contains the following parameters.
 * @package  WebMI\RocketChatApiClient\RoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1RoomsSaveNotificationRequestNotifications implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_rooms_saveNotification_request_notifications';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'desktop_notifications' => 'string',
        'disable_notifications' => 'string',
        'email_notifications' => 'string',
        'audio_notification_value' => 'string',
        'desktop_notification_duration' => 'string',
        'audio_notifications' => 'string',
        'unread_alert' => 'string',
        'hide_unread_status' => 'string',
        'mobile_push_notifications' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'desktop_notifications' => null,
        'disable_notifications' => null,
        'email_notifications' => null,
        'audio_notification_value' => null,
        'desktop_notification_duration' => null,
        'audio_notifications' => null,
        'unread_alert' => null,
        'hide_unread_status' => null,
        'mobile_push_notifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'desktop_notifications' => false,
        'disable_notifications' => false,
        'email_notifications' => false,
        'audio_notification_value' => false,
        'desktop_notification_duration' => false,
        'audio_notifications' => false,
        'unread_alert' => false,
        'hide_unread_status' => false,
        'mobile_push_notifications' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'desktop_notifications' => 'desktopNotifications',
        'disable_notifications' => 'disableNotifications',
        'email_notifications' => 'emailNotifications',
        'audio_notification_value' => 'audioNotificationValue',
        'desktop_notification_duration' => 'desktopNotificationDuration',
        'audio_notifications' => 'audioNotifications',
        'unread_alert' => 'unreadAlert',
        'hide_unread_status' => 'hideUnreadStatus',
        'mobile_push_notifications' => 'mobilePushNotifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'desktop_notifications' => 'setDesktopNotifications',
        'disable_notifications' => 'setDisableNotifications',
        'email_notifications' => 'setEmailNotifications',
        'audio_notification_value' => 'setAudioNotificationValue',
        'desktop_notification_duration' => 'setDesktopNotificationDuration',
        'audio_notifications' => 'setAudioNotifications',
        'unread_alert' => 'setUnreadAlert',
        'hide_unread_status' => 'setHideUnreadStatus',
        'mobile_push_notifications' => 'setMobilePushNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'desktop_notifications' => 'getDesktopNotifications',
        'disable_notifications' => 'getDisableNotifications',
        'email_notifications' => 'getEmailNotifications',
        'audio_notification_value' => 'getAudioNotificationValue',
        'desktop_notification_duration' => 'getDesktopNotificationDuration',
        'audio_notifications' => 'getAudioNotifications',
        'unread_alert' => 'getUnreadAlert',
        'hide_unread_status' => 'getHideUnreadStatus',
        'mobile_push_notifications' => 'getMobilePushNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('desktop_notifications', $data ?? [], null);
        $this->setIfExists('disable_notifications', $data ?? [], null);
        $this->setIfExists('email_notifications', $data ?? [], null);
        $this->setIfExists('audio_notification_value', $data ?? [], null);
        $this->setIfExists('desktop_notification_duration', $data ?? [], null);
        $this->setIfExists('audio_notifications', $data ?? [], null);
        $this->setIfExists('unread_alert', $data ?? [], null);
        $this->setIfExists('hide_unread_status', $data ?? [], null);
        $this->setIfExists('mobile_push_notifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets desktop_notifications
     *
     * @return string|null
     */
    public function getDesktopNotifications()
    {
        return $this->container['desktop_notifications'];
    }

    /**
     * Sets desktop_notifications
     *
     * @param string|null $desktop_notifications The value for desktop notifications. The options are:  - nothing - mentions - all - default
     *
     * @return self
     */
    public function setDesktopNotifications($desktop_notifications)
    {
        if (is_null($desktop_notifications)) {
            throw new \InvalidArgumentException('non-nullable desktop_notifications cannot be null');
        }
        $this->container['desktop_notifications'] = $desktop_notifications;

        return $this;
    }

    /**
     * Gets disable_notifications
     *
     * @return string|null
     */
    public function getDisableNotifications()
    {
        return $this->container['disable_notifications'];
    }

    /**
     * Sets disable_notifications
     *
     * @param string|null $disable_notifications The value to disable/enable channel's notifications.   The options are: - 0 - 1
     *
     * @return self
     */
    public function setDisableNotifications($disable_notifications)
    {
        if (is_null($disable_notifications)) {
            throw new \InvalidArgumentException('non-nullable disable_notifications cannot be null');
        }
        $this->container['disable_notifications'] = $disable_notifications;

        return $this;
    }

    /**
     * Gets email_notifications
     *
     * @return string|null
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     *
     * @param string|null $email_notifications The value for email notifications.  The options are: - nothing - mentions - all - default
     *
     * @return self
     */
    public function setEmailNotifications($email_notifications)
    {
        if (is_null($email_notifications)) {
            throw new \InvalidArgumentException('non-nullable email_notifications cannot be null');
        }
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets audio_notification_value
     *
     * @return string|null
     */
    public function getAudioNotificationValue()
    {
        return $this->container['audio_notification_value'];
    }

    /**
     * Sets audio_notification_value
     *
     * @param string|null $audio_notification_value The value for audio notification sound.
     *
     * @return self
     */
    public function setAudioNotificationValue($audio_notification_value)
    {
        if (is_null($audio_notification_value)) {
            throw new \InvalidArgumentException('non-nullable audio_notification_value cannot be null');
        }
        $this->container['audio_notification_value'] = $audio_notification_value;

        return $this;
    }

    /**
     * Gets desktop_notification_duration
     *
     * @return string|null
     */
    public function getDesktopNotificationDuration()
    {
        return $this->container['desktop_notification_duration'];
    }

    /**
     * Sets desktop_notification_duration
     *
     * @param string|null $desktop_notification_duration The value for desktop notification duration.
     *
     * @return self
     */
    public function setDesktopNotificationDuration($desktop_notification_duration)
    {
        if (is_null($desktop_notification_duration)) {
            throw new \InvalidArgumentException('non-nullable desktop_notification_duration cannot be null');
        }
        $this->container['desktop_notification_duration'] = $desktop_notification_duration;

        return $this;
    }

    /**
     * Gets audio_notifications
     *
     * @return string|null
     */
    public function getAudioNotifications()
    {
        return $this->container['audio_notifications'];
    }

    /**
     * Sets audio_notifications
     *
     * @param string|null $audio_notifications The value for audio notifications.   The options are: - nothing - mentions - all - default
     *
     * @return self
     */
    public function setAudioNotifications($audio_notifications)
    {
        if (is_null($audio_notifications)) {
            throw new \InvalidArgumentException('non-nullable audio_notifications cannot be null');
        }
        $this->container['audio_notifications'] = $audio_notifications;

        return $this;
    }

    /**
     * Gets unread_alert
     *
     * @return string|null
     */
    public function getUnreadAlert()
    {
        return $this->container['unread_alert'];
    }

    /**
     * Sets unread_alert
     *
     * @param string|null $unread_alert The value for unread alerts notifications.   The options are: - nothing - mentions - all - default
     *
     * @return self
     */
    public function setUnreadAlert($unread_alert)
    {
        if (is_null($unread_alert)) {
            throw new \InvalidArgumentException('non-nullable unread_alert cannot be null');
        }
        $this->container['unread_alert'] = $unread_alert;

        return $this;
    }

    /**
     * Gets hide_unread_status
     *
     * @return string|null
     */
    public function getHideUnreadStatus()
    {
        return $this->container['hide_unread_status'];
    }

    /**
     * Sets hide_unread_status
     *
     * @param string|null $hide_unread_status The value to disable/enable number of unread messages.  The options are: - 0 - 1
     *
     * @return self
     */
    public function setHideUnreadStatus($hide_unread_status)
    {
        if (is_null($hide_unread_status)) {
            throw new \InvalidArgumentException('non-nullable hide_unread_status cannot be null');
        }
        $this->container['hide_unread_status'] = $hide_unread_status;

        return $this;
    }

    /**
     * Gets mobile_push_notifications
     *
     * @return string|null
     */
    public function getMobilePushNotifications()
    {
        return $this->container['mobile_push_notifications'];
    }

    /**
     * Sets mobile_push_notifications
     *
     * @param string|null $mobile_push_notifications The value for mobile push notifications.   The options are: - nothing - mentions - all - default
     *
     * @return self
     */
    public function setMobilePushNotifications($mobile_push_notifications)
    {
        if (is_null($mobile_push_notifications)) {
            throw new \InvalidArgumentException('non-nullable mobile_push_notifications cannot be null');
        }
        $this->container['mobile_push_notifications'] = $mobile_push_notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


