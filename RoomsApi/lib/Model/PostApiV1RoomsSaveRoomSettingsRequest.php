<?php
/**
 * PostApiV1RoomsSaveRoomSettingsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMIRocketChatApiClientRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rooms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMIRocketChatApiClientRoomsApi\Model;

use \ArrayAccess;
use \WebMIRocketChatApiClientRoomsApi\ObjectSerializer;

/**
 * PostApiV1RoomsSaveRoomSettingsRequest Class Doc Comment
 *
 * @category Class
 * @package  WebMIRocketChatApiClientRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1RoomsSaveRoomSettingsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_rooms_saveRoomSettings_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rid' => 'string',
        'room_name' => 'string',
        'room_description' => 'string',
        'room_avatar' => 'string',
        'featured' => 'bool',
        'room_topic' => 'string',
        'room_announcement' => 'string',
        'room_custom_fields' => 'object',
        'room_type' => 'string',
        'read_only' => 'bool',
        'react_when_read_only' => 'bool',
        'system_messages' => 'string[]',
        'default' => 'bool',
        'join_code' => 'string',
        'streaming_options' => 'object',
        'retention_enabled' => 'bool',
        'retention_max_age' => 'string',
        'retention_exclude_pinned' => 'bool',
        'retention_files_only' => 'bool',
        'retention_ignore_threads' => 'bool',
        'retention_override_global' => 'bool',
        'encrypted' => 'bool',
        'favorite' => 'object',
        'sidepanel' => '\WebMIRocketChatApiClientRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequestSidepanel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rid' => null,
        'room_name' => null,
        'room_description' => null,
        'room_avatar' => null,
        'featured' => null,
        'room_topic' => null,
        'room_announcement' => null,
        'room_custom_fields' => null,
        'room_type' => null,
        'read_only' => null,
        'react_when_read_only' => null,
        'system_messages' => null,
        'default' => null,
        'join_code' => null,
        'streaming_options' => null,
        'retention_enabled' => null,
        'retention_max_age' => null,
        'retention_exclude_pinned' => null,
        'retention_files_only' => null,
        'retention_ignore_threads' => null,
        'retention_override_global' => null,
        'encrypted' => null,
        'favorite' => null,
        'sidepanel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rid' => false,
        'room_name' => false,
        'room_description' => false,
        'room_avatar' => false,
        'featured' => false,
        'room_topic' => false,
        'room_announcement' => false,
        'room_custom_fields' => false,
        'room_type' => false,
        'read_only' => false,
        'react_when_read_only' => false,
        'system_messages' => false,
        'default' => false,
        'join_code' => false,
        'streaming_options' => false,
        'retention_enabled' => false,
        'retention_max_age' => false,
        'retention_exclude_pinned' => false,
        'retention_files_only' => false,
        'retention_ignore_threads' => false,
        'retention_override_global' => false,
        'encrypted' => false,
        'favorite' => false,
        'sidepanel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rid' => 'rid',
        'room_name' => 'roomName',
        'room_description' => 'roomDescription',
        'room_avatar' => 'roomAvatar',
        'featured' => 'featured',
        'room_topic' => 'roomTopic',
        'room_announcement' => 'roomAnnouncement',
        'room_custom_fields' => 'roomCustomFields',
        'room_type' => 'roomType',
        'read_only' => 'readOnly',
        'react_when_read_only' => 'reactWhenReadOnly',
        'system_messages' => 'systemMessages',
        'default' => 'default',
        'join_code' => 'joinCode',
        'streaming_options' => 'streamingOptions',
        'retention_enabled' => 'retentionEnabled',
        'retention_max_age' => 'retentionMaxAge',
        'retention_exclude_pinned' => 'retentionExcludePinned',
        'retention_files_only' => 'retentionFilesOnly',
        'retention_ignore_threads' => 'retentionIgnoreThreads',
        'retention_override_global' => 'retentionOverrideGlobal',
        'encrypted' => 'encrypted',
        'favorite' => 'favorite',
        'sidepanel' => 'sidepanel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rid' => 'setRid',
        'room_name' => 'setRoomName',
        'room_description' => 'setRoomDescription',
        'room_avatar' => 'setRoomAvatar',
        'featured' => 'setFeatured',
        'room_topic' => 'setRoomTopic',
        'room_announcement' => 'setRoomAnnouncement',
        'room_custom_fields' => 'setRoomCustomFields',
        'room_type' => 'setRoomType',
        'read_only' => 'setReadOnly',
        'react_when_read_only' => 'setReactWhenReadOnly',
        'system_messages' => 'setSystemMessages',
        'default' => 'setDefault',
        'join_code' => 'setJoinCode',
        'streaming_options' => 'setStreamingOptions',
        'retention_enabled' => 'setRetentionEnabled',
        'retention_max_age' => 'setRetentionMaxAge',
        'retention_exclude_pinned' => 'setRetentionExcludePinned',
        'retention_files_only' => 'setRetentionFilesOnly',
        'retention_ignore_threads' => 'setRetentionIgnoreThreads',
        'retention_override_global' => 'setRetentionOverrideGlobal',
        'encrypted' => 'setEncrypted',
        'favorite' => 'setFavorite',
        'sidepanel' => 'setSidepanel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rid' => 'getRid',
        'room_name' => 'getRoomName',
        'room_description' => 'getRoomDescription',
        'room_avatar' => 'getRoomAvatar',
        'featured' => 'getFeatured',
        'room_topic' => 'getRoomTopic',
        'room_announcement' => 'getRoomAnnouncement',
        'room_custom_fields' => 'getRoomCustomFields',
        'room_type' => 'getRoomType',
        'read_only' => 'getReadOnly',
        'react_when_read_only' => 'getReactWhenReadOnly',
        'system_messages' => 'getSystemMessages',
        'default' => 'getDefault',
        'join_code' => 'getJoinCode',
        'streaming_options' => 'getStreamingOptions',
        'retention_enabled' => 'getRetentionEnabled',
        'retention_max_age' => 'getRetentionMaxAge',
        'retention_exclude_pinned' => 'getRetentionExcludePinned',
        'retention_files_only' => 'getRetentionFilesOnly',
        'retention_ignore_threads' => 'getRetentionIgnoreThreads',
        'retention_override_global' => 'getRetentionOverrideGlobal',
        'encrypted' => 'getEncrypted',
        'favorite' => 'getFavorite',
        'sidepanel' => 'getSidepanel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('rid', $data ?? [], null);
        $this->setIfExists('room_name', $data ?? [], null);
        $this->setIfExists('room_description', $data ?? [], null);
        $this->setIfExists('room_avatar', $data ?? [], null);
        $this->setIfExists('featured', $data ?? [], null);
        $this->setIfExists('room_topic', $data ?? [], null);
        $this->setIfExists('room_announcement', $data ?? [], null);
        $this->setIfExists('room_custom_fields', $data ?? [], null);
        $this->setIfExists('room_type', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('react_when_read_only', $data ?? [], null);
        $this->setIfExists('system_messages', $data ?? [], null);
        $this->setIfExists('default', $data ?? [], null);
        $this->setIfExists('join_code', $data ?? [], null);
        $this->setIfExists('streaming_options', $data ?? [], null);
        $this->setIfExists('retention_enabled', $data ?? [], null);
        $this->setIfExists('retention_max_age', $data ?? [], null);
        $this->setIfExists('retention_exclude_pinned', $data ?? [], null);
        $this->setIfExists('retention_files_only', $data ?? [], null);
        $this->setIfExists('retention_ignore_threads', $data ?? [], null);
        $this->setIfExists('retention_override_global', $data ?? [], null);
        $this->setIfExists('encrypted', $data ?? [], null);
        $this->setIfExists('favorite', $data ?? [], null);
        $this->setIfExists('sidepanel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rid'] === null) {
            $invalidProperties[] = "'rid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rid
     *
     * @return string
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid The room ID.
     *
     * @return self
     */
    public function setRid($rid)
    {
        if (is_null($rid)) {
            throw new \InvalidArgumentException('non-nullable rid cannot be null');
        }
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string|null $room_name The name of the room.
     *
     * @return self
     */
    public function setRoomName($room_name)
    {
        if (is_null($room_name)) {
            throw new \InvalidArgumentException('non-nullable room_name cannot be null');
        }
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets room_description
     *
     * @return string|null
     */
    public function getRoomDescription()
    {
        return $this->container['room_description'];
    }

    /**
     * Sets room_description
     *
     * @param string|null $room_description The description of the room.
     *
     * @return self
     */
    public function setRoomDescription($room_description)
    {
        if (is_null($room_description)) {
            throw new \InvalidArgumentException('non-nullable room_description cannot be null');
        }
        $this->container['room_description'] = $room_description;

        return $this;
    }

    /**
     * Gets room_avatar
     *
     * @return string|null
     */
    public function getRoomAvatar()
    {
        return $this->container['room_avatar'];
    }

    /**
     * Sets room_avatar
     *
     * @param string|null $room_avatar The base64 image.
     *
     * @return self
     */
    public function setRoomAvatar($room_avatar)
    {
        if (is_null($room_avatar)) {
            throw new \InvalidArgumentException('non-nullable room_avatar cannot be null');
        }
        $this->container['room_avatar'] = $room_avatar;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool|null
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool|null $featured Whether the room is featured or not.
     *
     * @return self
     */
    public function setFeatured($featured)
    {
        if (is_null($featured)) {
            throw new \InvalidArgumentException('non-nullable featured cannot be null');
        }
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets room_topic
     *
     * @return string|null
     */
    public function getRoomTopic()
    {
        return $this->container['room_topic'];
    }

    /**
     * Sets room_topic
     *
     * @param string|null $room_topic The topic of the room.
     *
     * @return self
     */
    public function setRoomTopic($room_topic)
    {
        if (is_null($room_topic)) {
            throw new \InvalidArgumentException('non-nullable room_topic cannot be null');
        }
        $this->container['room_topic'] = $room_topic;

        return $this;
    }

    /**
     * Gets room_announcement
     *
     * @return string|null
     */
    public function getRoomAnnouncement()
    {
        return $this->container['room_announcement'];
    }

    /**
     * Sets room_announcement
     *
     * @param string|null $room_announcement The announcement of the room.
     *
     * @return self
     */
    public function setRoomAnnouncement($room_announcement)
    {
        if (is_null($room_announcement)) {
            throw new \InvalidArgumentException('non-nullable room_announcement cannot be null');
        }
        $this->container['room_announcement'] = $room_announcement;

        return $this;
    }

    /**
     * Gets room_custom_fields
     *
     * @return object|null
     */
    public function getRoomCustomFields()
    {
        return $this->container['room_custom_fields'];
    }

    /**
     * Sets room_custom_fields
     *
     * @param object|null $room_custom_fields An object of the custom fields of the room.
     *
     * @return self
     */
    public function setRoomCustomFields($room_custom_fields)
    {
        if (is_null($room_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable room_custom_fields cannot be null');
        }
        $this->container['room_custom_fields'] = $room_custom_fields;

        return $this;
    }

    /**
     * Gets room_type
     *
     * @return string|null
     */
    public function getRoomType()
    {
        return $this->container['room_type'];
    }

    /**
     * Sets room_type
     *
     * @param string|null $room_type The type of the room. It could be `c` for public rooms or `p` for private rooms.
     *
     * @return self
     */
    public function setRoomType($room_type)
    {
        if (is_null($room_type)) {
            throw new \InvalidArgumentException('non-nullable room_type cannot be null');
        }
        $this->container['room_type'] = $room_type;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Whether the room is read-only or not.
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets react_when_read_only
     *
     * @return bool|null
     */
    public function getReactWhenReadOnly()
    {
        return $this->container['react_when_read_only'];
    }

    /**
     * Sets react_when_read_only
     *
     * @param bool|null $react_when_read_only Whether users can react when the room is read-only.
     *
     * @return self
     */
    public function setReactWhenReadOnly($react_when_read_only)
    {
        if (is_null($react_when_read_only)) {
            throw new \InvalidArgumentException('non-nullable react_when_read_only cannot be null');
        }
        $this->container['react_when_read_only'] = $react_when_read_only;

        return $this;
    }

    /**
     * Gets system_messages
     *
     * @return string[]|null
     */
    public function getSystemMessages()
    {
        return $this->container['system_messages'];
    }

    /**
     * Sets system_messages
     *
     * @param string[]|null $system_messages The system messages that the room supports.
     *
     * @return self
     */
    public function setSystemMessages($system_messages)
    {
        if (is_null($system_messages)) {
            throw new \InvalidArgumentException('non-nullable system_messages cannot be null');
        }
        $this->container['system_messages'] = $system_messages;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool|null $default Whether the room is the default room or not.
     *
     * @return self
     */
    public function setDefault($default)
    {
        if (is_null($default)) {
            throw new \InvalidArgumentException('non-nullable default cannot be null');
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets join_code
     *
     * @return string|null
     */
    public function getJoinCode()
    {
        return $this->container['join_code'];
    }

    /**
     * Sets join_code
     *
     * @param string|null $join_code The join code of the room.
     *
     * @return self
     */
    public function setJoinCode($join_code)
    {
        if (is_null($join_code)) {
            throw new \InvalidArgumentException('non-nullable join_code cannot be null');
        }
        $this->container['join_code'] = $join_code;

        return $this;
    }

    /**
     * Gets streaming_options
     *
     * @return object|null
     */
    public function getStreamingOptions()
    {
        return $this->container['streaming_options'];
    }

    /**
     * Sets streaming_options
     *
     * @param object|null $streaming_options The streaming options of the room.
     *
     * @return self
     */
    public function setStreamingOptions($streaming_options)
    {
        if (is_null($streaming_options)) {
            throw new \InvalidArgumentException('non-nullable streaming_options cannot be null');
        }
        $this->container['streaming_options'] = $streaming_options;

        return $this;
    }

    /**
     * Gets retention_enabled
     *
     * @return bool|null
     */
    public function getRetentionEnabled()
    {
        return $this->container['retention_enabled'];
    }

    /**
     * Sets retention_enabled
     *
     * @param bool|null $retention_enabled Whether retention is enabled for the room or not.
     *
     * @return self
     */
    public function setRetentionEnabled($retention_enabled)
    {
        if (is_null($retention_enabled)) {
            throw new \InvalidArgumentException('non-nullable retention_enabled cannot be null');
        }
        $this->container['retention_enabled'] = $retention_enabled;

        return $this;
    }

    /**
     * Gets retention_max_age
     *
     * @return string|null
     */
    public function getRetentionMaxAge()
    {
        return $this->container['retention_max_age'];
    }

    /**
     * Sets retention_max_age
     *
     * @param string|null $retention_max_age The maximum age (in days) of messages to be retained in the room.
     *
     * @return self
     */
    public function setRetentionMaxAge($retention_max_age)
    {
        if (is_null($retention_max_age)) {
            throw new \InvalidArgumentException('non-nullable retention_max_age cannot be null');
        }
        $this->container['retention_max_age'] = $retention_max_age;

        return $this;
    }

    /**
     * Gets retention_exclude_pinned
     *
     * @return bool|null
     */
    public function getRetentionExcludePinned()
    {
        return $this->container['retention_exclude_pinned'];
    }

    /**
     * Sets retention_exclude_pinned
     *
     * @param bool|null $retention_exclude_pinned Whether to exclude pinned messages from retention or not.
     *
     * @return self
     */
    public function setRetentionExcludePinned($retention_exclude_pinned)
    {
        if (is_null($retention_exclude_pinned)) {
            throw new \InvalidArgumentException('non-nullable retention_exclude_pinned cannot be null');
        }
        $this->container['retention_exclude_pinned'] = $retention_exclude_pinned;

        return $this;
    }

    /**
     * Gets retention_files_only
     *
     * @return bool|null
     */
    public function getRetentionFilesOnly()
    {
        return $this->container['retention_files_only'];
    }

    /**
     * Sets retention_files_only
     *
     * @param bool|null $retention_files_only Whether to retain only files in the room or not.
     *
     * @return self
     */
    public function setRetentionFilesOnly($retention_files_only)
    {
        if (is_null($retention_files_only)) {
            throw new \InvalidArgumentException('non-nullable retention_files_only cannot be null');
        }
        $this->container['retention_files_only'] = $retention_files_only;

        return $this;
    }

    /**
     * Gets retention_ignore_threads
     *
     * @return bool|null
     */
    public function getRetentionIgnoreThreads()
    {
        return $this->container['retention_ignore_threads'];
    }

    /**
     * Sets retention_ignore_threads
     *
     * @param bool|null $retention_ignore_threads Whether to ignore threads when retaining messages or not.
     *
     * @return self
     */
    public function setRetentionIgnoreThreads($retention_ignore_threads)
    {
        if (is_null($retention_ignore_threads)) {
            throw new \InvalidArgumentException('non-nullable retention_ignore_threads cannot be null');
        }
        $this->container['retention_ignore_threads'] = $retention_ignore_threads;

        return $this;
    }

    /**
     * Gets retention_override_global
     *
     * @return bool|null
     */
    public function getRetentionOverrideGlobal()
    {
        return $this->container['retention_override_global'];
    }

    /**
     * Sets retention_override_global
     *
     * @param bool|null $retention_override_global Whether to override the global retention settings for the room or not.
     *
     * @return self
     */
    public function setRetentionOverrideGlobal($retention_override_global)
    {
        if (is_null($retention_override_global)) {
            throw new \InvalidArgumentException('non-nullable retention_override_global cannot be null');
        }
        $this->container['retention_override_global'] = $retention_override_global;

        return $this;
    }

    /**
     * Gets encrypted
     *
     * @return bool|null
     */
    public function getEncrypted()
    {
        return $this->container['encrypted'];
    }

    /**
     * Sets encrypted
     *
     * @param bool|null $encrypted Whether the room is encrypted or not.
     *
     * @return self
     */
    public function setEncrypted($encrypted)
    {
        if (is_null($encrypted)) {
            throw new \InvalidArgumentException('non-nullable encrypted cannot be null');
        }
        $this->container['encrypted'] = $encrypted;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return object|null
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param object|null $favorite The favorite settings of the room. Whether the room is marked as favorite and whether it is set as the default room.
     *
     * @return self
     */
    public function setFavorite($favorite)
    {
        if (is_null($favorite)) {
            throw new \InvalidArgumentException('non-nullable favorite cannot be null');
        }
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets sidepanel
     *
     * @return \WebMIRocketChatApiClientRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequestSidepanel|null
     */
    public function getSidepanel()
    {
        return $this->container['sidepanel'];
    }

    /**
     * Sets sidepanel
     *
     * @param \WebMIRocketChatApiClientRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequestSidepanel|null $sidepanel sidepanel
     *
     * @return self
     */
    public function setSidepanel($sidepanel)
    {
        if (is_null($sidepanel)) {
            throw new \InvalidArgumentException('non-nullable sidepanel cannot be null');
        }
        $this->container['sidepanel'] = $sidepanel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


