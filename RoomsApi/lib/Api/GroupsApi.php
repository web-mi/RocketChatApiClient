<?php
/**
 * GroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\RoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rooms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\RoomsApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\RocketChatApiClient\RoomsApi\ApiException;
use WebMI\RocketChatApiClient\RoomsApi\Configuration;
use WebMI\RocketChatApiClient\RoomsApi\HeaderSelector;
use WebMI\RocketChatApiClient\RoomsApi\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\RoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getApiV1GroupsCounters' => [
            'application/json',
        ],
        'getApiV1GroupsFiles' => [
            'application/json',
        ],
        'getApiV1GroupsGetIntegrations' => [
            'application/json',
        ],
        'getApiV1GroupsHistory' => [
            'application/json',
        ],
        'getApiV1GroupsInfo' => [
            'application/json',
        ],
        'getApiV1GroupsList' => [
            'application/json',
        ],
        'getApiV1GroupsListAll' => [
            'application/json',
        ],
        'getApiV1GroupsMembers' => [
            'application/json',
        ],
        'getApiV1GroupsMessages' => [
            'application/json',
        ],
        'getApiV1GroupsModerators' => [
            'application/json',
        ],
        'getApiV1GroupsOnline' => [
            'application/json',
        ],
        'getApiV1GroupsRoles' => [
            'application/json',
        ],
        'getGroupsMembersByHighestRole' => [
            'application/json',
        ],
        'postApiV1GroupsAddAll' => [
            'application/json',
        ],
        'postApiV1GroupsAddLeader' => [
            'application/json',
        ],
        'postApiV1GroupsAddModerator' => [
            'application/json',
        ],
        'postApiV1GroupsAddOwner' => [
            'application/json',
        ],
        'postApiV1GroupsArchive' => [
            'application/json',
        ],
        'postApiV1GroupsClose' => [
            'application/json',
        ],
        'postApiV1GroupsConvertToTeam' => [
            'application/json',
        ],
        'postApiV1GroupsCreate' => [
            'application/json',
        ],
        'postApiV1GroupsDelete' => [
            'application/json',
        ],
        'postApiV1GroupsInvite' => [
            'application/json',
        ],
        'postApiV1GroupsKick' => [
            'application/json',
        ],
        'postApiV1GroupsOpen' => [
            'application/json',
        ],
        'postApiV1GroupsRemoveLeader' => [
            'application/json',
        ],
        'postApiV1GroupsRemoveModerator' => [
            'application/json',
        ],
        'postApiV1GroupsRemoveOwner' => [
            'application/json',
        ],
        'postApiV1GroupsRename' => [
            'application/json',
        ],
        'postApiV1GroupsSetAnnouncement' => [
            'application/json',
        ],
        'postApiV1GroupsSetCustomFields' => [
            'application/json',
        ],
        'postApiV1GroupsSetDescription' => [
            'application/json',
        ],
        'postApiV1GroupsSetEncrypted' => [
            'application/json',
        ],
        'postApiV1GroupsSetPurpose' => [
            'application/json',
        ],
        'postApiV1GroupsSetReadOnly' => [
            'application/json',
        ],
        'postApiV1GroupsSetTopic' => [
            'application/json',
        ],
        'postApiV1GroupsSetType' => [
            'application/json',
        ],
        'postApiV1GroupsUnarchive' => [
            'application/json',
        ],
        'postGroupsLeave' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1GroupsCounters
     *
     * Get Group Counters
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $user_id Counters for provided user ID (need to have a view-room-administration right for calling user). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsCounters'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response
     */
    public function getApiV1GroupsCounters($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $user_id = null, string $contentType = self::contentTypes['getApiV1GroupsCounters'][0])
    {
        list($response) = $this->getApiV1GroupsCountersWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsCountersWithHttpInfo
     *
     * Get Group Counters
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $user_id Counters for provided user ID (need to have a view-room-administration right for calling user). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsCounters'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsCountersWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $user_id = null, string $contentType = self::contentTypes['getApiV1GroupsCounters'][0])
    {
        $request = $this->getApiV1GroupsCountersRequest($x_auth_token, $x_user_id, $room_id, $room_name, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsCountersAsync
     *
     * Get Group Counters
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $user_id Counters for provided user ID (need to have a view-room-administration right for calling user). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsCounters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsCountersAsync($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $user_id = null, string $contentType = self::contentTypes['getApiV1GroupsCounters'][0])
    {
        return $this->getApiV1GroupsCountersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsCountersAsyncWithHttpInfo
     *
     * Get Group Counters
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $user_id Counters for provided user ID (need to have a view-room-administration right for calling user). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsCounters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsCountersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $user_id = null, string $contentType = self::contentTypes['getApiV1GroupsCounters'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsCounters200Response';
        $request = $this->getApiV1GroupsCountersRequest($x_auth_token, $x_user_id, $room_id, $room_name, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsCounters'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $user_id Counters for provided user ID (need to have a view-room-administration right for calling user). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsCounters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsCountersRequest($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $user_id = null, string $contentType = self::contentTypes['getApiV1GroupsCounters'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsCounters'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsCounters'
            );
        }





        $resourcePath = '/api/v1/groups.counters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsFiles
     *
     * Get Group Files
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsFiles'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsFiles($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsFiles'][0])
    {
        list($response) = $this->getApiV1GroupsFilesWithHttpInfo($x_auth_token, $x_user_id, $room_name, $room_id, $offset, $count, $sort, $query, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsFilesWithHttpInfo
     *
     * Get Group Files
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsFiles'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsFilesWithHttpInfo($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsFiles'][0])
    {
        $request = $this->getApiV1GroupsFilesRequest($x_auth_token, $x_user_id, $room_name, $room_id, $offset, $count, $sort, $query, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsFilesAsync
     *
     * Get Group Files
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsFilesAsync($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsFiles'][0])
    {
        return $this->getApiV1GroupsFilesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name, $room_id, $offset, $count, $sort, $query, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsFilesAsyncWithHttpInfo
     *
     * Get Group Files
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsFilesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsFiles'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsFiles200Response';
        $request = $this->getApiV1GroupsFilesRequest($x_auth_token, $x_user_id, $room_name, $room_id, $offset, $count, $sort, $query, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsFiles'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsFilesRequest($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsFiles'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsFiles'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsFiles'
            );
        }









        $resourcePath = '/api/v1/groups.files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsGetIntegrations
     *
     * Get Group Integrations
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsGetIntegrations'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsGetIntegrations($x_auth_token, $x_user_id, $room_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsGetIntegrations'][0])
    {
        list($response) = $this->getApiV1GroupsGetIntegrationsWithHttpInfo($x_auth_token, $x_user_id, $room_id, $offset, $count, $sort, $query, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsGetIntegrationsWithHttpInfo
     *
     * Get Group Integrations
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsGetIntegrations'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsGetIntegrationsWithHttpInfo($x_auth_token, $x_user_id, $room_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsGetIntegrations'][0])
    {
        $request = $this->getApiV1GroupsGetIntegrationsRequest($x_auth_token, $x_user_id, $room_id, $offset, $count, $sort, $query, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsGetIntegrationsAsync
     *
     * Get Group Integrations
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsGetIntegrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsGetIntegrationsAsync($x_auth_token, $x_user_id, $room_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsGetIntegrations'][0])
    {
        return $this->getApiV1GroupsGetIntegrationsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $offset, $count, $sort, $query, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsGetIntegrationsAsyncWithHttpInfo
     *
     * Get Group Integrations
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsGetIntegrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsGetIntegrationsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsGetIntegrations'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsGetIntegrations200Response';
        $request = $this->getApiV1GroupsGetIntegrationsRequest($x_auth_token, $x_user_id, $room_id, $offset, $count, $sort, $query, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsGetIntegrations'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsGetIntegrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsGetIntegrationsRequest($x_auth_token, $x_user_id, $room_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsGetIntegrations'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsGetIntegrations'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsGetIntegrations'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling getApiV1GroupsGetIntegrations'
            );
        }







        $resourcePath = '/api/v1/groups.getIntegrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsHistory
     *
     * Get Group History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  string $latest The end of time range of messages to retrieve. The default value is the current date and time. (optional)
     * @param  string $oldest The start of the time range of messages to retrieve (optional)
     * @param  bool $inclusive Whether messages which land on latest and oldest should be included. The default value is false. (optional)
     * @param  bool $unreads Whether the amount of unreads should be included. The default value is false. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsHistory'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsHistory($x_auth_token, $x_user_id, $room_id, $latest = null, $oldest = null, $inclusive = null, $unreads = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsHistory'][0])
    {
        list($response) = $this->getApiV1GroupsHistoryWithHttpInfo($x_auth_token, $x_user_id, $room_id, $latest, $oldest, $inclusive, $unreads, $offset, $count, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsHistoryWithHttpInfo
     *
     * Get Group History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  string $latest The end of time range of messages to retrieve. The default value is the current date and time. (optional)
     * @param  string $oldest The start of the time range of messages to retrieve (optional)
     * @param  bool $inclusive Whether messages which land on latest and oldest should be included. The default value is false. (optional)
     * @param  bool $unreads Whether the amount of unreads should be included. The default value is false. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsHistory'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsHistoryWithHttpInfo($x_auth_token, $x_user_id, $room_id, $latest = null, $oldest = null, $inclusive = null, $unreads = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsHistory'][0])
    {
        $request = $this->getApiV1GroupsHistoryRequest($x_auth_token, $x_user_id, $room_id, $latest, $oldest, $inclusive, $unreads, $offset, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsHistoryAsync
     *
     * Get Group History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  string $latest The end of time range of messages to retrieve. The default value is the current date and time. (optional)
     * @param  string $oldest The start of the time range of messages to retrieve (optional)
     * @param  bool $inclusive Whether messages which land on latest and oldest should be included. The default value is false. (optional)
     * @param  bool $unreads Whether the amount of unreads should be included. The default value is false. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsHistoryAsync($x_auth_token, $x_user_id, $room_id, $latest = null, $oldest = null, $inclusive = null, $unreads = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsHistory'][0])
    {
        return $this->getApiV1GroupsHistoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $latest, $oldest, $inclusive, $unreads, $offset, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsHistoryAsyncWithHttpInfo
     *
     * Get Group History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  string $latest The end of time range of messages to retrieve. The default value is the current date and time. (optional)
     * @param  string $oldest The start of the time range of messages to retrieve (optional)
     * @param  bool $inclusive Whether messages which land on latest and oldest should be included. The default value is false. (optional)
     * @param  bool $unreads Whether the amount of unreads should be included. The default value is false. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsHistoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $latest = null, $oldest = null, $inclusive = null, $unreads = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsHistory'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsHistory200Response';
        $request = $this->getApiV1GroupsHistoryRequest($x_auth_token, $x_user_id, $room_id, $latest, $oldest, $inclusive, $unreads, $offset, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsHistory'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. (required)
     * @param  string $latest The end of time range of messages to retrieve. The default value is the current date and time. (optional)
     * @param  string $oldest The start of the time range of messages to retrieve (optional)
     * @param  bool $inclusive Whether messages which land on latest and oldest should be included. The default value is false. (optional)
     * @param  bool $unreads Whether the amount of unreads should be included. The default value is false. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsHistoryRequest($x_auth_token, $x_user_id, $room_id, $latest = null, $oldest = null, $inclusive = null, $unreads = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsHistory'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsHistory'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsHistory'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling getApiV1GroupsHistory'
            );
        }








        $resourcePath = '/api/v1/groups.history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest,
            'latest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $oldest,
            'oldest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inclusive,
            'inclusive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unreads,
            'unreads', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsInfo
     *
     * Get Group Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response
     */
    public function getApiV1GroupsInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsInfo'][0])
    {
        list($response) = $this->getApiV1GroupsInfoWithHttpInfo($x_user_id, $x_auth_token, $room_id, $room_name, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsInfoWithHttpInfo
     *
     * Get Group Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsInfoWithHttpInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsInfo'][0])
    {
        $request = $this->getApiV1GroupsInfoRequest($x_user_id, $x_auth_token, $room_id, $room_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsInfoAsync
     *
     * Get Group Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsInfoAsync($x_user_id, $x_auth_token, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsInfo'][0])
    {
        return $this->getApiV1GroupsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $room_id, $room_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsInfoAsyncWithHttpInfo
     *
     * Get Group Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsInfo'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsInfo200Response';
        $request = $this->getApiV1GroupsInfoRequest($x_user_id, $x_auth_token, $room_id, $room_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsInfo'
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsInfoRequest($x_user_id, $x_auth_token, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsInfo'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsInfo'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsInfo'
            );
        }




        $resourcePath = '/api/v1/groups.info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsList
     *
     * Get Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsList'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsList($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1GroupsList'][0])
    {
        list($response) = $this->getApiV1GroupsListWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsListWithHttpInfo
     *
     * Get Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsList'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsListWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1GroupsList'][0])
    {
        $request = $this->getApiV1GroupsListRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsListAsync
     *
     * Get Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsListAsync($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1GroupsList'][0])
    {
        return $this->getApiV1GroupsListAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsListAsyncWithHttpInfo
     *
     * Get Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsListAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1GroupsList'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsList200Response';
        $request = $this->getApiV1GroupsListRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsList'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsListRequest($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1GroupsList'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsList'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsList'
            );
        }





        $resourcePath = '/api/v1/groups.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsListAll
     *
     * Get List of User Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsListAll'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsListAll($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsListAll'][0])
    {
        list($response) = $this->getApiV1GroupsListAllWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $query, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsListAllWithHttpInfo
     *
     * Get List of User Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsListAll'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsListAllWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsListAll'][0])
    {
        $request = $this->getApiV1GroupsListAllRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $query, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsListAllAsync
     *
     * Get List of User Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsListAllAsync($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsListAll'][0])
    {
        return $this->getApiV1GroupsListAllAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $query, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsListAllAsyncWithHttpInfo
     *
     * Get List of User Groups
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsListAllAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsListAll'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsListAll200Response';
        $request = $this->getApiV1GroupsListAllRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $query, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsListAll'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsListAllRequest($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $query = null, $fields = null, string $contentType = self::contentTypes['getApiV1GroupsListAll'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsListAll'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsListAll'
            );
        }







        $resourcePath = '/api/v1/groups.listAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsMembers
     *
     * List Group Members
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMembers'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsMembers($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $sort = null, $count = null, $offset = null, $status = null, $filter = null, string $contentType = self::contentTypes['getApiV1GroupsMembers'][0])
    {
        list($response) = $this->getApiV1GroupsMembersWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $sort, $count, $offset, $status, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsMembersWithHttpInfo
     *
     * List Group Members
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMembers'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsMembersWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $sort = null, $count = null, $offset = null, $status = null, $filter = null, string $contentType = self::contentTypes['getApiV1GroupsMembers'][0])
    {
        $request = $this->getApiV1GroupsMembersRequest($x_auth_token, $x_user_id, $room_id, $room_name, $sort, $count, $offset, $status, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsMembersAsync
     *
     * List Group Members
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsMembersAsync($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $sort = null, $count = null, $offset = null, $status = null, $filter = null, string $contentType = self::contentTypes['getApiV1GroupsMembers'][0])
    {
        return $this->getApiV1GroupsMembersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $sort, $count, $offset, $status, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsMembersAsyncWithHttpInfo
     *
     * List Group Members
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsMembersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $sort = null, $count = null, $offset = null, $status = null, $filter = null, string $contentType = self::contentTypes['getApiV1GroupsMembers'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMembers200Response';
        $request = $this->getApiV1GroupsMembersRequest($x_auth_token, $x_user_id, $room_id, $room_name, $sort, $count, $offset, $status, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsMembers'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsMembersRequest($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $sort = null, $count = null, $offset = null, $status = null, $filter = null, string $contentType = self::contentTypes['getApiV1GroupsMembers'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsMembers'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsMembers'
            );
        }









        $resourcePath = '/api/v1/groups.members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsMessages
     *
     * Get Group Messages
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMessages'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsMessages($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $fields = null, $query = null, $sort = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsMessages'][0])
    {
        list($response) = $this->getApiV1GroupsMessagesWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $fields, $query, $sort, $offset, $count, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsMessagesWithHttpInfo
     *
     * Get Group Messages
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMessages'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsMessagesWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $fields = null, $query = null, $sort = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsMessages'][0])
    {
        $request = $this->getApiV1GroupsMessagesRequest($x_auth_token, $x_user_id, $room_id, $room_name, $fields, $query, $sort, $offset, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsMessagesAsync
     *
     * Get Group Messages
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsMessagesAsync($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $fields = null, $query = null, $sort = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsMessages'][0])
    {
        return $this->getApiV1GroupsMessagesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $fields, $query, $sort, $offset, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsMessagesAsyncWithHttpInfo
     *
     * Get Group Messages
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsMessagesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $fields = null, $query = null, $sort = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsMessages'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsMessages200Response';
        $request = $this->getApiV1GroupsMessagesRequest($x_auth_token, $x_user_id, $room_id, $room_name, $fields, $query, $sort, $offset, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsMessages'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsMessagesRequest($x_auth_token, $x_user_id, $room_id = null, $room_name = null, $fields = null, $query = null, $sort = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1GroupsMessages'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsMessages'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsMessages'
            );
        }









        $resourcePath = '/api/v1/groups.messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsModerators
     *
     * Get Group Moderators
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsModerators'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsModerators($x_auth_token, $x_user_id, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsModerators'][0])
    {
        list($response) = $this->getApiV1GroupsModeratorsWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsModeratorsWithHttpInfo
     *
     * Get Group Moderators
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsModerators'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsModeratorsWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsModerators'][0])
    {
        $request = $this->getApiV1GroupsModeratorsRequest($x_auth_token, $x_user_id, $room_id, $room_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsModeratorsAsync
     *
     * Get Group Moderators
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsModerators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsModeratorsAsync($x_auth_token, $x_user_id, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsModerators'][0])
    {
        return $this->getApiV1GroupsModeratorsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $room_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsModeratorsAsyncWithHttpInfo
     *
     * Get Group Moderators
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsModerators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsModeratorsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsModerators'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsModerators200Response';
        $request = $this->getApiV1GroupsModeratorsRequest($x_auth_token, $x_user_id, $room_id, $room_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsModerators'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsModerators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsModeratorsRequest($x_auth_token, $x_user_id, $room_id = null, $room_name = null, string $contentType = self::contentTypes['getApiV1GroupsModerators'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsModerators'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsModerators'
            );
        }




        $resourcePath = '/api/v1/groups.moderators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsOnline
     *
     * Get Group Online Users
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsOnline'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1GroupsOnline($x_auth_token, $x_user_id, $query = null, string $contentType = self::contentTypes['getApiV1GroupsOnline'][0])
    {
        list($response) = $this->getApiV1GroupsOnlineWithHttpInfo($x_auth_token, $x_user_id, $query, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsOnlineWithHttpInfo
     *
     * Get Group Online Users
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsOnline'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsOnlineWithHttpInfo($x_auth_token, $x_user_id, $query = null, string $contentType = self::contentTypes['getApiV1GroupsOnline'][0])
    {
        $request = $this->getApiV1GroupsOnlineRequest($x_auth_token, $x_user_id, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsOnlineAsync
     *
     * Get Group Online Users
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsOnline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsOnlineAsync($x_auth_token, $x_user_id, $query = null, string $contentType = self::contentTypes['getApiV1GroupsOnline'][0])
    {
        return $this->getApiV1GroupsOnlineAsyncWithHttpInfo($x_auth_token, $x_user_id, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsOnlineAsyncWithHttpInfo
     *
     * Get Group Online Users
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsOnline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsOnlineAsyncWithHttpInfo($x_auth_token, $x_user_id, $query = null, string $contentType = self::contentTypes['getApiV1GroupsOnline'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1ChannelsOnline200Response';
        $request = $this->getApiV1GroupsOnlineRequest($x_auth_token, $x_user_id, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsOnline'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsOnline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsOnlineRequest($x_auth_token, $x_user_id, $query = null, string $contentType = self::contentTypes['getApiV1GroupsOnline'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsOnline'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsOnline'
            );
        }



        $resourcePath = '/api/v1/groups.online';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1GroupsRoles
     *
     * List Group Roles
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsRoles'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response
     */
    public function getApiV1GroupsRoles($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1GroupsRoles'][0])
    {
        list($response) = $this->getApiV1GroupsRolesWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1GroupsRolesWithHttpInfo
     *
     * List Group Roles
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsRoles'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1GroupsRolesWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1GroupsRoles'][0])
    {
        $request = $this->getApiV1GroupsRolesRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1GroupsRolesAsync
     *
     * List Group Roles
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsRolesAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1GroupsRoles'][0])
    {
        return $this->getApiV1GroupsRolesAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1GroupsRolesAsyncWithHttpInfo
     *
     * List Group Roles
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1GroupsRolesAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1GroupsRoles'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetApiV1GroupsRoles200Response';
        $request = $this->getApiV1GroupsRolesRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1GroupsRoles'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1GroupsRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1GroupsRolesRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1GroupsRoles'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1GroupsRoles'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1GroupsRoles'
            );
        }


        $resourcePath = '/api/v1/groups.roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupsMembersByHighestRole
     *
     * Group Members By Highest Role
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupsMembersByHighestRole'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getGroupsMembersByHighestRole($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $room_id = null, $room_name = null, $status = null, $filter = null, string $contentType = self::contentTypes['getGroupsMembersByHighestRole'][0])
    {
        list($response) = $this->getGroupsMembersByHighestRoleWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $room_id, $room_name, $status, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getGroupsMembersByHighestRoleWithHttpInfo
     *
     * Group Members By Highest Role
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupsMembersByHighestRole'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsMembersByHighestRoleWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $room_id = null, $room_name = null, $status = null, $filter = null, string $contentType = self::contentTypes['getGroupsMembersByHighestRole'][0])
    {
        $request = $this->getGroupsMembersByHighestRoleRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $room_id, $room_name, $status, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupsMembersByHighestRoleAsync
     *
     * Group Members By Highest Role
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupsMembersByHighestRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsMembersByHighestRoleAsync($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $room_id = null, $room_name = null, $status = null, $filter = null, string $contentType = self::contentTypes['getGroupsMembersByHighestRole'][0])
    {
        return $this->getGroupsMembersByHighestRoleAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset, $count, $sort, $room_id, $room_name, $status, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupsMembersByHighestRoleAsyncWithHttpInfo
     *
     * Group Members By Highest Role
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupsMembersByHighestRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsMembersByHighestRoleAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $room_id = null, $room_name = null, $status = null, $filter = null, string $contentType = self::contentTypes['getGroupsMembersByHighestRole'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\GetChannelsMembersByHighestRole200Response';
        $request = $this->getGroupsMembersByHighestRoleRequest($x_auth_token, $x_user_id, $offset, $count, $sort, $room_id, $room_name, $status, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupsMembersByHighestRole'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string[] $status The user&#39;s status (search filter). (optional)
     * @param  string $filter Extra search filters to be applied to the fields defined in the &#x60;Accounts_SearchFields&#x60; setting. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupsMembersByHighestRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupsMembersByHighestRoleRequest($x_auth_token, $x_user_id, $offset = null, $count = null, $sort = null, $room_id = null, $room_name = null, $status = null, $filter = null, string $contentType = self::contentTypes['getGroupsMembersByHighestRole'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getGroupsMembersByHighestRole'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getGroupsMembersByHighestRole'
            );
        }









        $resourcePath = '/groups.membersByHighestRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsAddAll
     *
     * Add All Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAllRequest $post_api_v1_groups_add_all_request post_api_v1_groups_add_all_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddAll'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsAddAll($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddAll'][0])
    {
        list($response) = $this->postApiV1GroupsAddAllWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsAddAllWithHttpInfo
     *
     * Add All Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAllRequest $post_api_v1_groups_add_all_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddAll'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsAddAllWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddAll'][0])
    {
        $request = $this->postApiV1GroupsAddAllRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsAddAllAsync
     *
     * Add All Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAllRequest $post_api_v1_groups_add_all_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddAllAsync($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddAll'][0])
    {
        return $this->postApiV1GroupsAddAllAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsAddAllAsyncWithHttpInfo
     *
     * Add All Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAllRequest $post_api_v1_groups_add_all_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddAllAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddAll'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAll200Response';
        $request = $this->postApiV1GroupsAddAllRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsAddAll'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddAllRequest $post_api_v1_groups_add_all_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsAddAllRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_all_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddAll'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsAddAll'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsAddAll'
            );
        }



        $resourcePath = '/api/v1/groups.addAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_add_all_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_add_all_request));
            } else {
                $httpBody = $post_api_v1_groups_add_all_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsAddLeader
     *
     * Add Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddLeader'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsAddLeader($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddLeader'][0])
    {
        list($response) = $this->postApiV1GroupsAddLeaderWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsAddLeaderWithHttpInfo
     *
     * Add Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddLeader'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsAddLeaderWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddLeader'][0])
    {
        $request = $this->postApiV1GroupsAddLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsAddLeaderAsync
     *
     * Add Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddLeaderAsync($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddLeader'][0])
    {
        return $this->postApiV1GroupsAddLeaderAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsAddLeaderAsyncWithHttpInfo
     *
     * Add Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddLeaderAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddLeader'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsAddLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsAddLeader'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsAddLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddLeader'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsAddLeader'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsAddLeader'
            );
        }



        $resourcePath = '/api/v1/groups.addLeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_add_leader_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_add_leader_request));
            } else {
                $httpBody = $post_api_v1_groups_add_leader_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsAddModerator
     *
     * Add Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddModerator'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsAddModerator($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddModerator'][0])
    {
        list($response) = $this->postApiV1GroupsAddModeratorWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsAddModeratorWithHttpInfo
     *
     * Add Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddModerator'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsAddModeratorWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddModerator'][0])
    {
        $request = $this->postApiV1GroupsAddModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsAddModeratorAsync
     *
     * Add Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddModeratorAsync($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddModerator'][0])
    {
        return $this->postApiV1GroupsAddModeratorAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsAddModeratorAsyncWithHttpInfo
     *
     * Add Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddModeratorAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddModerator'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsAddModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsAddModerator'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddLeaderRequest $post_api_v1_groups_add_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsAddModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddModerator'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsAddModerator'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsAddModerator'
            );
        }



        $resourcePath = '/api/v1/groups.addModerator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_add_leader_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_add_leader_request));
            } else {
                $httpBody = $post_api_v1_groups_add_leader_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsAddOwner
     *
     * Add Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddOwner'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsAddOwner($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddOwner'][0])
    {
        list($response) = $this->postApiV1GroupsAddOwnerWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsAddOwnerWithHttpInfo
     *
     * Add Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddOwner'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsAddOwnerWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddOwner'][0])
    {
        $request = $this->postApiV1GroupsAddOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsAddOwnerAsync
     *
     * Add Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddOwnerAsync($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddOwner'][0])
    {
        return $this->postApiV1GroupsAddOwnerAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsAddOwnerAsyncWithHttpInfo
     *
     * Add Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsAddOwnerAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddOwner'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsAddOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsAddOwner'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsAddOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsAddOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsAddOwner'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsAddOwner'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsAddOwner'
            );
        }



        $resourcePath = '/api/v1/groups.addOwner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_add_owner_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_add_owner_request));
            } else {
                $httpBody = $post_api_v1_groups_add_owner_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsArchive
     *
     * Archive a Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsArchiveRequest $post_api_v1_groups_archive_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsArchive'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsArchive($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request = null, string $contentType = self::contentTypes['postApiV1GroupsArchive'][0])
    {
        list($response) = $this->postApiV1GroupsArchiveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsArchiveWithHttpInfo
     *
     * Archive a Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsArchiveRequest $post_api_v1_groups_archive_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsArchive'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsArchiveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request = null, string $contentType = self::contentTypes['postApiV1GroupsArchive'][0])
    {
        $request = $this->postApiV1GroupsArchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsArchiveAsync
     *
     * Archive a Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsArchiveRequest $post_api_v1_groups_archive_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsArchiveAsync($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request = null, string $contentType = self::contentTypes['postApiV1GroupsArchive'][0])
    {
        return $this->postApiV1GroupsArchiveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsArchiveAsyncWithHttpInfo
     *
     * Archive a Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsArchiveRequest $post_api_v1_groups_archive_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsArchiveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request = null, string $contentType = self::contentTypes['postApiV1GroupsArchive'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsArchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsArchive'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsArchiveRequest $post_api_v1_groups_archive_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsArchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_archive_request = null, string $contentType = self::contentTypes['postApiV1GroupsArchive'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsArchive'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsArchive'
            );
        }



        $resourcePath = '/api/v1/groups.archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_archive_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_archive_request));
            } else {
                $httpBody = $post_api_v1_groups_archive_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsClose
     *
     * Close Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCloseRequest $post_api_v1_groups_close_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsClose'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsClose($x_auth_token, $x_user_id, $post_api_v1_groups_close_request = null, string $contentType = self::contentTypes['postApiV1GroupsClose'][0])
    {
        list($response) = $this->postApiV1GroupsCloseWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_close_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsCloseWithHttpInfo
     *
     * Close Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCloseRequest $post_api_v1_groups_close_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsClose'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsCloseWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_close_request = null, string $contentType = self::contentTypes['postApiV1GroupsClose'][0])
    {
        $request = $this->postApiV1GroupsCloseRequest($x_auth_token, $x_user_id, $post_api_v1_groups_close_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsCloseAsync
     *
     * Close Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCloseRequest $post_api_v1_groups_close_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsClose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsCloseAsync($x_auth_token, $x_user_id, $post_api_v1_groups_close_request = null, string $contentType = self::contentTypes['postApiV1GroupsClose'][0])
    {
        return $this->postApiV1GroupsCloseAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_close_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsCloseAsyncWithHttpInfo
     *
     * Close Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCloseRequest $post_api_v1_groups_close_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsClose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsCloseAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_close_request = null, string $contentType = self::contentTypes['postApiV1GroupsClose'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsCloseRequest($x_auth_token, $x_user_id, $post_api_v1_groups_close_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsClose'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCloseRequest $post_api_v1_groups_close_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsClose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsCloseRequest($x_auth_token, $x_user_id, $post_api_v1_groups_close_request = null, string $contentType = self::contentTypes['postApiV1GroupsClose'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsClose'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsClose'
            );
        }



        $resourcePath = '/api/v1/groups.close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_close_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_close_request));
            } else {
                $httpBody = $post_api_v1_groups_close_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsConvertToTeam
     *
     * Convert a Group to Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1TeamsDeleteRequest $post_api_v1_teams_delete_request post_api_v1_teams_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsConvertToTeam'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsConvertToTeam($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsConvertToTeam'][0])
    {
        list($response) = $this->postApiV1GroupsConvertToTeamWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsConvertToTeamWithHttpInfo
     *
     * Convert a Group to Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1TeamsDeleteRequest $post_api_v1_teams_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsConvertToTeam'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsConvertToTeamWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsConvertToTeam'][0])
    {
        $request = $this->postApiV1GroupsConvertToTeamRequest($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsConvertToTeamAsync
     *
     * Convert a Group to Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1TeamsDeleteRequest $post_api_v1_teams_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsConvertToTeam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsConvertToTeamAsync($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsConvertToTeam'][0])
    {
        return $this->postApiV1GroupsConvertToTeamAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsConvertToTeamAsyncWithHttpInfo
     *
     * Convert a Group to Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1TeamsDeleteRequest $post_api_v1_teams_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsConvertToTeam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsConvertToTeamAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsConvertToTeam'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsConvertToTeam200Response';
        $request = $this->postApiV1GroupsConvertToTeamRequest($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsConvertToTeam'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1TeamsDeleteRequest $post_api_v1_teams_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsConvertToTeam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsConvertToTeamRequest($x_auth_token, $x_user_id, $post_api_v1_teams_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsConvertToTeam'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsConvertToTeam'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsConvertToTeam'
            );
        }



        $resourcePath = '/api/v1/groups.convertToTeam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_teams_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_teams_delete_request));
            } else {
                $httpBody = $post_api_v1_teams_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsCreate
     *
     * Create Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreateRequest $post_api_v1_groups_create_request post_api_v1_groups_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsCreate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsCreate($x_auth_token, $x_user_id, $post_api_v1_groups_create_request = null, string $contentType = self::contentTypes['postApiV1GroupsCreate'][0])
    {
        list($response) = $this->postApiV1GroupsCreateWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_create_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsCreateWithHttpInfo
     *
     * Create Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreateRequest $post_api_v1_groups_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsCreate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsCreateWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_create_request = null, string $contentType = self::contentTypes['postApiV1GroupsCreate'][0])
    {
        $request = $this->postApiV1GroupsCreateRequest($x_auth_token, $x_user_id, $post_api_v1_groups_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsCreateAsync
     *
     * Create Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreateRequest $post_api_v1_groups_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsCreateAsync($x_auth_token, $x_user_id, $post_api_v1_groups_create_request = null, string $contentType = self::contentTypes['postApiV1GroupsCreate'][0])
    {
        return $this->postApiV1GroupsCreateAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsCreateAsyncWithHttpInfo
     *
     * Create Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreateRequest $post_api_v1_groups_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsCreateAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_create_request = null, string $contentType = self::contentTypes['postApiV1GroupsCreate'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreate200Response';
        $request = $this->postApiV1GroupsCreateRequest($x_auth_token, $x_user_id, $post_api_v1_groups_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsCreate'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsCreateRequest $post_api_v1_groups_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsCreateRequest($x_auth_token, $x_user_id, $post_api_v1_groups_create_request = null, string $contentType = self::contentTypes['postApiV1GroupsCreate'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsCreate'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsCreate'
            );
        }



        $resourcePath = '/api/v1/groups.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_create_request));
            } else {
                $httpBody = $post_api_v1_groups_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsDelete
     *
     * Delete Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsDeleteRequest $post_api_v1_channels_delete_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsDelete($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsDelete'][0])
    {
        list($response) = $this->postApiV1GroupsDeleteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsDeleteWithHttpInfo
     *
     * Delete Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsDeleteRequest $post_api_v1_channels_delete_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsDeleteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsDelete'][0])
    {
        $request = $this->postApiV1GroupsDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsDeleteAsync
     *
     * Delete Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsDeleteRequest $post_api_v1_channels_delete_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsDeleteAsync($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsDelete'][0])
    {
        return $this->postApiV1GroupsDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsDeleteAsyncWithHttpInfo
     *
     * Delete Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsDeleteRequest $post_api_v1_channels_delete_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsDelete'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsDelete'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsDeleteRequest $post_api_v1_channels_delete_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_channels_delete_request = null, string $contentType = self::contentTypes['postApiV1GroupsDelete'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsDelete'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsDelete'
            );
        }



        $resourcePath = '/api/v1/groups.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_channels_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_channels_delete_request));
            } else {
                $httpBody = $post_api_v1_channels_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsInvite
     *
     * Invite Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInviteRequest $post_api_v1_groups_invite_request post_api_v1_groups_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsInvite'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response
     */
    public function postApiV1GroupsInvite($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request = null, string $contentType = self::contentTypes['postApiV1GroupsInvite'][0])
    {
        list($response) = $this->postApiV1GroupsInviteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsInviteWithHttpInfo
     *
     * Invite Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInviteRequest $post_api_v1_groups_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsInvite'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsInviteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request = null, string $contentType = self::contentTypes['postApiV1GroupsInvite'][0])
    {
        $request = $this->postApiV1GroupsInviteRequest($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddOwner400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsInviteAsync
     *
     * Invite Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInviteRequest $post_api_v1_groups_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsInviteAsync($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request = null, string $contentType = self::contentTypes['postApiV1GroupsInvite'][0])
    {
        return $this->postApiV1GroupsInviteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsInviteAsyncWithHttpInfo
     *
     * Invite Users to Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInviteRequest $post_api_v1_groups_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsInviteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request = null, string $contentType = self::contentTypes['postApiV1GroupsInvite'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInvite200Response';
        $request = $this->postApiV1GroupsInviteRequest($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsInvite'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsInviteRequest $post_api_v1_groups_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsInviteRequest($x_auth_token, $x_user_id, $post_api_v1_groups_invite_request = null, string $contentType = self::contentTypes['postApiV1GroupsInvite'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsInvite'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsInvite'
            );
        }



        $resourcePath = '/api/v1/groups.invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_invite_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_invite_request));
            } else {
                $httpBody = $post_api_v1_groups_invite_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsKick
     *
     * Remove User from Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsKick'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsKick($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsKick'][0])
    {
        list($response) = $this->postApiV1GroupsKickWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsKickWithHttpInfo
     *
     * Remove User from Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsKick'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsKickWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsKick'][0])
    {
        $request = $this->postApiV1GroupsKickRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsKickAsync
     *
     * Remove User from Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsKick'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsKickAsync($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsKick'][0])
    {
        return $this->postApiV1GroupsKickAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsKickAsyncWithHttpInfo
     *
     * Remove User from Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsKick'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsKickAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsKick'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
        $request = $this->postApiV1GroupsKickRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsKick'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsAddOwnerRequest $post_api_v1_groups_add_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsKick'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsKickRequest($x_auth_token, $x_user_id, $post_api_v1_groups_add_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsKick'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsKick'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsKick'
            );
        }



        $resourcePath = '/api/v1/groups.kick';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_add_owner_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_add_owner_request));
            } else {
                $httpBody = $post_api_v1_groups_add_owner_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsOpen
     *
     * Add Group to List
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsOpenRequest $post_api_v1_groups_open_request post_api_v1_groups_open_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsOpen'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsOpen($x_auth_token, $x_user_id, $post_api_v1_groups_open_request = null, string $contentType = self::contentTypes['postApiV1GroupsOpen'][0])
    {
        list($response) = $this->postApiV1GroupsOpenWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_open_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsOpenWithHttpInfo
     *
     * Add Group to List
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsOpenRequest $post_api_v1_groups_open_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsOpen'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsOpenWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_open_request = null, string $contentType = self::contentTypes['postApiV1GroupsOpen'][0])
    {
        $request = $this->postApiV1GroupsOpenRequest($x_auth_token, $x_user_id, $post_api_v1_groups_open_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsOpenAsync
     *
     * Add Group to List
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsOpenRequest $post_api_v1_groups_open_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsOpenAsync($x_auth_token, $x_user_id, $post_api_v1_groups_open_request = null, string $contentType = self::contentTypes['postApiV1GroupsOpen'][0])
    {
        return $this->postApiV1GroupsOpenAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_open_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsOpenAsyncWithHttpInfo
     *
     * Add Group to List
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsOpenRequest $post_api_v1_groups_open_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsOpenAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_open_request = null, string $contentType = self::contentTypes['postApiV1GroupsOpen'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsOpenRequest($x_auth_token, $x_user_id, $post_api_v1_groups_open_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsOpen'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsOpenRequest $post_api_v1_groups_open_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsOpenRequest($x_auth_token, $x_user_id, $post_api_v1_groups_open_request = null, string $contentType = self::contentTypes['postApiV1GroupsOpen'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsOpen'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsOpen'
            );
        }



        $resourcePath = '/api/v1/groups.open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_open_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_open_request));
            } else {
                $httpBody = $post_api_v1_groups_open_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsRemoveLeader
     *
     * Remove Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveLeaderRequest $post_api_v1_groups_remove_leader_request post_api_v1_groups_remove_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveLeader'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsRemoveLeader($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveLeader'][0])
    {
        list($response) = $this->postApiV1GroupsRemoveLeaderWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsRemoveLeaderWithHttpInfo
     *
     * Remove Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveLeaderRequest $post_api_v1_groups_remove_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveLeader'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsRemoveLeaderWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveLeader'][0])
    {
        $request = $this->postApiV1GroupsRemoveLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsRemoveLeaderAsync
     *
     * Remove Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveLeaderRequest $post_api_v1_groups_remove_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveLeaderAsync($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveLeader'][0])
    {
        return $this->postApiV1GroupsRemoveLeaderAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsRemoveLeaderAsyncWithHttpInfo
     *
     * Remove Group Leader
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveLeaderRequest $post_api_v1_groups_remove_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveLeaderAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveLeader'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsRemoveLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsRemoveLeader'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveLeaderRequest $post_api_v1_groups_remove_leader_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveLeader'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsRemoveLeaderRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_leader_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveLeader'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsRemoveLeader'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsRemoveLeader'
            );
        }



        $resourcePath = '/api/v1/groups.removeLeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_remove_leader_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_remove_leader_request));
            } else {
                $httpBody = $post_api_v1_groups_remove_leader_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsRemoveModerator
     *
     * Remove Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveModeratorRequest $post_api_v1_groups_remove_moderator_request post_api_v1_groups_remove_moderator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveModerator'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsRemoveModerator($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveModerator'][0])
    {
        list($response) = $this->postApiV1GroupsRemoveModeratorWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsRemoveModeratorWithHttpInfo
     *
     * Remove Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveModeratorRequest $post_api_v1_groups_remove_moderator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveModerator'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsRemoveModeratorWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveModerator'][0])
    {
        $request = $this->postApiV1GroupsRemoveModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsRemoveModeratorAsync
     *
     * Remove Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveModeratorRequest $post_api_v1_groups_remove_moderator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveModeratorAsync($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveModerator'][0])
    {
        return $this->postApiV1GroupsRemoveModeratorAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsRemoveModeratorAsyncWithHttpInfo
     *
     * Remove Group Moderator
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveModeratorRequest $post_api_v1_groups_remove_moderator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveModeratorAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveModerator'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsRemoveModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsRemoveModerator'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveModeratorRequest $post_api_v1_groups_remove_moderator_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveModerator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsRemoveModeratorRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_moderator_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveModerator'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsRemoveModerator'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsRemoveModerator'
            );
        }



        $resourcePath = '/api/v1/groups.removeModerator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_remove_moderator_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_remove_moderator_request));
            } else {
                $httpBody = $post_api_v1_groups_remove_moderator_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsRemoveOwner
     *
     * Remove Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveOwnerRequest $post_api_v1_groups_remove_owner_request post_api_v1_groups_remove_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveOwner'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsRemoveOwner($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveOwner'][0])
    {
        list($response) = $this->postApiV1GroupsRemoveOwnerWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsRemoveOwnerWithHttpInfo
     *
     * Remove Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveOwnerRequest $post_api_v1_groups_remove_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveOwner'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsRemoveOwnerWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveOwner'][0])
    {
        $request = $this->postApiV1GroupsRemoveOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsRemoveOwnerAsync
     *
     * Remove Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveOwnerRequest $post_api_v1_groups_remove_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveOwnerAsync($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveOwner'][0])
    {
        return $this->postApiV1GroupsRemoveOwnerAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsRemoveOwnerAsyncWithHttpInfo
     *
     * Remove Group Owner
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveOwnerRequest $post_api_v1_groups_remove_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRemoveOwnerAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveOwner'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsRemoveOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsRemoveOwner'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRemoveOwnerRequest $post_api_v1_groups_remove_owner_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRemoveOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsRemoveOwnerRequest($x_auth_token, $x_user_id, $post_api_v1_groups_remove_owner_request = null, string $contentType = self::contentTypes['postApiV1GroupsRemoveOwner'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsRemoveOwner'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsRemoveOwner'
            );
        }



        $resourcePath = '/api/v1/groups.removeOwner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_remove_owner_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_remove_owner_request));
            } else {
                $httpBody = $post_api_v1_groups_remove_owner_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsRename
     *
     * Rename Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRenameRequest $post_api_v1_groups_rename_request post_api_v1_groups_rename_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRename'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response
     */
    public function postApiV1GroupsRename($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request = null, string $contentType = self::contentTypes['postApiV1GroupsRename'][0])
    {
        list($response) = $this->postApiV1GroupsRenameWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsRenameWithHttpInfo
     *
     * Rename Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRenameRequest $post_api_v1_groups_rename_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRename'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsRenameWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request = null, string $contentType = self::contentTypes['postApiV1GroupsRename'][0])
    {
        $request = $this->postApiV1GroupsRenameRequest($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsRenameAsync
     *
     * Rename Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRenameRequest $post_api_v1_groups_rename_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRenameAsync($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request = null, string $contentType = self::contentTypes['postApiV1GroupsRename'][0])
    {
        return $this->postApiV1GroupsRenameAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsRenameAsyncWithHttpInfo
     *
     * Rename Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRenameRequest $post_api_v1_groups_rename_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsRenameAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request = null, string $contentType = self::contentTypes['postApiV1GroupsRename'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
        $request = $this->postApiV1GroupsRenameRequest($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsRename'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsRenameRequest $post_api_v1_groups_rename_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsRenameRequest($x_auth_token, $x_user_id, $post_api_v1_groups_rename_request = null, string $contentType = self::contentTypes['postApiV1GroupsRename'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsRename'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsRename'
            );
        }



        $resourcePath = '/api/v1/groups.rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_rename_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_rename_request));
            } else {
                $httpBody = $post_api_v1_groups_rename_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetAnnouncement
     *
     * Set Group Announcement
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetAnnouncementRequest $post_api_v1_groups_set_announcement_request post_api_v1_groups_set_announcement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetAnnouncement'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetAnnouncement($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetAnnouncement'][0])
    {
        list($response) = $this->postApiV1GroupsSetAnnouncementWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetAnnouncementWithHttpInfo
     *
     * Set Group Announcement
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetAnnouncementRequest $post_api_v1_groups_set_announcement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetAnnouncement'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetAnnouncementWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetAnnouncement'][0])
    {
        $request = $this->postApiV1GroupsSetAnnouncementRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetAnnouncementAsync
     *
     * Set Group Announcement
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetAnnouncementRequest $post_api_v1_groups_set_announcement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetAnnouncement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetAnnouncementAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetAnnouncement'][0])
    {
        return $this->postApiV1GroupsSetAnnouncementAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetAnnouncementAsyncWithHttpInfo
     *
     * Set Group Announcement
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetAnnouncementRequest $post_api_v1_groups_set_announcement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetAnnouncement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetAnnouncementAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetAnnouncement'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetAnnouncement200Response';
        $request = $this->postApiV1GroupsSetAnnouncementRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetAnnouncement'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetAnnouncementRequest $post_api_v1_groups_set_announcement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetAnnouncement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetAnnouncementRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_announcement_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetAnnouncement'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetAnnouncement'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetAnnouncement'
            );
        }



        $resourcePath = '/api/v1/groups.setAnnouncement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_announcement_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_announcement_request));
            } else {
                $httpBody = $post_api_v1_groups_set_announcement_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetCustomFields
     *
     * Sets Group Custom Fields
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFieldsRequest $post_api_v1_groups_set_custom_fields_request post_api_v1_groups_set_custom_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetCustomFields'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response
     */
    public function postApiV1GroupsSetCustomFields($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetCustomFields'][0])
    {
        list($response) = $this->postApiV1GroupsSetCustomFieldsWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetCustomFieldsWithHttpInfo
     *
     * Sets Group Custom Fields
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFieldsRequest $post_api_v1_groups_set_custom_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetCustomFields'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetCustomFieldsWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetCustomFields'][0])
    {
        $request = $this->postApiV1GroupsSetCustomFieldsRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetCustomFieldsAsync
     *
     * Sets Group Custom Fields
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFieldsRequest $post_api_v1_groups_set_custom_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetCustomFieldsAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetCustomFields'][0])
    {
        return $this->postApiV1GroupsSetCustomFieldsAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetCustomFieldsAsyncWithHttpInfo
     *
     * Sets Group Custom Fields
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFieldsRequest $post_api_v1_groups_set_custom_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetCustomFieldsAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetCustomFields'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFields200Response';
        $request = $this->postApiV1GroupsSetCustomFieldsRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetCustomFields'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetCustomFieldsRequest $post_api_v1_groups_set_custom_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetCustomFieldsRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_custom_fields_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetCustomFields'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetCustomFields'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetCustomFields'
            );
        }



        $resourcePath = '/api/v1/groups.setCustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_custom_fields_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_custom_fields_request));
            } else {
                $httpBody = $post_api_v1_groups_set_custom_fields_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetDescription
     *
     * Set Group Description
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetDescriptionRequest $post_api_v1_groups_set_description_request post_api_v1_groups_set_description_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetDescription'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetDescription($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetDescription'][0])
    {
        list($response) = $this->postApiV1GroupsSetDescriptionWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetDescriptionWithHttpInfo
     *
     * Set Group Description
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetDescriptionRequest $post_api_v1_groups_set_description_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetDescription'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetDescriptionWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetDescription'][0])
    {
        $request = $this->postApiV1GroupsSetDescriptionRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetDescriptionAsync
     *
     * Set Group Description
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetDescriptionRequest $post_api_v1_groups_set_description_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetDescriptionAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetDescription'][0])
    {
        return $this->postApiV1GroupsSetDescriptionAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetDescriptionAsyncWithHttpInfo
     *
     * Set Group Description
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetDescriptionRequest $post_api_v1_groups_set_description_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetDescriptionAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetDescription'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetDescription200Response';
        $request = $this->postApiV1GroupsSetDescriptionRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetDescription'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetDescriptionRequest $post_api_v1_groups_set_description_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetDescriptionRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_description_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetDescription'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetDescription'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetDescription'
            );
        }



        $resourcePath = '/api/v1/groups.setDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_description_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_description_request));
            } else {
                $httpBody = $post_api_v1_groups_set_description_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetEncrypted
     *
     * Set Group as Encrypted
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncryptedRequest $post_api_v1_groups_set_encrypted_request post_api_v1_groups_set_encrypted_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetEncrypted'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetEncrypted($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetEncrypted'][0])
    {
        list($response) = $this->postApiV1GroupsSetEncryptedWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetEncryptedWithHttpInfo
     *
     * Set Group as Encrypted
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncryptedRequest $post_api_v1_groups_set_encrypted_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetEncrypted'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetEncryptedWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetEncrypted'][0])
    {
        $request = $this->postApiV1GroupsSetEncryptedRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetEncryptedAsync
     *
     * Set Group as Encrypted
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncryptedRequest $post_api_v1_groups_set_encrypted_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetEncrypted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetEncryptedAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetEncrypted'][0])
    {
        return $this->postApiV1GroupsSetEncryptedAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetEncryptedAsyncWithHttpInfo
     *
     * Set Group as Encrypted
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncryptedRequest $post_api_v1_groups_set_encrypted_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetEncrypted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetEncryptedAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetEncrypted'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncrypted200Response';
        $request = $this->postApiV1GroupsSetEncryptedRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetEncrypted'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetEncryptedRequest $post_api_v1_groups_set_encrypted_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetEncrypted'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetEncryptedRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_encrypted_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetEncrypted'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetEncrypted'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetEncrypted'
            );
        }



        $resourcePath = '/api/v1/groups.setEncrypted';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_encrypted_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_encrypted_request));
            } else {
                $httpBody = $post_api_v1_groups_set_encrypted_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetPurpose
     *
     * Set Group Purpose
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetPurposeRequest $post_api_v1_groups_set_purpose_request post_api_v1_groups_set_purpose_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetPurpose'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response
     */
    public function postApiV1GroupsSetPurpose($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetPurpose'][0])
    {
        list($response) = $this->postApiV1GroupsSetPurposeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetPurposeWithHttpInfo
     *
     * Set Group Purpose
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetPurposeRequest $post_api_v1_groups_set_purpose_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetPurpose'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetPurposeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetPurpose'][0])
    {
        $request = $this->postApiV1GroupsSetPurposeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetPurposeAsync
     *
     * Set Group Purpose
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetPurposeRequest $post_api_v1_groups_set_purpose_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetPurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetPurposeAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetPurpose'][0])
    {
        return $this->postApiV1GroupsSetPurposeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetPurposeAsyncWithHttpInfo
     *
     * Set Group Purpose
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetPurposeRequest $post_api_v1_groups_set_purpose_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetPurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetPurposeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetPurpose'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetPurpose200Response';
        $request = $this->postApiV1GroupsSetPurposeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetPurpose'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetPurposeRequest $post_api_v1_groups_set_purpose_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetPurpose'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetPurposeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_purpose_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetPurpose'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetPurpose'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetPurpose'
            );
        }



        $resourcePath = '/api/v1/groups.setPurpose';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_purpose_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_purpose_request));
            } else {
                $httpBody = $post_api_v1_groups_set_purpose_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetReadOnly
     *
     * Set Group as Read Only
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnlyRequest $post_api_v1_groups_set_read_only_request post_api_v1_groups_set_read_only_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetReadOnly'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetReadOnly($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetReadOnly'][0])
    {
        list($response) = $this->postApiV1GroupsSetReadOnlyWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetReadOnlyWithHttpInfo
     *
     * Set Group as Read Only
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnlyRequest $post_api_v1_groups_set_read_only_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetReadOnly'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetReadOnlyWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetReadOnly'][0])
    {
        $request = $this->postApiV1GroupsSetReadOnlyRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetReadOnlyAsync
     *
     * Set Group as Read Only
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnlyRequest $post_api_v1_groups_set_read_only_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetReadOnly'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetReadOnlyAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetReadOnly'][0])
    {
        return $this->postApiV1GroupsSetReadOnlyAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetReadOnlyAsyncWithHttpInfo
     *
     * Set Group as Read Only
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnlyRequest $post_api_v1_groups_set_read_only_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetReadOnly'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetReadOnlyAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetReadOnly'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response';
        $request = $this->postApiV1GroupsSetReadOnlyRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetReadOnly'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnlyRequest $post_api_v1_groups_set_read_only_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetReadOnly'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetReadOnlyRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_read_only_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetReadOnly'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetReadOnly'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetReadOnly'
            );
        }



        $resourcePath = '/api/v1/groups.setReadOnly';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_read_only_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_read_only_request));
            } else {
                $httpBody = $post_api_v1_groups_set_read_only_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetTopic
     *
     * Set Group Topic
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTopicRequest $post_api_v1_groups_set_topic_request post_api_v1_groups_set_topic_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetTopic'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetTopic($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetTopic'][0])
    {
        list($response) = $this->postApiV1GroupsSetTopicWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetTopicWithHttpInfo
     *
     * Set Group Topic
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTopicRequest $post_api_v1_groups_set_topic_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetTopic'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetTopicWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetTopic'][0])
    {
        $request = $this->postApiV1GroupsSetTopicRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetTopicAsync
     *
     * Set Group Topic
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTopicRequest $post_api_v1_groups_set_topic_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetTopic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetTopicAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetTopic'][0])
    {
        return $this->postApiV1GroupsSetTopicAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetTopicAsyncWithHttpInfo
     *
     * Set Group Topic
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTopicRequest $post_api_v1_groups_set_topic_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetTopic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetTopicAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetTopic'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsSetTopic200Response';
        $request = $this->postApiV1GroupsSetTopicRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetTopic'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTopicRequest $post_api_v1_groups_set_topic_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetTopic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetTopicRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_topic_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetTopic'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetTopic'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetTopic'
            );
        }



        $resourcePath = '/api/v1/groups.setTopic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_topic_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_topic_request));
            } else {
                $httpBody = $post_api_v1_groups_set_topic_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsSetType
     *
     * Set Group Type
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTypeRequest $post_api_v1_groups_set_type_request post_api_v1_groups_set_type_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetType'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsSetType($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetType'][0])
    {
        list($response) = $this->postApiV1GroupsSetTypeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsSetTypeWithHttpInfo
     *
     * Set Group Type
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTypeRequest $post_api_v1_groups_set_type_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetType'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsSetTypeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetType'][0])
    {
        $request = $this->postApiV1GroupsSetTypeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsSetTypeAsync
     *
     * Set Group Type
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTypeRequest $post_api_v1_groups_set_type_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetTypeAsync($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetType'][0])
    {
        return $this->postApiV1GroupsSetTypeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsSetTypeAsyncWithHttpInfo
     *
     * Set Group Type
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTypeRequest $post_api_v1_groups_set_type_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsSetTypeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetType'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetReadOnly200Response';
        $request = $this->postApiV1GroupsSetTypeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsSetType'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsSetTypeRequest $post_api_v1_groups_set_type_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsSetType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsSetTypeRequest($x_auth_token, $x_user_id, $post_api_v1_groups_set_type_request = null, string $contentType = self::contentTypes['postApiV1GroupsSetType'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsSetType'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsSetType'
            );
        }



        $resourcePath = '/api/v1/groups.setType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_set_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_set_type_request));
            } else {
                $httpBody = $post_api_v1_groups_set_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1GroupsUnarchive
     *
     * Unarchive Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsUnarchiveRequest $post_api_v1_groups_unarchive_request post_api_v1_groups_unarchive_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsUnarchive'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1GroupsUnarchive($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request = null, string $contentType = self::contentTypes['postApiV1GroupsUnarchive'][0])
    {
        list($response) = $this->postApiV1GroupsUnarchiveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1GroupsUnarchiveWithHttpInfo
     *
     * Unarchive Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsUnarchiveRequest $post_api_v1_groups_unarchive_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsUnarchive'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1GroupsUnarchiveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request = null, string $contentType = self::contentTypes['postApiV1GroupsUnarchive'][0])
    {
        $request = $this->postApiV1GroupsUnarchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1GroupsUnarchiveAsync
     *
     * Unarchive Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsUnarchiveRequest $post_api_v1_groups_unarchive_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsUnarchiveAsync($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request = null, string $contentType = self::contentTypes['postApiV1GroupsUnarchive'][0])
    {
        return $this->postApiV1GroupsUnarchiveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1GroupsUnarchiveAsyncWithHttpInfo
     *
     * Unarchive Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsUnarchiveRequest $post_api_v1_groups_unarchive_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1GroupsUnarchiveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request = null, string $contentType = self::contentTypes['postApiV1GroupsUnarchive'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1GroupsUnarchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1GroupsUnarchive'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsUnarchiveRequest $post_api_v1_groups_unarchive_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1GroupsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1GroupsUnarchiveRequest($x_auth_token, $x_user_id, $post_api_v1_groups_unarchive_request = null, string $contentType = self::contentTypes['postApiV1GroupsUnarchive'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1GroupsUnarchive'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1GroupsUnarchive'
            );
        }



        $resourcePath = '/api/v1/groups.unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_groups_unarchive_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_groups_unarchive_request));
            } else {
                $httpBody = $post_api_v1_groups_unarchive_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGroupsLeave
     *
     * Leave Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostGroupsLeaveRequest $post_groups_leave_request post_groups_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGroupsLeave'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postGroupsLeave($x_auth_token, $x_user_id, $post_groups_leave_request = null, string $contentType = self::contentTypes['postGroupsLeave'][0])
    {
        list($response) = $this->postGroupsLeaveWithHttpInfo($x_auth_token, $x_user_id, $post_groups_leave_request, $contentType);
        return $response;
    }

    /**
     * Operation postGroupsLeaveWithHttpInfo
     *
     * Leave Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostGroupsLeaveRequest $post_groups_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGroupsLeave'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\RoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response|\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGroupsLeaveWithHttpInfo($x_auth_token, $x_user_id, $post_groups_leave_request = null, string $contentType = self::contentTypes['postGroupsLeave'][0])
    {
        $request = $this->postGroupsLeaveRequest($x_auth_token, $x_user_id, $post_groups_leave_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postGroupsLeaveAsync
     *
     * Leave Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostGroupsLeaveRequest $post_groups_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGroupsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGroupsLeaveAsync($x_auth_token, $x_user_id, $post_groups_leave_request = null, string $contentType = self::contentTypes['postGroupsLeave'][0])
    {
        return $this->postGroupsLeaveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_groups_leave_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGroupsLeaveAsyncWithHttpInfo
     *
     * Leave Group
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostGroupsLeaveRequest $post_groups_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGroupsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGroupsLeaveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_groups_leave_request = null, string $contentType = self::contentTypes['postGroupsLeave'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\RoomsApi\Model\PostApiV1GroupsKick200Response';
        $request = $this->postGroupsLeaveRequest($x_auth_token, $x_user_id, $post_groups_leave_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGroupsLeave'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \WebMI\RocketChatApiClient\RoomsApi\Model\PostGroupsLeaveRequest $post_groups_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGroupsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGroupsLeaveRequest($x_auth_token, $x_user_id, $post_groups_leave_request = null, string $contentType = self::contentTypes['postGroupsLeave'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postGroupsLeave'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postGroupsLeave'
            );
        }



        $resourcePath = '/api/v1/groups.leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_groups_leave_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_groups_leave_request));
            } else {
                $httpBody = $post_groups_leave_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
