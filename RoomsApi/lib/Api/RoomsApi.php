<?php
/**
 * RoomsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rooms
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatRoomsApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RocketChatRoomsApi\ApiException;
use RocketChatRoomsApi\Configuration;
use RocketChatRoomsApi\HeaderSelector;
use RocketChatRoomsApi\ObjectSerializer;

/**
 * RoomsApi Class Doc Comment
 *
 * @category Class
 * @package  RocketChatRoomsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RoomsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getApiV1AuditRoomsMembers' => [
            'application/json',
        ],
        'getApiV1RoomsAdminRooms' => [
            'application/json',
        ],
        'getApiV1RoomsAdminRoomsGetRoom' => [
            'application/json',
        ],
        'getApiV1RoomsAutocompleteAdminRooms' => [
            'application/json',
        ],
        'getApiV1RoomsAutocompleteAvailableForTeams' => [
            'application/json',
        ],
        'getApiV1RoomsAutocompleteChannelAndPrivate' => [
            'application/json',
        ],
        'getApiV1RoomsCleanHistory' => [
            'application/json',
        ],
        'getApiV1RoomsDelete' => [
            'application/json',
        ],
        'getApiV1RoomsGet' => [
            'application/json',
        ],
        'getApiV1RoomsGetDiscussions' => [
            'application/json',
        ],
        'getApiV1RoomsImages' => [
            'application/json',
        ],
        'getApiV1RoomsInfo' => [
            'application/json',
        ],
        'getApiV1RoomsNameExists' => [
            'application/json',
        ],
        'getApiV1RoomsUploadRid' => [
            'multipart/form-data',
        ],
        'postApiV1RoomsAutocompleteChannelAndPrivate' => [
            'application/json',
        ],
        'postApiV1RoomsCreateDiscussion' => [
            'application/json',
        ],
        'postApiV1RoomsExport' => [
            'application/json',
        ],
        'postApiV1RoomsFavorite' => [
            'application/json',
        ],
        'postApiV1RoomsLeave' => [
            'application/json',
        ],
        'postApiV1RoomsMuteUser' => [
            'application/json',
        ],
        'postApiV1RoomsSaveNotification' => [
            'application/json',
        ],
        'postApiV1RoomsSaveRoomSettings' => [
            'application/json',
        ],
        'postApiV1RoomsUnmuteUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1AuditRoomsMembers
     *
     * Audit Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id Enter the room ID that you want to audit. (required)
     * @param  string $filter Filter the results using the text that you want to view. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AuditRoomsMembers'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response
     */
    public function getApiV1AuditRoomsMembers($x_auth_token, $x_user_id, $room_id, $filter = null, $count = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1AuditRoomsMembers'][0])
    {
        list($response) = $this->getApiV1AuditRoomsMembersWithHttpInfo($x_auth_token, $x_user_id, $room_id, $filter, $count, $offset, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1AuditRoomsMembersWithHttpInfo
     *
     * Audit Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id Enter the room ID that you want to audit. (required)
     * @param  string $filter Filter the results using the text that you want to view. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AuditRoomsMembers'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1AuditRoomsMembersWithHttpInfo($x_auth_token, $x_user_id, $room_id, $filter = null, $count = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1AuditRoomsMembers'][0])
    {
        $request = $this->getApiV1AuditRoomsMembersRequest($x_auth_token, $x_user_id, $room_id, $filter, $count, $offset, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1AuditRoomsMembersAsync
     *
     * Audit Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id Enter the room ID that you want to audit. (required)
     * @param  string $filter Filter the results using the text that you want to view. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AuditRoomsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1AuditRoomsMembersAsync($x_auth_token, $x_user_id, $room_id, $filter = null, $count = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1AuditRoomsMembers'][0])
    {
        return $this->getApiV1AuditRoomsMembersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $filter, $count, $offset, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1AuditRoomsMembersAsyncWithHttpInfo
     *
     * Audit Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id Enter the room ID that you want to audit. (required)
     * @param  string $filter Filter the results using the text that you want to view. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AuditRoomsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1AuditRoomsMembersAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $filter = null, $count = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1AuditRoomsMembers'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1AuditRoomsMembers200Response';
        $request = $this->getApiV1AuditRoomsMembersRequest($x_auth_token, $x_user_id, $room_id, $filter, $count, $offset, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1AuditRoomsMembers'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id Enter the room ID that you want to audit. (required)
     * @param  string $filter Filter the results using the text that you want to view. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AuditRoomsMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1AuditRoomsMembersRequest($x_auth_token, $x_user_id, $room_id, $filter = null, $count = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1AuditRoomsMembers'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1AuditRoomsMembers'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1AuditRoomsMembers'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling getApiV1AuditRoomsMembers'
            );
        }






        $resourcePath = '/api/v1/audit/rooms.members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsAdminRooms
     *
     * Get All Room Admins
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string[] $types The room types. The possible room types are:  - &#x60;d&#x60;: Direct messages  - &#x60;c&#x60;: Public channel  - &#x60;p&#x60;: Private channel  - &#x60;discussions&#x60;: Team or channel discussions  - &#x60;teams&#x60;: Workspace teams  - &#x60;l&#x60;: Livechat  - &#x60;v&#x60;: Omnichannel VoIP rooms (optional)
     * @param  string $filter The rooms name (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRooms'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsAdminRooms($x_auth_token, $x_user_id, $types = null, $filter = null, $count = null, $sort = null, $offset = null, string $contentType = self::contentTypes['getApiV1RoomsAdminRooms'][0])
    {
        list($response) = $this->getApiV1RoomsAdminRoomsWithHttpInfo($x_auth_token, $x_user_id, $types, $filter, $count, $sort, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsAdminRoomsWithHttpInfo
     *
     * Get All Room Admins
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string[] $types The room types. The possible room types are:  - &#x60;d&#x60;: Direct messages  - &#x60;c&#x60;: Public channel  - &#x60;p&#x60;: Private channel  - &#x60;discussions&#x60;: Team or channel discussions  - &#x60;teams&#x60;: Workspace teams  - &#x60;l&#x60;: Livechat  - &#x60;v&#x60;: Omnichannel VoIP rooms (optional)
     * @param  string $filter The rooms name (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRooms'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsAdminRoomsWithHttpInfo($x_auth_token, $x_user_id, $types = null, $filter = null, $count = null, $sort = null, $offset = null, string $contentType = self::contentTypes['getApiV1RoomsAdminRooms'][0])
    {
        $request = $this->getApiV1RoomsAdminRoomsRequest($x_auth_token, $x_user_id, $types, $filter, $count, $sort, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsAdminRoomsAsync
     *
     * Get All Room Admins
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string[] $types The room types. The possible room types are:  - &#x60;d&#x60;: Direct messages  - &#x60;c&#x60;: Public channel  - &#x60;p&#x60;: Private channel  - &#x60;discussions&#x60;: Team or channel discussions  - &#x60;teams&#x60;: Workspace teams  - &#x60;l&#x60;: Livechat  - &#x60;v&#x60;: Omnichannel VoIP rooms (optional)
     * @param  string $filter The rooms name (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAdminRoomsAsync($x_auth_token, $x_user_id, $types = null, $filter = null, $count = null, $sort = null, $offset = null, string $contentType = self::contentTypes['getApiV1RoomsAdminRooms'][0])
    {
        return $this->getApiV1RoomsAdminRoomsAsyncWithHttpInfo($x_auth_token, $x_user_id, $types, $filter, $count, $sort, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsAdminRoomsAsyncWithHttpInfo
     *
     * Get All Room Admins
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string[] $types The room types. The possible room types are:  - &#x60;d&#x60;: Direct messages  - &#x60;c&#x60;: Public channel  - &#x60;p&#x60;: Private channel  - &#x60;discussions&#x60;: Team or channel discussions  - &#x60;teams&#x60;: Workspace teams  - &#x60;l&#x60;: Livechat  - &#x60;v&#x60;: Omnichannel VoIP rooms (optional)
     * @param  string $filter The rooms name (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAdminRoomsAsyncWithHttpInfo($x_auth_token, $x_user_id, $types = null, $filter = null, $count = null, $sort = null, $offset = null, string $contentType = self::contentTypes['getApiV1RoomsAdminRooms'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRooms200Response';
        $request = $this->getApiV1RoomsAdminRoomsRequest($x_auth_token, $x_user_id, $types, $filter, $count, $sort, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsAdminRooms'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string[] $types The room types. The possible room types are:  - &#x60;d&#x60;: Direct messages  - &#x60;c&#x60;: Public channel  - &#x60;p&#x60;: Private channel  - &#x60;discussions&#x60;: Team or channel discussions  - &#x60;teams&#x60;: Workspace teams  - &#x60;l&#x60;: Livechat  - &#x60;v&#x60;: Omnichannel VoIP rooms (optional)
     * @param  string $filter The rooms name (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsAdminRoomsRequest($x_auth_token, $x_user_id, $types = null, $filter = null, $count = null, $sort = null, $offset = null, string $contentType = self::contentTypes['getApiV1RoomsAdminRooms'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsAdminRooms'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsAdminRooms'
            );
        }







        $resourcePath = '/api/v1/rooms.adminRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsAdminRoomsGetRoom
     *
     * Get Admin of Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response
     */
    public function getApiV1RoomsAdminRoomsGetRoom($x_auth_token, $x_user_id, $rid, string $contentType = self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'][0])
    {
        list($response) = $this->getApiV1RoomsAdminRoomsGetRoomWithHttpInfo($x_auth_token, $x_user_id, $rid, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsAdminRoomsGetRoomWithHttpInfo
     *
     * Get Admin of Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsAdminRoomsGetRoomWithHttpInfo($x_auth_token, $x_user_id, $rid, string $contentType = self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'][0])
    {
        $request = $this->getApiV1RoomsAdminRoomsGetRoomRequest($x_auth_token, $x_user_id, $rid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsAdminRoomsGetRoomAsync
     *
     * Get Admin of Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAdminRoomsGetRoomAsync($x_auth_token, $x_user_id, $rid, string $contentType = self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'][0])
    {
        return $this->getApiV1RoomsAdminRoomsGetRoomAsyncWithHttpInfo($x_auth_token, $x_user_id, $rid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsAdminRoomsGetRoomAsyncWithHttpInfo
     *
     * Get Admin of Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAdminRoomsGetRoomAsyncWithHttpInfo($x_auth_token, $x_user_id, $rid, string $contentType = self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAdminRoomsGetRoom200Response';
        $request = $this->getApiV1RoomsAdminRoomsGetRoomRequest($x_auth_token, $x_user_id, $rid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsAdminRoomsGetRoom'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsAdminRoomsGetRoomRequest($x_auth_token, $x_user_id, $rid, string $contentType = self::contentTypes['getApiV1RoomsAdminRoomsGetRoom'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsAdminRoomsGetRoom'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsAdminRoomsGetRoom'
            );
        }

        // verify the required parameter 'rid' is set
        if ($rid === null || (is_array($rid) && count($rid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rid when calling getApiV1RoomsAdminRoomsGetRoom'
            );
        }


        $resourcePath = '/api/v1/rooms.adminRooms.getRoom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rid,
            'rid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsAutocompleteAdminRooms
     *
     * Admin Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It applies to room name and display name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsAutocompleteAdminRooms($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'][0])
    {
        list($response) = $this->getApiV1RoomsAutocompleteAdminRoomsWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsAutocompleteAdminRoomsWithHttpInfo
     *
     * Admin Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It applies to room name and display name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsAutocompleteAdminRoomsWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'][0])
    {
        $request = $this->getApiV1RoomsAutocompleteAdminRoomsRequest($x_auth_token, $x_user_id, $selector, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsAutocompleteAdminRoomsAsync
     *
     * Admin Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It applies to room name and display name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteAdminRoomsAsync($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'][0])
    {
        return $this->getApiV1RoomsAutocompleteAdminRoomsAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsAutocompleteAdminRoomsAsyncWithHttpInfo
     *
     * Admin Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It applies to room name and display name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteAdminRoomsAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
        $request = $this->getApiV1RoomsAutocompleteAdminRoomsRequest($x_auth_token, $x_user_id, $selector, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsAutocompleteAdminRooms'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It applies to room name and display name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsAutocompleteAdminRoomsRequest($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAdminRooms'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsAutocompleteAdminRooms'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsAutocompleteAdminRooms'
            );
        }

        // verify the required parameter 'selector' is set
        if ($selector === null || (is_array($selector) && count($selector) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selector when calling getApiV1RoomsAutocompleteAdminRooms'
            );
        }


        $resourcePath = '/api/v1/rooms.autocomplete.adminRooms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $selector,
            'selector', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsAutocompleteAvailableForTeams
     *
     * Autocomplete Room Name for Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $name The name of the room (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsAutocompleteAvailableForTeams($x_auth_token, $x_user_id, $name, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'][0])
    {
        list($response) = $this->getApiV1RoomsAutocompleteAvailableForTeamsWithHttpInfo($x_auth_token, $x_user_id, $name, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsAutocompleteAvailableForTeamsWithHttpInfo
     *
     * Autocomplete Room Name for Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $name The name of the room (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsAutocompleteAvailableForTeamsWithHttpInfo($x_auth_token, $x_user_id, $name, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'][0])
    {
        $request = $this->getApiV1RoomsAutocompleteAvailableForTeamsRequest($x_auth_token, $x_user_id, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsAutocompleteAvailableForTeamsAsync
     *
     * Autocomplete Room Name for Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $name The name of the room (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteAvailableForTeamsAsync($x_auth_token, $x_user_id, $name, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'][0])
    {
        return $this->getApiV1RoomsAutocompleteAvailableForTeamsAsyncWithHttpInfo($x_auth_token, $x_user_id, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsAutocompleteAvailableForTeamsAsyncWithHttpInfo
     *
     * Autocomplete Room Name for Team
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $name The name of the room (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteAvailableForTeamsAsyncWithHttpInfo($x_auth_token, $x_user_id, $name, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
        $request = $this->getApiV1RoomsAutocompleteAvailableForTeamsRequest($x_auth_token, $x_user_id, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsAutocompleteAvailableForTeams'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $name The name of the room (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsAutocompleteAvailableForTeamsRequest($x_auth_token, $x_user_id, $name, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteAvailableForTeams'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsAutocompleteAvailableForTeams'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsAutocompleteAvailableForTeams'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getApiV1RoomsAutocompleteAvailableForTeams'
            );
        }


        $resourcePath = '/api/v1/rooms.autocomplete.availableForTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsAutocompleteChannelAndPrivate
     *
     * Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It only applies to room name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsAutocompleteChannelAndPrivate($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        list($response) = $this->getApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo
     *
     * Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It only applies to room name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        $request = $this->getApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $selector, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsAutocompleteChannelAndPrivateAsync
     *
     * Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It only applies to room name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteChannelAndPrivateAsync($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        return $this->getApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo
     *
     * Autocomplete Room Name for Private and Public Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It only applies to room name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsAutocompleteAvailableForTeams200Response';
        $request = $this->getApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $selector, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsAutocompleteChannelAndPrivate'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $selector The term to be completed. It only applies to room name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsAutocompleteChannelAndPrivate'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsAutocompleteChannelAndPrivate'
            );
        }

        // verify the required parameter 'selector' is set
        if ($selector === null || (is_array($selector) && count($selector) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selector when calling getApiV1RoomsAutocompleteChannelAndPrivate'
            );
        }


        $resourcePath = '/api/v1/rooms.autocomplete.channelAndPrivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $selector,
            'selector', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsCleanHistory
     *
     * Clear Room History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsCleanHistoryRequest $get_api_v1_rooms_clean_history_request get_api_v1_rooms_clean_history_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsCleanHistory'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsCleanHistory($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request = null, string $contentType = self::contentTypes['getApiV1RoomsCleanHistory'][0])
    {
        list($response) = $this->getApiV1RoomsCleanHistoryWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsCleanHistoryWithHttpInfo
     *
     * Clear Room History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsCleanHistoryRequest $get_api_v1_rooms_clean_history_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsCleanHistory'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsCleanHistoryWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request = null, string $contentType = self::contentTypes['getApiV1RoomsCleanHistory'][0])
    {
        $request = $this->getApiV1RoomsCleanHistoryRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsCleanHistoryAsync
     *
     * Clear Room History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsCleanHistoryRequest $get_api_v1_rooms_clean_history_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsCleanHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsCleanHistoryAsync($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request = null, string $contentType = self::contentTypes['getApiV1RoomsCleanHistory'][0])
    {
        return $this->getApiV1RoomsCleanHistoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsCleanHistoryAsyncWithHttpInfo
     *
     * Clear Room History
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsCleanHistoryRequest $get_api_v1_rooms_clean_history_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsCleanHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsCleanHistoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request = null, string $contentType = self::contentTypes['getApiV1RoomsCleanHistory'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->getApiV1RoomsCleanHistoryRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsCleanHistory'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsCleanHistoryRequest $get_api_v1_rooms_clean_history_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsCleanHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsCleanHistoryRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_clean_history_request = null, string $contentType = self::contentTypes['getApiV1RoomsCleanHistory'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsCleanHistory'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsCleanHistory'
            );
        }



        $resourcePath = '/api/v1/rooms.cleanHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_api_v1_rooms_clean_history_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_api_v1_rooms_clean_history_request));
            } else {
                $httpBody = $get_api_v1_rooms_clean_history_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsDelete
     *
     * Delete Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsDeleteRequest $get_api_v1_rooms_delete_request get_api_v1_rooms_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsDelete'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsDelete($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request = null, string $contentType = self::contentTypes['getApiV1RoomsDelete'][0])
    {
        list($response) = $this->getApiV1RoomsDeleteWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsDeleteWithHttpInfo
     *
     * Delete Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsDeleteRequest $get_api_v1_rooms_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsDelete'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsDeleteWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request = null, string $contentType = self::contentTypes['getApiV1RoomsDelete'][0])
    {
        $request = $this->getApiV1RoomsDeleteRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsDeleteAsync
     *
     * Delete Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsDeleteRequest $get_api_v1_rooms_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsDeleteAsync($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request = null, string $contentType = self::contentTypes['getApiV1RoomsDelete'][0])
    {
        return $this->getApiV1RoomsDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsDeleteAsyncWithHttpInfo
     *
     * Delete Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsDeleteRequest $get_api_v1_rooms_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request = null, string $contentType = self::contentTypes['getApiV1RoomsDelete'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->getApiV1RoomsDeleteRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsDelete'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\GetApiV1RoomsDeleteRequest $get_api_v1_rooms_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsDeleteRequest($x_auth_token, $x_user_id, $get_api_v1_rooms_delete_request = null, string $contentType = self::contentTypes['getApiV1RoomsDelete'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsDelete'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsDelete'
            );
        }



        $resourcePath = '/api/v1/rooms.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_api_v1_rooms_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_api_v1_rooms_delete_request));
            } else {
                $httpBody = $get_api_v1_rooms_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsGet
     *
     * Get Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $updated_since A date as an ISO string. When you provide the &#x60;updatedSince&#x60; query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGet'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsGet($x_auth_token, $x_user_id, $updated_since = null, string $contentType = self::contentTypes['getApiV1RoomsGet'][0])
    {
        list($response) = $this->getApiV1RoomsGetWithHttpInfo($x_auth_token, $x_user_id, $updated_since, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsGetWithHttpInfo
     *
     * Get Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $updated_since A date as an ISO string. When you provide the &#x60;updatedSince&#x60; query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGet'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsGetWithHttpInfo($x_auth_token, $x_user_id, $updated_since = null, string $contentType = self::contentTypes['getApiV1RoomsGet'][0])
    {
        $request = $this->getApiV1RoomsGetRequest($x_auth_token, $x_user_id, $updated_since, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsGetAsync
     *
     * Get Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $updated_since A date as an ISO string. When you provide the &#x60;updatedSince&#x60; query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsGetAsync($x_auth_token, $x_user_id, $updated_since = null, string $contentType = self::contentTypes['getApiV1RoomsGet'][0])
    {
        return $this->getApiV1RoomsGetAsyncWithHttpInfo($x_auth_token, $x_user_id, $updated_since, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsGetAsyncWithHttpInfo
     *
     * Get Rooms
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $updated_since A date as an ISO string. When you provide the &#x60;updatedSince&#x60; query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsGetAsyncWithHttpInfo($x_auth_token, $x_user_id, $updated_since = null, string $contentType = self::contentTypes['getApiV1RoomsGet'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsGet200Response';
        $request = $this->getApiV1RoomsGetRequest($x_auth_token, $x_user_id, $updated_since, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsGet'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $updated_since A date as an ISO string. When you provide the &#x60;updatedSince&#x60; query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsGetRequest($x_auth_token, $x_user_id, $updated_since = null, string $contentType = self::contentTypes['getApiV1RoomsGet'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsGet'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsGet'
            );
        }



        $resourcePath = '/api/v1/rooms.get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_since,
            'updatedSince', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsGetDiscussions
     *
     * Get Room Discussions
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGetDiscussions'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsGetDiscussions($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $query = null, $count = null, $fields = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1RoomsGetDiscussions'][0])
    {
        list($response) = $this->getApiV1RoomsGetDiscussionsWithHttpInfo($x_auth_token, $x_user_id, $room_name, $room_id, $query, $count, $fields, $offset, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsGetDiscussionsWithHttpInfo
     *
     * Get Room Discussions
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGetDiscussions'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsGetDiscussionsWithHttpInfo($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $query = null, $count = null, $fields = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1RoomsGetDiscussions'][0])
    {
        $request = $this->getApiV1RoomsGetDiscussionsRequest($x_auth_token, $x_user_id, $room_name, $room_id, $query, $count, $fields, $offset, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsGetDiscussionsAsync
     *
     * Get Room Discussions
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGetDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsGetDiscussionsAsync($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $query = null, $count = null, $fields = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1RoomsGetDiscussions'][0])
    {
        return $this->getApiV1RoomsGetDiscussionsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name, $room_id, $query, $count, $fields, $offset, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsGetDiscussionsAsyncWithHttpInfo
     *
     * Get Room Discussions
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGetDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsGetDiscussionsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $query = null, $count = null, $fields = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1RoomsGetDiscussions'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsGetDiscussions200Response';
        $request = $this->getApiV1RoomsGetDiscussionsRequest($x_auth_token, $x_user_id, $room_name, $room_id, $query, $count, $fields, $offset, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsGetDiscussions'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  mixed $query This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsGetDiscussions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsGetDiscussionsRequest($x_auth_token, $x_user_id, $room_name = null, $room_id = null, $query = null, $count = null, $fields = null, $offset = null, $sort = null, string $contentType = self::contentTypes['getApiV1RoomsGetDiscussions'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsGetDiscussions'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsGetDiscussions'
            );
        }









        $resourcePath = '/api/v1/rooms.getDiscussions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsImages
     *
     * Get Room Images
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room ID. (required)
     * @param  string $starting_from_id Filter images using the file ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsImages'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsImages($x_auth_token, $x_user_id, $room_id, $starting_from_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RoomsImages'][0])
    {
        list($response) = $this->getApiV1RoomsImagesWithHttpInfo($x_auth_token, $x_user_id, $room_id, $starting_from_id, $offset, $count, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsImagesWithHttpInfo
     *
     * Get Room Images
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room ID. (required)
     * @param  string $starting_from_id Filter images using the file ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsImages'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsImagesWithHttpInfo($x_auth_token, $x_user_id, $room_id, $starting_from_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RoomsImages'][0])
    {
        $request = $this->getApiV1RoomsImagesRequest($x_auth_token, $x_user_id, $room_id, $starting_from_id, $offset, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsImagesAsync
     *
     * Get Room Images
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room ID. (required)
     * @param  string $starting_from_id Filter images using the file ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsImagesAsync($x_auth_token, $x_user_id, $room_id, $starting_from_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RoomsImages'][0])
    {
        return $this->getApiV1RoomsImagesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $starting_from_id, $offset, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsImagesAsyncWithHttpInfo
     *
     * Get Room Images
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room ID. (required)
     * @param  string $starting_from_id Filter images using the file ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsImagesAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_id, $starting_from_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RoomsImages'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsImages200Response';
        $request = $this->getApiV1RoomsImagesRequest($x_auth_token, $x_user_id, $room_id, $starting_from_id, $offset, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsImages'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_id The room ID. (required)
     * @param  string $starting_from_id Filter images using the file ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsImagesRequest($x_auth_token, $x_user_id, $room_id, $starting_from_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RoomsImages'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsImages'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsImages'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling getApiV1RoomsImages'
            );
        }





        $resourcePath = '/api/v1/rooms.images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_from_id,
            'startingFromId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsInfo
     *
     * Get Room Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsInfo'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, $fields = null, string $contentType = self::contentTypes['getApiV1RoomsInfo'][0])
    {
        list($response) = $this->getApiV1RoomsInfoWithHttpInfo($x_user_id, $x_auth_token, $room_id, $room_name, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsInfoWithHttpInfo
     *
     * Get Room Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsInfo'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsInfoWithHttpInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, $fields = null, string $contentType = self::contentTypes['getApiV1RoomsInfo'][0])
    {
        $request = $this->getApiV1RoomsInfoRequest($x_user_id, $x_auth_token, $room_id, $room_name, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsInfoAsync
     *
     * Get Room Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsInfoAsync($x_user_id, $x_auth_token, $room_id = null, $room_name = null, $fields = null, string $contentType = self::contentTypes['getApiV1RoomsInfo'][0])
    {
        return $this->getApiV1RoomsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $room_id, $room_name, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsInfoAsyncWithHttpInfo
     *
     * Get Room Information
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $room_id = null, $room_name = null, $fields = null, string $contentType = self::contentTypes['getApiV1RoomsInfo'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsInfo200Response';
        $request = $this->getApiV1RoomsInfoRequest($x_user_id, $x_auth_token, $room_id, $room_name, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsInfo'
     *
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $room_id The room id. It is required if the &#x60;roomName&#x60; is not provided. (optional)
     * @param  string $room_name The room name.  It is required if the &#x60;roomId&#x60; is not provided. (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsInfoRequest($x_user_id, $x_auth_token, $room_id = null, $room_name = null, $fields = null, string $contentType = self::contentTypes['getApiV1RoomsInfo'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsInfo'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsInfo'
            );
        }





        $resourcePath = '/api/v1/rooms.info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsNameExists
     *
     * Check if Room Name Exists
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name Enter the room name that you want to check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsNameExists'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsNameExists($x_auth_token, $x_user_id, $room_name, string $contentType = self::contentTypes['getApiV1RoomsNameExists'][0])
    {
        list($response) = $this->getApiV1RoomsNameExistsWithHttpInfo($x_auth_token, $x_user_id, $room_name, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsNameExistsWithHttpInfo
     *
     * Check if Room Name Exists
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name Enter the room name that you want to check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsNameExists'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsNameExistsWithHttpInfo($x_auth_token, $x_user_id, $room_name, string $contentType = self::contentTypes['getApiV1RoomsNameExists'][0])
    {
        $request = $this->getApiV1RoomsNameExistsRequest($x_auth_token, $x_user_id, $room_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsNameExistsAsync
     *
     * Check if Room Name Exists
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name Enter the room name that you want to check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsNameExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsNameExistsAsync($x_auth_token, $x_user_id, $room_name, string $contentType = self::contentTypes['getApiV1RoomsNameExists'][0])
    {
        return $this->getApiV1RoomsNameExistsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsNameExistsAsyncWithHttpInfo
     *
     * Check if Room Name Exists
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name Enter the room name that you want to check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsNameExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsNameExistsAsyncWithHttpInfo($x_auth_token, $x_user_id, $room_name, string $contentType = self::contentTypes['getApiV1RoomsNameExists'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsNameExists200Response';
        $request = $this->getApiV1RoomsNameExistsRequest($x_auth_token, $x_user_id, $room_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsNameExists'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $room_name Enter the room name that you want to check. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsNameExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsNameExistsRequest($x_auth_token, $x_user_id, $room_name, string $contentType = self::contentTypes['getApiV1RoomsNameExists'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsNameExists'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsNameExists'
            );
        }

        // verify the required parameter 'room_name' is set
        if ($room_name === null || (is_array($room_name) && count($room_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_name when calling getApiV1RoomsNameExists'
            );
        }


        $resourcePath = '/api/v1/rooms.nameExists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_name,
            'roomName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RoomsUploadRid
     *
     * Upload File to a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID to which you want to upload the file. (required)
     * @param  \SplFileObject $file The file to upload (required)
     * @param  string $msg A message text to be sent with the file. (optional)
     * @param  string $description A description of the file. (optional)
     * @param  string $tmid The thread message ID (if you want to upload a file to a thread). (optional)
     * @param  object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the &lt;a href&#x3D;\\\&quot;https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Message&lt;/a&gt; for further information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsUploadRid'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function getApiV1RoomsUploadRid($x_auth_token, $x_user_id, $rid, $file, $msg = null, $description = null, $tmid = null, $custom_fields = null, string $contentType = self::contentTypes['getApiV1RoomsUploadRid'][0])
    {
        list($response) = $this->getApiV1RoomsUploadRidWithHttpInfo($x_auth_token, $x_user_id, $rid, $file, $msg, $description, $tmid, $custom_fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RoomsUploadRidWithHttpInfo
     *
     * Upload File to a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID to which you want to upload the file. (required)
     * @param  \SplFileObject $file The file to upload (required)
     * @param  string $msg A message text to be sent with the file. (optional)
     * @param  string $description A description of the file. (optional)
     * @param  string $tmid The thread message ID (if you want to upload a file to a thread). (optional)
     * @param  object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the &lt;a href&#x3D;\\\&quot;https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Message&lt;/a&gt; for further information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsUploadRid'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RoomsUploadRidWithHttpInfo($x_auth_token, $x_user_id, $rid, $file, $msg = null, $description = null, $tmid = null, $custom_fields = null, string $contentType = self::contentTypes['getApiV1RoomsUploadRid'][0])
    {
        $request = $this->getApiV1RoomsUploadRidRequest($x_auth_token, $x_user_id, $rid, $file, $msg, $description, $tmid, $custom_fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RoomsUploadRidAsync
     *
     * Upload File to a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID to which you want to upload the file. (required)
     * @param  \SplFileObject $file The file to upload (required)
     * @param  string $msg A message text to be sent with the file. (optional)
     * @param  string $description A description of the file. (optional)
     * @param  string $tmid The thread message ID (if you want to upload a file to a thread). (optional)
     * @param  object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the &lt;a href&#x3D;\\\&quot;https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Message&lt;/a&gt; for further information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsUploadRid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsUploadRidAsync($x_auth_token, $x_user_id, $rid, $file, $msg = null, $description = null, $tmid = null, $custom_fields = null, string $contentType = self::contentTypes['getApiV1RoomsUploadRid'][0])
    {
        return $this->getApiV1RoomsUploadRidAsyncWithHttpInfo($x_auth_token, $x_user_id, $rid, $file, $msg, $description, $tmid, $custom_fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RoomsUploadRidAsyncWithHttpInfo
     *
     * Upload File to a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID to which you want to upload the file. (required)
     * @param  \SplFileObject $file The file to upload (required)
     * @param  string $msg A message text to be sent with the file. (optional)
     * @param  string $description A description of the file. (optional)
     * @param  string $tmid The thread message ID (if you want to upload a file to a thread). (optional)
     * @param  object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the &lt;a href&#x3D;\\\&quot;https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Message&lt;/a&gt; for further information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsUploadRid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RoomsUploadRidAsyncWithHttpInfo($x_auth_token, $x_user_id, $rid, $file, $msg = null, $description = null, $tmid = null, $custom_fields = null, string $contentType = self::contentTypes['getApiV1RoomsUploadRid'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\GetApiV1RoomsUploadRid200Response';
        $request = $this->getApiV1RoomsUploadRidRequest($x_auth_token, $x_user_id, $rid, $file, $msg, $description, $tmid, $custom_fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RoomsUploadRid'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  string $rid The room ID to which you want to upload the file. (required)
     * @param  \SplFileObject $file The file to upload (required)
     * @param  string $msg A message text to be sent with the file. (optional)
     * @param  string $description A description of the file. (optional)
     * @param  string $tmid The thread message ID (if you want to upload a file to a thread). (optional)
     * @param  object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the &lt;a href&#x3D;\\\&quot;https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;Message&lt;/a&gt; for further information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RoomsUploadRid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RoomsUploadRidRequest($x_auth_token, $x_user_id, $rid, $file, $msg = null, $description = null, $tmid = null, $custom_fields = null, string $contentType = self::contentTypes['getApiV1RoomsUploadRid'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RoomsUploadRid'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RoomsUploadRid'
            );
        }

        // verify the required parameter 'rid' is set
        if ($rid === null || (is_array($rid) && count($rid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rid when calling getApiV1RoomsUploadRid'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling getApiV1RoomsUploadRid'
            );
        }






        $resourcePath = '/api/v1/rooms.upload/{rid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }

        // path params
        if ($rid !== null) {
            $resourcePath = str_replace(
                '{' . 'rid' . '}',
                ObjectSerializer::toPathValue($rid),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($msg !== null) {
            $formParams['msg'] = ObjectSerializer::toFormValue($msg);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($tmid !== null) {
            $formParams['tmid'] = ObjectSerializer::toFormValue($tmid);
        }
        // form params
        if ($custom_fields !== null) {
            $formParams['customFields'] = ObjectSerializer::toFormValue($custom_fields);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsAutocompleteChannelAndPrivate
     *
     * Change Room Archive State
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsAutocompleteChannelAndPrivateRequest $post_api_v1_rooms_autocomplete_channel_and_private_request post_api_v1_rooms_autocomplete_channel_and_private_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsAutocompleteChannelAndPrivate($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request = null, string $contentType = self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        list($response) = $this->postApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo
     *
     * Change Room Archive State
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsAutocompleteChannelAndPrivateRequest $post_api_v1_rooms_autocomplete_channel_and_private_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsAutocompleteChannelAndPrivateWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request = null, string $contentType = self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        $request = $this->postApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddOwner400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsAutocompleteChannelAndPrivateAsync
     *
     * Change Room Archive State
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsAutocompleteChannelAndPrivateRequest $post_api_v1_rooms_autocomplete_channel_and_private_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsAutocompleteChannelAndPrivateAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request = null, string $contentType = self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        return $this->postApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo
     *
     * Change Room Archive State
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsAutocompleteChannelAndPrivateRequest $post_api_v1_rooms_autocomplete_channel_and_private_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsAutocompleteChannelAndPrivateAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request = null, string $contentType = self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsAutocompleteChannelAndPrivate'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsAutocompleteChannelAndPrivateRequest $post_api_v1_rooms_autocomplete_channel_and_private_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsAutocompleteChannelAndPrivateRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_autocomplete_channel_and_private_request = null, string $contentType = self::contentTypes['postApiV1RoomsAutocompleteChannelAndPrivate'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsAutocompleteChannelAndPrivate'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsAutocompleteChannelAndPrivate'
            );
        }



        $resourcePath = '/api/v1/rooms.changeArchivationState';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_autocomplete_channel_and_private_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_autocomplete_channel_and_private_request));
            } else {
                $httpBody = $post_api_v1_rooms_autocomplete_channel_and_private_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsCreateDiscussion
     *
     * Create Discussion
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussionRequest $post_api_v1_rooms_create_discussion_request post_api_v1_rooms_create_discussion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsCreateDiscussion'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsCreateDiscussion($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request = null, string $contentType = self::contentTypes['postApiV1RoomsCreateDiscussion'][0])
    {
        list($response) = $this->postApiV1RoomsCreateDiscussionWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsCreateDiscussionWithHttpInfo
     *
     * Create Discussion
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussionRequest $post_api_v1_rooms_create_discussion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsCreateDiscussion'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsCreateDiscussionWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request = null, string $contentType = self::contentTypes['postApiV1RoomsCreateDiscussion'][0])
    {
        $request = $this->postApiV1RoomsCreateDiscussionRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsCreateDiscussionAsync
     *
     * Create Discussion
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussionRequest $post_api_v1_rooms_create_discussion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsCreateDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsCreateDiscussionAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request = null, string $contentType = self::contentTypes['postApiV1RoomsCreateDiscussion'][0])
    {
        return $this->postApiV1RoomsCreateDiscussionAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsCreateDiscussionAsyncWithHttpInfo
     *
     * Create Discussion
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussionRequest $post_api_v1_rooms_create_discussion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsCreateDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsCreateDiscussionAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request = null, string $contentType = self::contentTypes['postApiV1RoomsCreateDiscussion'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussion200Response';
        $request = $this->postApiV1RoomsCreateDiscussionRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsCreateDiscussion'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsCreateDiscussionRequest $post_api_v1_rooms_create_discussion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsCreateDiscussion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsCreateDiscussionRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_create_discussion_request = null, string $contentType = self::contentTypes['postApiV1RoomsCreateDiscussion'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsCreateDiscussion'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsCreateDiscussion'
            );
        }



        $resourcePath = '/api/v1/rooms.createDiscussion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_create_discussion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_create_discussion_request));
            } else {
                $httpBody = $post_api_v1_rooms_create_discussion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsExport
     *
     * Export Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsExportRequest $post_api_v1_rooms_export_request post_api_v1_rooms_export_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsExport'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response
     */
    public function postApiV1RoomsExport($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request = null, string $contentType = self::contentTypes['postApiV1RoomsExport'][0])
    {
        list($response) = $this->postApiV1RoomsExportWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsExportWithHttpInfo
     *
     * Export Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsExportRequest $post_api_v1_rooms_export_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsExport'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsExportWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request = null, string $contentType = self::contentTypes['postApiV1RoomsExport'][0])
    {
        $request = $this->postApiV1RoomsExportRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsClose400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsExportAsync
     *
     * Export Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsExportRequest $post_api_v1_rooms_export_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsExportAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request = null, string $contentType = self::contentTypes['postApiV1RoomsExport'][0])
    {
        return $this->postApiV1RoomsExportAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsExportAsyncWithHttpInfo
     *
     * Export Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsExportRequest $post_api_v1_rooms_export_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsExportAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request = null, string $contentType = self::contentTypes['postApiV1RoomsExport'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsExportRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsExport'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsExportRequest $post_api_v1_rooms_export_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsExportRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_export_request = null, string $contentType = self::contentTypes['postApiV1RoomsExport'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsExport'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsExport'
            );
        }



        $resourcePath = '/api/v1/rooms.export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_export_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_export_request));
            } else {
                $httpBody = $post_api_v1_rooms_export_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsFavorite
     *
     * Favorite/Unfavourite a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsFavoriteRequest $post_api_v1_rooms_favorite_request post_api_v1_rooms_favorite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsFavorite'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsFavorite($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request = null, string $contentType = self::contentTypes['postApiV1RoomsFavorite'][0])
    {
        list($response) = $this->postApiV1RoomsFavoriteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsFavoriteWithHttpInfo
     *
     * Favorite/Unfavourite a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsFavoriteRequest $post_api_v1_rooms_favorite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsFavorite'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsFavoriteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request = null, string $contentType = self::contentTypes['postApiV1RoomsFavorite'][0])
    {
        $request = $this->postApiV1RoomsFavoriteRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsFavoriteAsync
     *
     * Favorite/Unfavourite a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsFavoriteRequest $post_api_v1_rooms_favorite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsFavorite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsFavoriteAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request = null, string $contentType = self::contentTypes['postApiV1RoomsFavorite'][0])
    {
        return $this->postApiV1RoomsFavoriteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsFavoriteAsyncWithHttpInfo
     *
     * Favorite/Unfavourite a Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsFavoriteRequest $post_api_v1_rooms_favorite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsFavorite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsFavoriteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request = null, string $contentType = self::contentTypes['postApiV1RoomsFavorite'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsFavoriteRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsFavorite'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsFavoriteRequest $post_api_v1_rooms_favorite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsFavorite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsFavoriteRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_favorite_request = null, string $contentType = self::contentTypes['postApiV1RoomsFavorite'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsFavorite'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsFavorite'
            );
        }



        $resourcePath = '/api/v1/rooms.favorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_favorite_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_favorite_request));
            } else {
                $httpBody = $post_api_v1_rooms_favorite_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsLeave
     *
     * Leave Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsLeaveRequest $post_api_v1_rooms_leave_request post_api_v1_rooms_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsLeave'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsLeave($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request = null, string $contentType = self::contentTypes['postApiV1RoomsLeave'][0])
    {
        list($response) = $this->postApiV1RoomsLeaveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsLeaveWithHttpInfo
     *
     * Leave Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsLeaveRequest $post_api_v1_rooms_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsLeave'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsLeaveWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request = null, string $contentType = self::contentTypes['postApiV1RoomsLeave'][0])
    {
        $request = $this->postApiV1RoomsLeaveRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsLeaveAsync
     *
     * Leave Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsLeaveRequest $post_api_v1_rooms_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsLeaveAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request = null, string $contentType = self::contentTypes['postApiV1RoomsLeave'][0])
    {
        return $this->postApiV1RoomsLeaveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsLeaveAsyncWithHttpInfo
     *
     * Leave Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsLeaveRequest $post_api_v1_rooms_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsLeaveAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request = null, string $contentType = self::contentTypes['postApiV1RoomsLeave'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsLeaveRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsLeave'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsLeaveRequest $post_api_v1_rooms_leave_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsLeaveRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_leave_request = null, string $contentType = self::contentTypes['postApiV1RoomsLeave'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsLeave'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsLeave'
            );
        }



        $resourcePath = '/api/v1/rooms.leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_leave_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_leave_request));
            } else {
                $httpBody = $post_api_v1_rooms_leave_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsMuteUser
     *
     * Mute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsMuteUserRequest $post_api_v1_rooms_mute_user_request post_api_v1_rooms_mute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsMuteUser'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsMuteUser($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsMuteUser'][0])
    {
        list($response) = $this->postApiV1RoomsMuteUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsMuteUserWithHttpInfo
     *
     * Mute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsMuteUserRequest $post_api_v1_rooms_mute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsMuteUser'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsMuteUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsMuteUser'][0])
    {
        $request = $this->postApiV1RoomsMuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsMuteUserAsync
     *
     * Mute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsMuteUserRequest $post_api_v1_rooms_mute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsMuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsMuteUserAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsMuteUser'][0])
    {
        return $this->postApiV1RoomsMuteUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsMuteUserAsyncWithHttpInfo
     *
     * Mute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsMuteUserRequest $post_api_v1_rooms_mute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsMuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsMuteUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsMuteUser'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsMuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsMuteUser'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsMuteUserRequest $post_api_v1_rooms_mute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsMuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsMuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_mute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsMuteUser'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsMuteUser'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsMuteUser'
            );
        }



        $resourcePath = '/api/v1/rooms.muteUser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_mute_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_mute_user_request));
            } else {
                $httpBody = $post_api_v1_rooms_mute_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsSaveNotification
     *
     * Set Room Notifications
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveNotificationRequest $post_api_v1_rooms_save_notification_request post_api_v1_rooms_save_notification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveNotification'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsSaveNotification($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveNotification'][0])
    {
        list($response) = $this->postApiV1RoomsSaveNotificationWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsSaveNotificationWithHttpInfo
     *
     * Set Room Notifications
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveNotificationRequest $post_api_v1_rooms_save_notification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveNotification'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsSaveNotificationWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveNotification'][0])
    {
        $request = $this->postApiV1RoomsSaveNotificationRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsSaveNotificationAsync
     *
     * Set Room Notifications
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveNotificationRequest $post_api_v1_rooms_save_notification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsSaveNotificationAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveNotification'][0])
    {
        return $this->postApiV1RoomsSaveNotificationAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsSaveNotificationAsyncWithHttpInfo
     *
     * Set Room Notifications
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveNotificationRequest $post_api_v1_rooms_save_notification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsSaveNotificationAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveNotification'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsSaveNotificationRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsSaveNotification'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveNotificationRequest $post_api_v1_rooms_save_notification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsSaveNotificationRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_notification_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveNotification'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsSaveNotification'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsSaveNotification'
            );
        }



        $resourcePath = '/api/v1/rooms.saveNotification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_save_notification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_save_notification_request));
            } else {
                $httpBody = $post_api_v1_rooms_save_notification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsSaveRoomSettings
     *
     * Save Room Settings
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequest $post_api_v1_rooms_save_room_settings_request post_api_v1_rooms_save_room_settings_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveRoomSettings'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsSaveRoomSettings($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveRoomSettings'][0])
    {
        list($response) = $this->postApiV1RoomsSaveRoomSettingsWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsSaveRoomSettingsWithHttpInfo
     *
     * Save Room Settings
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequest $post_api_v1_rooms_save_room_settings_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveRoomSettings'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsSaveRoomSettingsWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveRoomSettings'][0])
    {
        $request = $this->postApiV1RoomsSaveRoomSettingsRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsSaveRoomSettingsAsync
     *
     * Save Room Settings
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequest $post_api_v1_rooms_save_room_settings_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveRoomSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsSaveRoomSettingsAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveRoomSettings'][0])
    {
        return $this->postApiV1RoomsSaveRoomSettingsAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsSaveRoomSettingsAsyncWithHttpInfo
     *
     * Save Room Settings
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequest $post_api_v1_rooms_save_room_settings_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveRoomSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsSaveRoomSettingsAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveRoomSettings'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettings200Response';
        $request = $this->postApiV1RoomsSaveRoomSettingsRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsSaveRoomSettings'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsSaveRoomSettingsRequest $post_api_v1_rooms_save_room_settings_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsSaveRoomSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsSaveRoomSettingsRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_save_room_settings_request = null, string $contentType = self::contentTypes['postApiV1RoomsSaveRoomSettings'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsSaveRoomSettings'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsSaveRoomSettings'
            );
        }



        $resourcePath = '/api/v1/rooms.saveRoomSettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_save_room_settings_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_save_room_settings_request));
            } else {
                $httpBody = $post_api_v1_rooms_save_room_settings_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RoomsUnmuteUser
     *
     * Unmute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsUnmuteUserRequest $post_api_v1_rooms_unmute_user_request post_api_v1_rooms_unmute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsUnmuteUser'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response
     */
    public function postApiV1RoomsUnmuteUser($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsUnmuteUser'][0])
    {
        list($response) = $this->postApiV1RoomsUnmuteUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RoomsUnmuteUserWithHttpInfo
     *
     * Unmute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsUnmuteUserRequest $post_api_v1_rooms_unmute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsUnmuteUser'] to see the possible values for this operation
     *
     * @throws \RocketChatRoomsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response|\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RoomsUnmuteUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsUnmuteUser'][0])
    {
        $request = $this->postApiV1RoomsUnmuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatRoomsApi\Model\PostApiV1ChannelsCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RoomsUnmuteUserAsync
     *
     * Unmute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsUnmuteUserRequest $post_api_v1_rooms_unmute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsUnmuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsUnmuteUserAsync($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsUnmuteUser'][0])
    {
        return $this->postApiV1RoomsUnmuteUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RoomsUnmuteUserAsyncWithHttpInfo
     *
     * Unmute User in Room
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsUnmuteUserRequest $post_api_v1_rooms_unmute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsUnmuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RoomsUnmuteUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsUnmuteUser'][0])
    {
        $returnType = '\RocketChatRoomsApi\Model\PostApiV1ChannelsAddLeader200Response';
        $request = $this->postApiV1RoomsUnmuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RoomsUnmuteUser'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param  \RocketChatRoomsApi\Model\PostApiV1RoomsUnmuteUserRequest $post_api_v1_rooms_unmute_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RoomsUnmuteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RoomsUnmuteUserRequest($x_auth_token, $x_user_id, $post_api_v1_rooms_unmute_user_request = null, string $contentType = self::contentTypes['postApiV1RoomsUnmuteUser'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RoomsUnmuteUser'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RoomsUnmuteUser'
            );
        }



        $resourcePath = '/api/v1/rooms.unmuteUser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_rooms_unmute_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_rooms_unmute_user_request));
            } else {
                $httpBody = $post_api_v1_rooms_unmute_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
