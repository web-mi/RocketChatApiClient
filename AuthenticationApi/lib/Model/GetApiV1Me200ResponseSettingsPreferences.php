<?php
/**
 * GetApiV1Me200ResponseSettingsPreferences
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\AuthenticationApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Authentication
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\AuthenticationApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\AuthenticationApi\ObjectSerializer;

/**
 * GetApiV1Me200ResponseSettingsPreferences Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\AuthenticationApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1Me200ResponseSettingsPreferences implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_me_200_response_settings_preferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable_auto_away' => 'bool',
        'idle_timeout_limit' => 'int',
        'desktop_notification_duration' => 'int',
        'audio_notifications' => 'string',
        'desktop_notifications' => 'string',
        'mobile_notifications' => 'string',
        'unread_alert' => 'bool',
        'use_emojis' => 'bool',
        'convert_ascii_emoji' => 'bool',
        'auto_image_load' => 'bool',
        'save_mobile_bandwidth' => 'bool',
        'collapse_media_by_default' => 'bool',
        'hide_usernames' => 'bool',
        'hide_roles' => 'bool',
        'hide_flex_tab' => 'bool',
        'hide_avatars' => 'bool',
        'rooms_list_exhibition_mode' => 'string',
        'sidebar_view_mode' => 'string',
        'sidebar_hide_avatar' => 'bool',
        'sidebar_show_unread' => 'bool',
        'sidebar_show_favorites' => 'bool',
        'send_on_enter' => 'string',
        'message_view_mode' => 'int',
        'email_notification_mode' => 'string',
        'room_counter_sidebar' => 'bool',
        'new_room_notification' => 'string',
        'new_message_notification' => 'string',
        'mute_focused_conversations' => 'bool',
        'notifications_sound_volume' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable_auto_away' => null,
        'idle_timeout_limit' => null,
        'desktop_notification_duration' => null,
        'audio_notifications' => null,
        'desktop_notifications' => null,
        'mobile_notifications' => null,
        'unread_alert' => null,
        'use_emojis' => null,
        'convert_ascii_emoji' => null,
        'auto_image_load' => null,
        'save_mobile_bandwidth' => null,
        'collapse_media_by_default' => null,
        'hide_usernames' => null,
        'hide_roles' => null,
        'hide_flex_tab' => null,
        'hide_avatars' => null,
        'rooms_list_exhibition_mode' => null,
        'sidebar_view_mode' => null,
        'sidebar_hide_avatar' => null,
        'sidebar_show_unread' => null,
        'sidebar_show_favorites' => null,
        'send_on_enter' => null,
        'message_view_mode' => null,
        'email_notification_mode' => null,
        'room_counter_sidebar' => null,
        'new_room_notification' => null,
        'new_message_notification' => null,
        'mute_focused_conversations' => null,
        'notifications_sound_volume' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enable_auto_away' => false,
        'idle_timeout_limit' => false,
        'desktop_notification_duration' => false,
        'audio_notifications' => false,
        'desktop_notifications' => false,
        'mobile_notifications' => false,
        'unread_alert' => false,
        'use_emojis' => false,
        'convert_ascii_emoji' => false,
        'auto_image_load' => false,
        'save_mobile_bandwidth' => false,
        'collapse_media_by_default' => false,
        'hide_usernames' => false,
        'hide_roles' => false,
        'hide_flex_tab' => false,
        'hide_avatars' => false,
        'rooms_list_exhibition_mode' => false,
        'sidebar_view_mode' => false,
        'sidebar_hide_avatar' => false,
        'sidebar_show_unread' => false,
        'sidebar_show_favorites' => false,
        'send_on_enter' => false,
        'message_view_mode' => false,
        'email_notification_mode' => false,
        'room_counter_sidebar' => false,
        'new_room_notification' => false,
        'new_message_notification' => false,
        'mute_focused_conversations' => false,
        'notifications_sound_volume' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_auto_away' => 'enableAutoAway',
        'idle_timeout_limit' => 'idleTimeoutLimit',
        'desktop_notification_duration' => 'desktopNotificationDuration',
        'audio_notifications' => 'audioNotifications',
        'desktop_notifications' => 'desktopNotifications',
        'mobile_notifications' => 'mobileNotifications',
        'unread_alert' => 'unreadAlert',
        'use_emojis' => 'useEmojis',
        'convert_ascii_emoji' => 'convertAsciiEmoji',
        'auto_image_load' => 'autoImageLoad',
        'save_mobile_bandwidth' => 'saveMobileBandwidth',
        'collapse_media_by_default' => 'collapseMediaByDefault',
        'hide_usernames' => 'hideUsernames',
        'hide_roles' => 'hideRoles',
        'hide_flex_tab' => 'hideFlexTab',
        'hide_avatars' => 'hideAvatars',
        'rooms_list_exhibition_mode' => 'roomsListExhibitionMode',
        'sidebar_view_mode' => 'sidebarViewMode',
        'sidebar_hide_avatar' => 'sidebarHideAvatar',
        'sidebar_show_unread' => 'sidebarShowUnread',
        'sidebar_show_favorites' => 'sidebarShowFavorites',
        'send_on_enter' => 'sendOnEnter',
        'message_view_mode' => 'messageViewMode',
        'email_notification_mode' => 'emailNotificationMode',
        'room_counter_sidebar' => 'roomCounterSidebar',
        'new_room_notification' => 'newRoomNotification',
        'new_message_notification' => 'newMessageNotification',
        'mute_focused_conversations' => 'muteFocusedConversations',
        'notifications_sound_volume' => 'notificationsSoundVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_auto_away' => 'setEnableAutoAway',
        'idle_timeout_limit' => 'setIdleTimeoutLimit',
        'desktop_notification_duration' => 'setDesktopNotificationDuration',
        'audio_notifications' => 'setAudioNotifications',
        'desktop_notifications' => 'setDesktopNotifications',
        'mobile_notifications' => 'setMobileNotifications',
        'unread_alert' => 'setUnreadAlert',
        'use_emojis' => 'setUseEmojis',
        'convert_ascii_emoji' => 'setConvertAsciiEmoji',
        'auto_image_load' => 'setAutoImageLoad',
        'save_mobile_bandwidth' => 'setSaveMobileBandwidth',
        'collapse_media_by_default' => 'setCollapseMediaByDefault',
        'hide_usernames' => 'setHideUsernames',
        'hide_roles' => 'setHideRoles',
        'hide_flex_tab' => 'setHideFlexTab',
        'hide_avatars' => 'setHideAvatars',
        'rooms_list_exhibition_mode' => 'setRoomsListExhibitionMode',
        'sidebar_view_mode' => 'setSidebarViewMode',
        'sidebar_hide_avatar' => 'setSidebarHideAvatar',
        'sidebar_show_unread' => 'setSidebarShowUnread',
        'sidebar_show_favorites' => 'setSidebarShowFavorites',
        'send_on_enter' => 'setSendOnEnter',
        'message_view_mode' => 'setMessageViewMode',
        'email_notification_mode' => 'setEmailNotificationMode',
        'room_counter_sidebar' => 'setRoomCounterSidebar',
        'new_room_notification' => 'setNewRoomNotification',
        'new_message_notification' => 'setNewMessageNotification',
        'mute_focused_conversations' => 'setMuteFocusedConversations',
        'notifications_sound_volume' => 'setNotificationsSoundVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_auto_away' => 'getEnableAutoAway',
        'idle_timeout_limit' => 'getIdleTimeoutLimit',
        'desktop_notification_duration' => 'getDesktopNotificationDuration',
        'audio_notifications' => 'getAudioNotifications',
        'desktop_notifications' => 'getDesktopNotifications',
        'mobile_notifications' => 'getMobileNotifications',
        'unread_alert' => 'getUnreadAlert',
        'use_emojis' => 'getUseEmojis',
        'convert_ascii_emoji' => 'getConvertAsciiEmoji',
        'auto_image_load' => 'getAutoImageLoad',
        'save_mobile_bandwidth' => 'getSaveMobileBandwidth',
        'collapse_media_by_default' => 'getCollapseMediaByDefault',
        'hide_usernames' => 'getHideUsernames',
        'hide_roles' => 'getHideRoles',
        'hide_flex_tab' => 'getHideFlexTab',
        'hide_avatars' => 'getHideAvatars',
        'rooms_list_exhibition_mode' => 'getRoomsListExhibitionMode',
        'sidebar_view_mode' => 'getSidebarViewMode',
        'sidebar_hide_avatar' => 'getSidebarHideAvatar',
        'sidebar_show_unread' => 'getSidebarShowUnread',
        'sidebar_show_favorites' => 'getSidebarShowFavorites',
        'send_on_enter' => 'getSendOnEnter',
        'message_view_mode' => 'getMessageViewMode',
        'email_notification_mode' => 'getEmailNotificationMode',
        'room_counter_sidebar' => 'getRoomCounterSidebar',
        'new_room_notification' => 'getNewRoomNotification',
        'new_message_notification' => 'getNewMessageNotification',
        'mute_focused_conversations' => 'getMuteFocusedConversations',
        'notifications_sound_volume' => 'getNotificationsSoundVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enable_auto_away', $data ?? [], null);
        $this->setIfExists('idle_timeout_limit', $data ?? [], null);
        $this->setIfExists('desktop_notification_duration', $data ?? [], null);
        $this->setIfExists('audio_notifications', $data ?? [], null);
        $this->setIfExists('desktop_notifications', $data ?? [], null);
        $this->setIfExists('mobile_notifications', $data ?? [], null);
        $this->setIfExists('unread_alert', $data ?? [], null);
        $this->setIfExists('use_emojis', $data ?? [], null);
        $this->setIfExists('convert_ascii_emoji', $data ?? [], null);
        $this->setIfExists('auto_image_load', $data ?? [], null);
        $this->setIfExists('save_mobile_bandwidth', $data ?? [], null);
        $this->setIfExists('collapse_media_by_default', $data ?? [], null);
        $this->setIfExists('hide_usernames', $data ?? [], null);
        $this->setIfExists('hide_roles', $data ?? [], null);
        $this->setIfExists('hide_flex_tab', $data ?? [], null);
        $this->setIfExists('hide_avatars', $data ?? [], null);
        $this->setIfExists('rooms_list_exhibition_mode', $data ?? [], null);
        $this->setIfExists('sidebar_view_mode', $data ?? [], null);
        $this->setIfExists('sidebar_hide_avatar', $data ?? [], null);
        $this->setIfExists('sidebar_show_unread', $data ?? [], null);
        $this->setIfExists('sidebar_show_favorites', $data ?? [], null);
        $this->setIfExists('send_on_enter', $data ?? [], null);
        $this->setIfExists('message_view_mode', $data ?? [], null);
        $this->setIfExists('email_notification_mode', $data ?? [], null);
        $this->setIfExists('room_counter_sidebar', $data ?? [], null);
        $this->setIfExists('new_room_notification', $data ?? [], null);
        $this->setIfExists('new_message_notification', $data ?? [], null);
        $this->setIfExists('mute_focused_conversations', $data ?? [], null);
        $this->setIfExists('notifications_sound_volume', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_auto_away
     *
     * @return bool|null
     */
    public function getEnableAutoAway()
    {
        return $this->container['enable_auto_away'];
    }

    /**
     * Sets enable_auto_away
     *
     * @param bool|null $enable_auto_away enable_auto_away
     *
     * @return self
     */
    public function setEnableAutoAway($enable_auto_away)
    {
        if (is_null($enable_auto_away)) {
            throw new \InvalidArgumentException('non-nullable enable_auto_away cannot be null');
        }
        $this->container['enable_auto_away'] = $enable_auto_away;

        return $this;
    }

    /**
     * Gets idle_timeout_limit
     *
     * @return int|null
     */
    public function getIdleTimeoutLimit()
    {
        return $this->container['idle_timeout_limit'];
    }

    /**
     * Sets idle_timeout_limit
     *
     * @param int|null $idle_timeout_limit idle_timeout_limit
     *
     * @return self
     */
    public function setIdleTimeoutLimit($idle_timeout_limit)
    {
        if (is_null($idle_timeout_limit)) {
            throw new \InvalidArgumentException('non-nullable idle_timeout_limit cannot be null');
        }
        $this->container['idle_timeout_limit'] = $idle_timeout_limit;

        return $this;
    }

    /**
     * Gets desktop_notification_duration
     *
     * @return int|null
     */
    public function getDesktopNotificationDuration()
    {
        return $this->container['desktop_notification_duration'];
    }

    /**
     * Sets desktop_notification_duration
     *
     * @param int|null $desktop_notification_duration desktop_notification_duration
     *
     * @return self
     */
    public function setDesktopNotificationDuration($desktop_notification_duration)
    {
        if (is_null($desktop_notification_duration)) {
            throw new \InvalidArgumentException('non-nullable desktop_notification_duration cannot be null');
        }
        $this->container['desktop_notification_duration'] = $desktop_notification_duration;

        return $this;
    }

    /**
     * Gets audio_notifications
     *
     * @return string|null
     */
    public function getAudioNotifications()
    {
        return $this->container['audio_notifications'];
    }

    /**
     * Sets audio_notifications
     *
     * @param string|null $audio_notifications audio_notifications
     *
     * @return self
     */
    public function setAudioNotifications($audio_notifications)
    {
        if (is_null($audio_notifications)) {
            throw new \InvalidArgumentException('non-nullable audio_notifications cannot be null');
        }
        $this->container['audio_notifications'] = $audio_notifications;

        return $this;
    }

    /**
     * Gets desktop_notifications
     *
     * @return string|null
     */
    public function getDesktopNotifications()
    {
        return $this->container['desktop_notifications'];
    }

    /**
     * Sets desktop_notifications
     *
     * @param string|null $desktop_notifications desktop_notifications
     *
     * @return self
     */
    public function setDesktopNotifications($desktop_notifications)
    {
        if (is_null($desktop_notifications)) {
            throw new \InvalidArgumentException('non-nullable desktop_notifications cannot be null');
        }
        $this->container['desktop_notifications'] = $desktop_notifications;

        return $this;
    }

    /**
     * Gets mobile_notifications
     *
     * @return string|null
     */
    public function getMobileNotifications()
    {
        return $this->container['mobile_notifications'];
    }

    /**
     * Sets mobile_notifications
     *
     * @param string|null $mobile_notifications mobile_notifications
     *
     * @return self
     */
    public function setMobileNotifications($mobile_notifications)
    {
        if (is_null($mobile_notifications)) {
            throw new \InvalidArgumentException('non-nullable mobile_notifications cannot be null');
        }
        $this->container['mobile_notifications'] = $mobile_notifications;

        return $this;
    }

    /**
     * Gets unread_alert
     *
     * @return bool|null
     */
    public function getUnreadAlert()
    {
        return $this->container['unread_alert'];
    }

    /**
     * Sets unread_alert
     *
     * @param bool|null $unread_alert unread_alert
     *
     * @return self
     */
    public function setUnreadAlert($unread_alert)
    {
        if (is_null($unread_alert)) {
            throw new \InvalidArgumentException('non-nullable unread_alert cannot be null');
        }
        $this->container['unread_alert'] = $unread_alert;

        return $this;
    }

    /**
     * Gets use_emojis
     *
     * @return bool|null
     */
    public function getUseEmojis()
    {
        return $this->container['use_emojis'];
    }

    /**
     * Sets use_emojis
     *
     * @param bool|null $use_emojis use_emojis
     *
     * @return self
     */
    public function setUseEmojis($use_emojis)
    {
        if (is_null($use_emojis)) {
            throw new \InvalidArgumentException('non-nullable use_emojis cannot be null');
        }
        $this->container['use_emojis'] = $use_emojis;

        return $this;
    }

    /**
     * Gets convert_ascii_emoji
     *
     * @return bool|null
     */
    public function getConvertAsciiEmoji()
    {
        return $this->container['convert_ascii_emoji'];
    }

    /**
     * Sets convert_ascii_emoji
     *
     * @param bool|null $convert_ascii_emoji convert_ascii_emoji
     *
     * @return self
     */
    public function setConvertAsciiEmoji($convert_ascii_emoji)
    {
        if (is_null($convert_ascii_emoji)) {
            throw new \InvalidArgumentException('non-nullable convert_ascii_emoji cannot be null');
        }
        $this->container['convert_ascii_emoji'] = $convert_ascii_emoji;

        return $this;
    }

    /**
     * Gets auto_image_load
     *
     * @return bool|null
     */
    public function getAutoImageLoad()
    {
        return $this->container['auto_image_load'];
    }

    /**
     * Sets auto_image_load
     *
     * @param bool|null $auto_image_load auto_image_load
     *
     * @return self
     */
    public function setAutoImageLoad($auto_image_load)
    {
        if (is_null($auto_image_load)) {
            throw new \InvalidArgumentException('non-nullable auto_image_load cannot be null');
        }
        $this->container['auto_image_load'] = $auto_image_load;

        return $this;
    }

    /**
     * Gets save_mobile_bandwidth
     *
     * @return bool|null
     */
    public function getSaveMobileBandwidth()
    {
        return $this->container['save_mobile_bandwidth'];
    }

    /**
     * Sets save_mobile_bandwidth
     *
     * @param bool|null $save_mobile_bandwidth save_mobile_bandwidth
     *
     * @return self
     */
    public function setSaveMobileBandwidth($save_mobile_bandwidth)
    {
        if (is_null($save_mobile_bandwidth)) {
            throw new \InvalidArgumentException('non-nullable save_mobile_bandwidth cannot be null');
        }
        $this->container['save_mobile_bandwidth'] = $save_mobile_bandwidth;

        return $this;
    }

    /**
     * Gets collapse_media_by_default
     *
     * @return bool|null
     */
    public function getCollapseMediaByDefault()
    {
        return $this->container['collapse_media_by_default'];
    }

    /**
     * Sets collapse_media_by_default
     *
     * @param bool|null $collapse_media_by_default collapse_media_by_default
     *
     * @return self
     */
    public function setCollapseMediaByDefault($collapse_media_by_default)
    {
        if (is_null($collapse_media_by_default)) {
            throw new \InvalidArgumentException('non-nullable collapse_media_by_default cannot be null');
        }
        $this->container['collapse_media_by_default'] = $collapse_media_by_default;

        return $this;
    }

    /**
     * Gets hide_usernames
     *
     * @return bool|null
     */
    public function getHideUsernames()
    {
        return $this->container['hide_usernames'];
    }

    /**
     * Sets hide_usernames
     *
     * @param bool|null $hide_usernames hide_usernames
     *
     * @return self
     */
    public function setHideUsernames($hide_usernames)
    {
        if (is_null($hide_usernames)) {
            throw new \InvalidArgumentException('non-nullable hide_usernames cannot be null');
        }
        $this->container['hide_usernames'] = $hide_usernames;

        return $this;
    }

    /**
     * Gets hide_roles
     *
     * @return bool|null
     */
    public function getHideRoles()
    {
        return $this->container['hide_roles'];
    }

    /**
     * Sets hide_roles
     *
     * @param bool|null $hide_roles hide_roles
     *
     * @return self
     */
    public function setHideRoles($hide_roles)
    {
        if (is_null($hide_roles)) {
            throw new \InvalidArgumentException('non-nullable hide_roles cannot be null');
        }
        $this->container['hide_roles'] = $hide_roles;

        return $this;
    }

    /**
     * Gets hide_flex_tab
     *
     * @return bool|null
     */
    public function getHideFlexTab()
    {
        return $this->container['hide_flex_tab'];
    }

    /**
     * Sets hide_flex_tab
     *
     * @param bool|null $hide_flex_tab hide_flex_tab
     *
     * @return self
     */
    public function setHideFlexTab($hide_flex_tab)
    {
        if (is_null($hide_flex_tab)) {
            throw new \InvalidArgumentException('non-nullable hide_flex_tab cannot be null');
        }
        $this->container['hide_flex_tab'] = $hide_flex_tab;

        return $this;
    }

    /**
     * Gets hide_avatars
     *
     * @return bool|null
     */
    public function getHideAvatars()
    {
        return $this->container['hide_avatars'];
    }

    /**
     * Sets hide_avatars
     *
     * @param bool|null $hide_avatars hide_avatars
     *
     * @return self
     */
    public function setHideAvatars($hide_avatars)
    {
        if (is_null($hide_avatars)) {
            throw new \InvalidArgumentException('non-nullable hide_avatars cannot be null');
        }
        $this->container['hide_avatars'] = $hide_avatars;

        return $this;
    }

    /**
     * Gets rooms_list_exhibition_mode
     *
     * @return string|null
     */
    public function getRoomsListExhibitionMode()
    {
        return $this->container['rooms_list_exhibition_mode'];
    }

    /**
     * Sets rooms_list_exhibition_mode
     *
     * @param string|null $rooms_list_exhibition_mode rooms_list_exhibition_mode
     *
     * @return self
     */
    public function setRoomsListExhibitionMode($rooms_list_exhibition_mode)
    {
        if (is_null($rooms_list_exhibition_mode)) {
            throw new \InvalidArgumentException('non-nullable rooms_list_exhibition_mode cannot be null');
        }
        $this->container['rooms_list_exhibition_mode'] = $rooms_list_exhibition_mode;

        return $this;
    }

    /**
     * Gets sidebar_view_mode
     *
     * @return string|null
     */
    public function getSidebarViewMode()
    {
        return $this->container['sidebar_view_mode'];
    }

    /**
     * Sets sidebar_view_mode
     *
     * @param string|null $sidebar_view_mode sidebar_view_mode
     *
     * @return self
     */
    public function setSidebarViewMode($sidebar_view_mode)
    {
        if (is_null($sidebar_view_mode)) {
            throw new \InvalidArgumentException('non-nullable sidebar_view_mode cannot be null');
        }
        $this->container['sidebar_view_mode'] = $sidebar_view_mode;

        return $this;
    }

    /**
     * Gets sidebar_hide_avatar
     *
     * @return bool|null
     */
    public function getSidebarHideAvatar()
    {
        return $this->container['sidebar_hide_avatar'];
    }

    /**
     * Sets sidebar_hide_avatar
     *
     * @param bool|null $sidebar_hide_avatar sidebar_hide_avatar
     *
     * @return self
     */
    public function setSidebarHideAvatar($sidebar_hide_avatar)
    {
        if (is_null($sidebar_hide_avatar)) {
            throw new \InvalidArgumentException('non-nullable sidebar_hide_avatar cannot be null');
        }
        $this->container['sidebar_hide_avatar'] = $sidebar_hide_avatar;

        return $this;
    }

    /**
     * Gets sidebar_show_unread
     *
     * @return bool|null
     */
    public function getSidebarShowUnread()
    {
        return $this->container['sidebar_show_unread'];
    }

    /**
     * Sets sidebar_show_unread
     *
     * @param bool|null $sidebar_show_unread sidebar_show_unread
     *
     * @return self
     */
    public function setSidebarShowUnread($sidebar_show_unread)
    {
        if (is_null($sidebar_show_unread)) {
            throw new \InvalidArgumentException('non-nullable sidebar_show_unread cannot be null');
        }
        $this->container['sidebar_show_unread'] = $sidebar_show_unread;

        return $this;
    }

    /**
     * Gets sidebar_show_favorites
     *
     * @return bool|null
     */
    public function getSidebarShowFavorites()
    {
        return $this->container['sidebar_show_favorites'];
    }

    /**
     * Sets sidebar_show_favorites
     *
     * @param bool|null $sidebar_show_favorites sidebar_show_favorites
     *
     * @return self
     */
    public function setSidebarShowFavorites($sidebar_show_favorites)
    {
        if (is_null($sidebar_show_favorites)) {
            throw new \InvalidArgumentException('non-nullable sidebar_show_favorites cannot be null');
        }
        $this->container['sidebar_show_favorites'] = $sidebar_show_favorites;

        return $this;
    }

    /**
     * Gets send_on_enter
     *
     * @return string|null
     */
    public function getSendOnEnter()
    {
        return $this->container['send_on_enter'];
    }

    /**
     * Sets send_on_enter
     *
     * @param string|null $send_on_enter send_on_enter
     *
     * @return self
     */
    public function setSendOnEnter($send_on_enter)
    {
        if (is_null($send_on_enter)) {
            throw new \InvalidArgumentException('non-nullable send_on_enter cannot be null');
        }
        $this->container['send_on_enter'] = $send_on_enter;

        return $this;
    }

    /**
     * Gets message_view_mode
     *
     * @return int|null
     */
    public function getMessageViewMode()
    {
        return $this->container['message_view_mode'];
    }

    /**
     * Sets message_view_mode
     *
     * @param int|null $message_view_mode message_view_mode
     *
     * @return self
     */
    public function setMessageViewMode($message_view_mode)
    {
        if (is_null($message_view_mode)) {
            throw new \InvalidArgumentException('non-nullable message_view_mode cannot be null');
        }
        $this->container['message_view_mode'] = $message_view_mode;

        return $this;
    }

    /**
     * Gets email_notification_mode
     *
     * @return string|null
     */
    public function getEmailNotificationMode()
    {
        return $this->container['email_notification_mode'];
    }

    /**
     * Sets email_notification_mode
     *
     * @param string|null $email_notification_mode email_notification_mode
     *
     * @return self
     */
    public function setEmailNotificationMode($email_notification_mode)
    {
        if (is_null($email_notification_mode)) {
            throw new \InvalidArgumentException('non-nullable email_notification_mode cannot be null');
        }
        $this->container['email_notification_mode'] = $email_notification_mode;

        return $this;
    }

    /**
     * Gets room_counter_sidebar
     *
     * @return bool|null
     */
    public function getRoomCounterSidebar()
    {
        return $this->container['room_counter_sidebar'];
    }

    /**
     * Sets room_counter_sidebar
     *
     * @param bool|null $room_counter_sidebar room_counter_sidebar
     *
     * @return self
     */
    public function setRoomCounterSidebar($room_counter_sidebar)
    {
        if (is_null($room_counter_sidebar)) {
            throw new \InvalidArgumentException('non-nullable room_counter_sidebar cannot be null');
        }
        $this->container['room_counter_sidebar'] = $room_counter_sidebar;

        return $this;
    }

    /**
     * Gets new_room_notification
     *
     * @return string|null
     */
    public function getNewRoomNotification()
    {
        return $this->container['new_room_notification'];
    }

    /**
     * Sets new_room_notification
     *
     * @param string|null $new_room_notification new_room_notification
     *
     * @return self
     */
    public function setNewRoomNotification($new_room_notification)
    {
        if (is_null($new_room_notification)) {
            throw new \InvalidArgumentException('non-nullable new_room_notification cannot be null');
        }
        $this->container['new_room_notification'] = $new_room_notification;

        return $this;
    }

    /**
     * Gets new_message_notification
     *
     * @return string|null
     */
    public function getNewMessageNotification()
    {
        return $this->container['new_message_notification'];
    }

    /**
     * Sets new_message_notification
     *
     * @param string|null $new_message_notification new_message_notification
     *
     * @return self
     */
    public function setNewMessageNotification($new_message_notification)
    {
        if (is_null($new_message_notification)) {
            throw new \InvalidArgumentException('non-nullable new_message_notification cannot be null');
        }
        $this->container['new_message_notification'] = $new_message_notification;

        return $this;
    }

    /**
     * Gets mute_focused_conversations
     *
     * @return bool|null
     */
    public function getMuteFocusedConversations()
    {
        return $this->container['mute_focused_conversations'];
    }

    /**
     * Sets mute_focused_conversations
     *
     * @param bool|null $mute_focused_conversations mute_focused_conversations
     *
     * @return self
     */
    public function setMuteFocusedConversations($mute_focused_conversations)
    {
        if (is_null($mute_focused_conversations)) {
            throw new \InvalidArgumentException('non-nullable mute_focused_conversations cannot be null');
        }
        $this->container['mute_focused_conversations'] = $mute_focused_conversations;

        return $this;
    }

    /**
     * Gets notifications_sound_volume
     *
     * @return int|null
     */
    public function getNotificationsSoundVolume()
    {
        return $this->container['notifications_sound_volume'];
    }

    /**
     * Sets notifications_sound_volume
     *
     * @param int|null $notifications_sound_volume notifications_sound_volume
     *
     * @return self
     */
    public function setNotificationsSoundVolume($notifications_sound_volume)
    {
        if (is_null($notifications_sound_volume)) {
            throw new \InvalidArgumentException('non-nullable notifications_sound_volume cannot be null');
        }
        $this->container['notifications_sound_volume'] = $notifications_sound_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


