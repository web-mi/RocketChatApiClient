<?php
/**
 * UsersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\UserManagementApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\RocketChatApiClient\UserManagementApi\ApiException;
use WebMI\RocketChatApiClient\UserManagementApi\Configuration;
use WebMI\RocketChatApiClient\UserManagementApi\HeaderSelector;
use WebMI\RocketChatApiClient\UserManagementApi\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getApiV1AvatarSubject' => [
            'application/json',
        ],
        'getApiV1UsersAutocomplete' => [
            'application/json',
        ],
        'getApiV1UsersCheckUsernameAvailability' => [
            'application/json',
        ],
        'getApiV1UsersGetAvatar' => [
            'application/json',
        ],
        'getApiV1UsersGetPersonalAccessTokens' => [
            'application/json',
        ],
        'getApiV1UsersGetPreferences' => [
            'application/json',
        ],
        'getApiV1UsersGetPresence' => [
            'application/json',
        ],
        'getApiV1UsersGetStatus' => [
            'application/json',
        ],
        'getApiV1UsersGetUsernameSuggestion' => [
            'application/json',
        ],
        'getApiV1UsersInfo' => [
            'application/json',
        ],
        'getApiV1UsersList' => [
            'application/json',
        ],
        'getApiV1UsersListByStatus' => [
            'application/json',
        ],
        'getApiV1UsersListTeams' => [
            'application/json',
        ],
        'getApiV1UsersPresence' => [
            'application/json',
        ],
        'getApiV1UsersRequestDataDownload' => [
            'application/json',
        ],
        'getApiV1UsersSendWelcomeEmail' => [
            'application/json',
        ],
        'postApiV1ModerationReportUser' => [
            'application/json',
        ],
        'postApiV1Users2faDisableEmail' => [
            'application/json',
        ],
        'postApiV1Users2faEnableEmail' => [
            'application/json',
        ],
        'postApiV1Users2faSendEmailCode' => [
            'application/json',
        ],
        'postApiV1UsersCreate' => [
            'application/json',
        ],
        'postApiV1UsersCreateToken' => [
            'application/json',
        ],
        'postApiV1UsersDeactivateIdle' => [
            'application/json',
        ],
        'postApiV1UsersDelete' => [
            'application/json',
        ],
        'postApiV1UsersDeleteOwnAccount' => [
            'application/json',
        ],
        'postApiV1UsersForgotPassword' => [
            'application/json',
        ],
        'postApiV1UsersGeneratePersonalAccessToken' => [
            'application/json',
        ],
        'postApiV1UsersLogout' => [
            'application/json',
        ],
        'postApiV1UsersLogoutOtherClients' => [
            'application/json',
        ],
        'postApiV1UsersRegeneratePersonalAccessToken' => [
            'application/json',
        ],
        'postApiV1UsersRegister' => [
            'application/json',
        ],
        'postApiV1UsersRemoveOtherTokens' => [
            'application/json',
        ],
        'postApiV1UsersRemovePersonalAccessToken' => [
            'application/json',
        ],
        'postApiV1UsersResetAvatar' => [
            'application/json',
        ],
        'postApiV1UsersResetE2EKey' => [
            'application/json',
        ],
        'postApiV1UsersResetTOTP' => [
            'application/json',
        ],
        'postApiV1UsersSetActiveStatus' => [
            'application/json',
        ],
        'postApiV1UsersSetAvatar' => [
            'application/json',
        ],
        'postApiV1UsersSetPreferences' => [
            'application/json',
        ],
        'postApiV1UsersSetStatus' => [
            'application/json',
        ],
        'postApiV1UsersUpdate' => [
            'application/json',
        ],
        'postApiV1UsersUpdateOwnBasicInfo' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1AvatarSubject
     *
     * Get Avatars
     *
     * @param  string $subject Name of the user or channel.  Channels are always preceded by an &#x60;@&#x60; symbol. Rooms that are DMs are always represented by the other participant&#39;s user avatar. (required)
     * @param  string $format Format of the image requested.  The values can be one of: jpg, jpeg, png. (optional)
     * @param  int $size Width and height of the image. Default: 200 (optional)
     * @param  string $rc_uid User ID for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $rc_token User auth token for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AvatarSubject'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getApiV1AvatarSubject($subject, $format = null, $size = null, $rc_uid = null, $rc_token = null, string $contentType = self::contentTypes['getApiV1AvatarSubject'][0])
    {
        list($response) = $this->getApiV1AvatarSubjectWithHttpInfo($subject, $format, $size, $rc_uid, $rc_token, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1AvatarSubjectWithHttpInfo
     *
     * Get Avatars
     *
     * @param  string $subject Name of the user or channel.  Channels are always preceded by an &#x60;@&#x60; symbol. Rooms that are DMs are always represented by the other participant&#39;s user avatar. (required)
     * @param  string $format Format of the image requested.  The values can be one of: jpg, jpeg, png. (optional)
     * @param  int $size Width and height of the image. Default: 200 (optional)
     * @param  string $rc_uid User ID for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $rc_token User auth token for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AvatarSubject'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1AvatarSubjectWithHttpInfo($subject, $format = null, $size = null, $rc_uid = null, $rc_token = null, string $contentType = self::contentTypes['getApiV1AvatarSubject'][0])
    {
        $request = $this->getApiV1AvatarSubjectRequest($subject, $format, $size, $rc_uid, $rc_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1AvatarSubjectAsync
     *
     * Get Avatars
     *
     * @param  string $subject Name of the user or channel.  Channels are always preceded by an &#x60;@&#x60; symbol. Rooms that are DMs are always represented by the other participant&#39;s user avatar. (required)
     * @param  string $format Format of the image requested.  The values can be one of: jpg, jpeg, png. (optional)
     * @param  int $size Width and height of the image. Default: 200 (optional)
     * @param  string $rc_uid User ID for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $rc_token User auth token for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AvatarSubject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1AvatarSubjectAsync($subject, $format = null, $size = null, $rc_uid = null, $rc_token = null, string $contentType = self::contentTypes['getApiV1AvatarSubject'][0])
    {
        return $this->getApiV1AvatarSubjectAsyncWithHttpInfo($subject, $format, $size, $rc_uid, $rc_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1AvatarSubjectAsyncWithHttpInfo
     *
     * Get Avatars
     *
     * @param  string $subject Name of the user or channel.  Channels are always preceded by an &#x60;@&#x60; symbol. Rooms that are DMs are always represented by the other participant&#39;s user avatar. (required)
     * @param  string $format Format of the image requested.  The values can be one of: jpg, jpeg, png. (optional)
     * @param  int $size Width and height of the image. Default: 200 (optional)
     * @param  string $rc_uid User ID for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $rc_token User auth token for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AvatarSubject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1AvatarSubjectAsyncWithHttpInfo($subject, $format = null, $size = null, $rc_uid = null, $rc_token = null, string $contentType = self::contentTypes['getApiV1AvatarSubject'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getApiV1AvatarSubjectRequest($subject, $format, $size, $rc_uid, $rc_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1AvatarSubject'
     *
     * @param  string $subject Name of the user or channel.  Channels are always preceded by an &#x60;@&#x60; symbol. Rooms that are DMs are always represented by the other participant&#39;s user avatar. (required)
     * @param  string $format Format of the image requested.  The values can be one of: jpg, jpeg, png. (optional)
     * @param  int $size Width and height of the image. Default: 200 (optional)
     * @param  string $rc_uid User ID for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $rc_token User auth token for authenticating is only required if &#x60;Accounts_AvatarBlockUnauthenticatedAccess&#x60; is enabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1AvatarSubject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1AvatarSubjectRequest($subject, $format = null, $size = null, $rc_uid = null, $rc_token = null, string $contentType = self::contentTypes['getApiV1AvatarSubject'][0])
    {

        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling getApiV1AvatarSubject'
            );
        }






        $resourcePath = '/api/v1/avatar/{subject}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rc_uid,
            'rc_uid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rc_token,
            'rc_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($subject !== null) {
            $resourcePath = str_replace(
                '{' . 'subject' . '}',
                ObjectSerializer::toPathValue($subject),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersAutocomplete
     *
     * Autocomplete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  object $selector Filter the response with the parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersAutocomplete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersAutocomplete($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1UsersAutocomplete'][0])
    {
        list($response) = $this->getApiV1UsersAutocompleteWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersAutocompleteWithHttpInfo
     *
     * Autocomplete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  object $selector Filter the response with the parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersAutocomplete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersAutocompleteWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1UsersAutocomplete'][0])
    {
        $request = $this->getApiV1UsersAutocompleteRequest($x_auth_token, $x_user_id, $selector, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersAutocompleteAsync
     *
     * Autocomplete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  object $selector Filter the response with the parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersAutocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersAutocompleteAsync($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1UsersAutocomplete'][0])
    {
        return $this->getApiV1UsersAutocompleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersAutocompleteAsyncWithHttpInfo
     *
     * Autocomplete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  object $selector Filter the response with the parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersAutocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersAutocompleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1UsersAutocomplete'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersAutocomplete200Response';
        $request = $this->getApiV1UsersAutocompleteRequest($x_auth_token, $x_user_id, $selector, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersAutocomplete'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  object $selector Filter the response with the parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersAutocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersAutocompleteRequest($x_auth_token, $x_user_id, $selector, string $contentType = self::contentTypes['getApiV1UsersAutocomplete'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersAutocomplete'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersAutocomplete'
            );
        }

        // verify the required parameter 'selector' is set
        if ($selector === null || (is_array($selector) && count($selector) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selector when calling getApiV1UsersAutocomplete'
            );
        }


        $resourcePath = '/api/v1/users.autocomplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $selector,
            'selector', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersCheckUsernameAvailability
     *
     * Check Username Availability
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersCheckUsernameAvailability'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersCheckUsernameAvailability($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersCheckUsernameAvailability'][0])
    {
        list($response) = $this->getApiV1UsersCheckUsernameAvailabilityWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersCheckUsernameAvailabilityWithHttpInfo
     *
     * Check Username Availability
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersCheckUsernameAvailability'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersCheckUsernameAvailabilityWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersCheckUsernameAvailability'][0])
    {
        $request = $this->getApiV1UsersCheckUsernameAvailabilityRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersCheckUsernameAvailabilityAsync
     *
     * Check Username Availability
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersCheckUsernameAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersCheckUsernameAvailabilityAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersCheckUsernameAvailability'][0])
    {
        return $this->getApiV1UsersCheckUsernameAvailabilityAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersCheckUsernameAvailabilityAsyncWithHttpInfo
     *
     * Check Username Availability
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersCheckUsernameAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersCheckUsernameAvailabilityAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersCheckUsernameAvailability'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersCheckUsernameAvailability200Response';
        $request = $this->getApiV1UsersCheckUsernameAvailabilityRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersCheckUsernameAvailability'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersCheckUsernameAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersCheckUsernameAvailabilityRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersCheckUsernameAvailability'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersCheckUsernameAvailability'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersCheckUsernameAvailability'
            );
        }


        $resourcePath = '/api/v1/users.checkUsernameAvailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetAvatar
     *
     * Get User Avatar
     *
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response
     */
    public function getApiV1UsersGetAvatar($user_id, string $contentType = self::contentTypes['getApiV1UsersGetAvatar'][0])
    {
        list($response) = $this->getApiV1UsersGetAvatarWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetAvatarWithHttpInfo
     *
     * Get User Avatar
     *
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetAvatarWithHttpInfo($user_id, string $contentType = self::contentTypes['getApiV1UsersGetAvatar'][0])
    {
        $request = $this->getApiV1UsersGetAvatarRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetAvatarAsync
     *
     * Get User Avatar
     *
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetAvatarAsync($user_id, string $contentType = self::contentTypes['getApiV1UsersGetAvatar'][0])
    {
        return $this->getApiV1UsersGetAvatarAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetAvatarAsyncWithHttpInfo
     *
     * Get User Avatar
     *
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetAvatarAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['getApiV1UsersGetAvatar'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getApiV1UsersGetAvatarRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetAvatar'
     *
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetAvatarRequest($user_id, string $contentType = self::contentTypes['getApiV1UsersGetAvatar'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getApiV1UsersGetAvatar'
            );
        }


        $resourcePath = '/api/v1/users.getAvatar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetPersonalAccessTokens
     *
     * Get Personal Access Tokens
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPersonalAccessTokens'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersGetPersonalAccessTokens($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1UsersGetPersonalAccessTokens'][0])
    {
        list($response) = $this->getApiV1UsersGetPersonalAccessTokensWithHttpInfo($x_user_id, $x_auth_token, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetPersonalAccessTokensWithHttpInfo
     *
     * Get Personal Access Tokens
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPersonalAccessTokens'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetPersonalAccessTokensWithHttpInfo($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1UsersGetPersonalAccessTokens'][0])
    {
        $request = $this->getApiV1UsersGetPersonalAccessTokensRequest($x_user_id, $x_auth_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetPersonalAccessTokensAsync
     *
     * Get Personal Access Tokens
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPersonalAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPersonalAccessTokensAsync($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1UsersGetPersonalAccessTokens'][0])
    {
        return $this->getApiV1UsersGetPersonalAccessTokensAsyncWithHttpInfo($x_user_id, $x_auth_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetPersonalAccessTokensAsyncWithHttpInfo
     *
     * Get Personal Access Tokens
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPersonalAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPersonalAccessTokensAsyncWithHttpInfo($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1UsersGetPersonalAccessTokens'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPersonalAccessTokens200Response';
        $request = $this->getApiV1UsersGetPersonalAccessTokensRequest($x_user_id, $x_auth_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetPersonalAccessTokens'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPersonalAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetPersonalAccessTokensRequest($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1UsersGetPersonalAccessTokens'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersGetPersonalAccessTokens'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersGetPersonalAccessTokens'
            );
        }


        $resourcePath = '/api/v1/users.getPersonalAccessTokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetPreferences
     *
     * Get User&#39;s Preferences
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPreferences'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersGetPreferences($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetPreferences'][0])
    {
        list($response) = $this->getApiV1UsersGetPreferencesWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetPreferencesWithHttpInfo
     *
     * Get User&#39;s Preferences
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPreferences'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetPreferencesWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetPreferences'][0])
    {
        $request = $this->getApiV1UsersGetPreferencesRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetPreferencesAsync
     *
     * Get User&#39;s Preferences
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPreferencesAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetPreferences'][0])
    {
        return $this->getApiV1UsersGetPreferencesAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetPreferencesAsyncWithHttpInfo
     *
     * Get User&#39;s Preferences
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPreferencesAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetPreferences'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPreferences200Response';
        $request = $this->getApiV1UsersGetPreferencesRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetPreferences'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetPreferencesRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetPreferences'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersGetPreferences'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersGetPreferences'
            );
        }


        $resourcePath = '/api/v1/users.getPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetPresence
     *
     * Get Specific User&#39;s Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. If not provided, the user who sending the request is retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPresence'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersGetPresence($x_user_id, $x_auth_token, $user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetPresence'][0])
    {
        list($response) = $this->getApiV1UsersGetPresenceWithHttpInfo($x_user_id, $x_auth_token, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetPresenceWithHttpInfo
     *
     * Get Specific User&#39;s Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. If not provided, the user who sending the request is retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPresence'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetPresenceWithHttpInfo($x_user_id, $x_auth_token, $user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetPresence'][0])
    {
        $request = $this->getApiV1UsersGetPresenceRequest($x_user_id, $x_auth_token, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetPresenceAsync
     *
     * Get Specific User&#39;s Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. If not provided, the user who sending the request is retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPresenceAsync($x_user_id, $x_auth_token, $user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetPresence'][0])
    {
        return $this->getApiV1UsersGetPresenceAsyncWithHttpInfo($x_user_id, $x_auth_token, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetPresenceAsyncWithHttpInfo
     *
     * Get Specific User&#39;s Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. If not provided, the user who sending the request is retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetPresenceAsyncWithHttpInfo($x_user_id, $x_auth_token, $user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetPresence'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetPresence200Response';
        $request = $this->getApiV1UsersGetPresenceRequest($x_user_id, $x_auth_token, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetPresence'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $user_id The user ID. Alternatively, you can enter the &#x60;username&#x60; parameter. If not provided, the user who sending the request is retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetPresenceRequest($x_user_id, $x_auth_token, $user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetPresence'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersGetPresence'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersGetPresence'
            );
        }



        $resourcePath = '/api/v1/users.getPresence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetStatus
     *
     * Get Status
     *
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; property and value. If the value is not provided, the authenticated user is used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersGetStatus($user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetStatus'][0])
    {
        list($response) = $this->getApiV1UsersGetStatusWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetStatusWithHttpInfo
     *
     * Get Status
     *
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; property and value. If the value is not provided, the authenticated user is used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetStatusWithHttpInfo($user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetStatus'][0])
    {
        $request = $this->getApiV1UsersGetStatusRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetStatusAsync
     *
     * Get Status
     *
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; property and value. If the value is not provided, the authenticated user is used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetStatusAsync($user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetStatus'][0])
    {
        return $this->getApiV1UsersGetStatusAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetStatusAsyncWithHttpInfo
     *
     * Get Status
     *
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; property and value. If the value is not provided, the authenticated user is used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetStatusAsyncWithHttpInfo($user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetStatus'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetStatus200Response';
        $request = $this->getApiV1UsersGetStatusRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetStatus'
     *
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; property and value. If the value is not provided, the authenticated user is used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetStatusRequest($user_id = null, string $contentType = self::contentTypes['getApiV1UsersGetStatus'][0])
    {



        $resourcePath = '/api/v1/users.getStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersGetUsernameSuggestion
     *
     * Get Username Suggestion
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetUsernameSuggestion'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersGetUsernameSuggestion($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetUsernameSuggestion'][0])
    {
        list($response) = $this->getApiV1UsersGetUsernameSuggestionWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersGetUsernameSuggestionWithHttpInfo
     *
     * Get Username Suggestion
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetUsernameSuggestion'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersGetUsernameSuggestionWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetUsernameSuggestion'][0])
    {
        $request = $this->getApiV1UsersGetUsernameSuggestionRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersGetUsernameSuggestionAsync
     *
     * Get Username Suggestion
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetUsernameSuggestion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetUsernameSuggestionAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetUsernameSuggestion'][0])
    {
        return $this->getApiV1UsersGetUsernameSuggestionAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersGetUsernameSuggestionAsyncWithHttpInfo
     *
     * Get Username Suggestion
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetUsernameSuggestion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersGetUsernameSuggestionAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetUsernameSuggestion'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersGetUsernameSuggestion200Response';
        $request = $this->getApiV1UsersGetUsernameSuggestionRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersGetUsernameSuggestion'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersGetUsernameSuggestion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersGetUsernameSuggestionRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['getApiV1UsersGetUsernameSuggestion'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersGetUsernameSuggestion'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersGetUsernameSuggestion'
            );
        }


        $resourcePath = '/api/v1/users.getUsernameSuggestion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersInfo
     *
     * Get User&#39;s Info
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; parameter and value. (required)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersInfo($x_auth_token, $x_user_id, $user_id, $fields = null, string $contentType = self::contentTypes['getApiV1UsersInfo'][0])
    {
        list($response) = $this->getApiV1UsersInfoWithHttpInfo($x_auth_token, $x_user_id, $user_id, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersInfoWithHttpInfo
     *
     * Get User&#39;s Info
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; parameter and value. (required)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersInfoWithHttpInfo($x_auth_token, $x_user_id, $user_id, $fields = null, string $contentType = self::contentTypes['getApiV1UsersInfo'][0])
    {
        $request = $this->getApiV1UsersInfoRequest($x_auth_token, $x_user_id, $user_id, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersInfoAsync
     *
     * Get User&#39;s Info
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; parameter and value. (required)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersInfoAsync($x_auth_token, $x_user_id, $user_id, $fields = null, string $contentType = self::contentTypes['getApiV1UsersInfo'][0])
    {
        return $this->getApiV1UsersInfoAsyncWithHttpInfo($x_auth_token, $x_user_id, $user_id, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersInfoAsyncWithHttpInfo
     *
     * Get User&#39;s Info
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; parameter and value. (required)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersInfoAsyncWithHttpInfo($x_auth_token, $x_user_id, $user_id, $fields = null, string $contentType = self::contentTypes['getApiV1UsersInfo'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersInfo200Response';
        $request = $this->getApiV1UsersInfoRequest($x_auth_token, $x_user_id, $user_id, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersInfo'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. Alternatively, you can use the &#x60;username&#x60; parameter and value. (required)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersInfoRequest($x_auth_token, $x_user_id, $user_id, $fields = null, string $contentType = self::contentTypes['getApiV1UsersInfo'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersInfo'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersInfo'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getApiV1UsersInfo'
            );
        }



        $resourcePath = '/api/v1/users.info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersList
     *
     * Get Users List
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  mixed $query This parameter allows you to use [MongoDB query](https://www.mongodb.com/docs/manual/reference/operator/query/) operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersList'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersList($x_auth_token, $x_user_id, $query = null, $fields = null, $offset = null, $sort = null, $count = null, string $contentType = self::contentTypes['getApiV1UsersList'][0])
    {
        list($response) = $this->getApiV1UsersListWithHttpInfo($x_auth_token, $x_user_id, $query, $fields, $offset, $sort, $count, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersListWithHttpInfo
     *
     * Get Users List
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  mixed $query This parameter allows you to use [MongoDB query](https://www.mongodb.com/docs/manual/reference/operator/query/) operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersList'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersListWithHttpInfo($x_auth_token, $x_user_id, $query = null, $fields = null, $offset = null, $sort = null, $count = null, string $contentType = self::contentTypes['getApiV1UsersList'][0])
    {
        $request = $this->getApiV1UsersListRequest($x_auth_token, $x_user_id, $query, $fields, $offset, $sort, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersListAsync
     *
     * Get Users List
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  mixed $query This parameter allows you to use [MongoDB query](https://www.mongodb.com/docs/manual/reference/operator/query/) operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListAsync($x_auth_token, $x_user_id, $query = null, $fields = null, $offset = null, $sort = null, $count = null, string $contentType = self::contentTypes['getApiV1UsersList'][0])
    {
        return $this->getApiV1UsersListAsyncWithHttpInfo($x_auth_token, $x_user_id, $query, $fields, $offset, $sort, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersListAsyncWithHttpInfo
     *
     * Get Users List
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  mixed $query This parameter allows you to use [MongoDB query](https://www.mongodb.com/docs/manual/reference/operator/query/) operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListAsyncWithHttpInfo($x_auth_token, $x_user_id, $query = null, $fields = null, $offset = null, $sort = null, $count = null, string $contentType = self::contentTypes['getApiV1UsersList'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersList200Response';
        $request = $this->getApiV1UsersListRequest($x_auth_token, $x_user_id, $query, $fields, $offset, $sort, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersList'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  mixed $query This parameter allows you to use [MongoDB query](https://www.mongodb.com/docs/manual/reference/operator/query/) operators to search for specific data. For example, to query users with a name that contains the letter \&quot;g\&quot;: query&#x3D;{ \&quot;name\&quot;: { \&quot;$regex\&quot;: \&quot;g\&quot; } } (optional)
     * @param  mixed $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields&#x3D;{ \&quot;username\&quot;: 1 } (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersListRequest($x_auth_token, $x_user_id, $query = null, $fields = null, $offset = null, $sort = null, $count = null, string $contentType = self::contentTypes['getApiV1UsersList'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersList'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersList'
            );
        }







        $resourcePath = '/api/v1/users.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersListByStatus
     *
     * List Users by Status
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $status Filter users based on their activation status. It can either  be &#x60;active&#x60; or &#x60;deactivated&#x60; (optional)
     * @param  bool $has_logged_in Filter the users who have logged into their accounts for the first time. (optional)
     * @param  string $type Filter the type of users to be returned. For example, &#39;bot&#39;, &#39;user&#39;, &#39;app&#39;, etc. (optional)
     * @param  string $roles Filter the users returned based on a list of roles. (optional)
     * @param  string $search_term Filter the list of users returned based on a search term (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListByStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response
     */
    public function getApiV1UsersListByStatus($x_auth_token, $x_user_id, $offset = null, $sort = null, $count = null, $status = null, $has_logged_in = null, $type = null, $roles = null, $search_term = null, string $contentType = self::contentTypes['getApiV1UsersListByStatus'][0])
    {
        list($response) = $this->getApiV1UsersListByStatusWithHttpInfo($x_auth_token, $x_user_id, $offset, $sort, $count, $status, $has_logged_in, $type, $roles, $search_term, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersListByStatusWithHttpInfo
     *
     * List Users by Status
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $status Filter users based on their activation status. It can either  be &#x60;active&#x60; or &#x60;deactivated&#x60; (optional)
     * @param  bool $has_logged_in Filter the users who have logged into their accounts for the first time. (optional)
     * @param  string $type Filter the type of users to be returned. For example, &#39;bot&#39;, &#39;user&#39;, &#39;app&#39;, etc. (optional)
     * @param  string $roles Filter the users returned based on a list of roles. (optional)
     * @param  string $search_term Filter the list of users returned based on a search term (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListByStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersListByStatusWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $sort = null, $count = null, $status = null, $has_logged_in = null, $type = null, $roles = null, $search_term = null, string $contentType = self::contentTypes['getApiV1UsersListByStatus'][0])
    {
        $request = $this->getApiV1UsersListByStatusRequest($x_auth_token, $x_user_id, $offset, $sort, $count, $status, $has_logged_in, $type, $roles, $search_term, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersListByStatusAsync
     *
     * List Users by Status
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $status Filter users based on their activation status. It can either  be &#x60;active&#x60; or &#x60;deactivated&#x60; (optional)
     * @param  bool $has_logged_in Filter the users who have logged into their accounts for the first time. (optional)
     * @param  string $type Filter the type of users to be returned. For example, &#39;bot&#39;, &#39;user&#39;, &#39;app&#39;, etc. (optional)
     * @param  string $roles Filter the users returned based on a list of roles. (optional)
     * @param  string $search_term Filter the list of users returned based on a search term (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListByStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListByStatusAsync($x_auth_token, $x_user_id, $offset = null, $sort = null, $count = null, $status = null, $has_logged_in = null, $type = null, $roles = null, $search_term = null, string $contentType = self::contentTypes['getApiV1UsersListByStatus'][0])
    {
        return $this->getApiV1UsersListByStatusAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset, $sort, $count, $status, $has_logged_in, $type, $roles, $search_term, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersListByStatusAsyncWithHttpInfo
     *
     * List Users by Status
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $status Filter users based on their activation status. It can either  be &#x60;active&#x60; or &#x60;deactivated&#x60; (optional)
     * @param  bool $has_logged_in Filter the users who have logged into their accounts for the first time. (optional)
     * @param  string $type Filter the type of users to be returned. For example, &#39;bot&#39;, &#39;user&#39;, &#39;app&#39;, etc. (optional)
     * @param  string $roles Filter the users returned based on a list of roles. (optional)
     * @param  string $search_term Filter the list of users returned based on a search term (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListByStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListByStatusAsyncWithHttpInfo($x_auth_token, $x_user_id, $offset = null, $sort = null, $count = null, $status = null, $has_logged_in = null, $type = null, $roles = null, $search_term = null, string $contentType = self::contentTypes['getApiV1UsersListByStatus'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListByStatus200Response';
        $request = $this->getApiV1UsersListByStatusRequest($x_auth_token, $x_user_id, $offset, $sort, $count, $status, $has_logged_in, $type, $roles, $search_term, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersListByStatus'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $status Filter users based on their activation status. It can either  be &#x60;active&#x60; or &#x60;deactivated&#x60; (optional)
     * @param  bool $has_logged_in Filter the users who have logged into their accounts for the first time. (optional)
     * @param  string $type Filter the type of users to be returned. For example, &#39;bot&#39;, &#39;user&#39;, &#39;app&#39;, etc. (optional)
     * @param  string $roles Filter the users returned based on a list of roles. (optional)
     * @param  string $search_term Filter the list of users returned based on a search term (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListByStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersListByStatusRequest($x_auth_token, $x_user_id, $offset = null, $sort = null, $count = null, $status = null, $has_logged_in = null, $type = null, $roles = null, $search_term = null, string $contentType = self::contentTypes['getApiV1UsersListByStatus'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersListByStatus'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersListByStatus'
            );
        }










        $resourcePath = '/api/v1/users.listByStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_logged_in,
            'hasLoggedIn', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $roles,
            'roles[]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_term,
            'searchTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersListTeams
     *
     * List User&#39;s Teams
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListTeams'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersListTeams($x_auth_token, $x_user_id, $user_id, string $contentType = self::contentTypes['getApiV1UsersListTeams'][0])
    {
        list($response) = $this->getApiV1UsersListTeamsWithHttpInfo($x_auth_token, $x_user_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersListTeamsWithHttpInfo
     *
     * List User&#39;s Teams
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListTeams'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersListTeamsWithHttpInfo($x_auth_token, $x_user_id, $user_id, string $contentType = self::contentTypes['getApiV1UsersListTeams'][0])
    {
        $request = $this->getApiV1UsersListTeamsRequest($x_auth_token, $x_user_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersListTeamsAsync
     *
     * List User&#39;s Teams
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListTeamsAsync($x_auth_token, $x_user_id, $user_id, string $contentType = self::contentTypes['getApiV1UsersListTeams'][0])
    {
        return $this->getApiV1UsersListTeamsAsyncWithHttpInfo($x_auth_token, $x_user_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersListTeamsAsyncWithHttpInfo
     *
     * List User&#39;s Teams
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersListTeamsAsyncWithHttpInfo($x_auth_token, $x_user_id, $user_id, string $contentType = self::contentTypes['getApiV1UsersListTeams'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersListTeams200Response';
        $request = $this->getApiV1UsersListTeamsRequest($x_auth_token, $x_user_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersListTeams'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $user_id The &#x60;userId&#x60; of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersListTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersListTeamsRequest($x_auth_token, $x_user_id, $user_id, string $contentType = self::contentTypes['getApiV1UsersListTeams'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersListTeams'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersListTeams'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getApiV1UsersListTeams'
            );
        }


        $resourcePath = '/api/v1/users.listTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersPresence
     *
     * Get Users Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $from The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don&#39;t pass &#x60;from&#x60; parameter, you&#39;ll get a list of all users&#39; presence and the result will have a &#x60;full&#x60; field with value &#x60;true&#x60; . (optional)
     * @param  string $ids The user IDs whose status you want. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersPresence'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersPresence($x_user_id, $x_auth_token, $from = null, $ids = null, string $contentType = self::contentTypes['getApiV1UsersPresence'][0])
    {
        list($response) = $this->getApiV1UsersPresenceWithHttpInfo($x_user_id, $x_auth_token, $from, $ids, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersPresenceWithHttpInfo
     *
     * Get Users Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $from The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don&#39;t pass &#x60;from&#x60; parameter, you&#39;ll get a list of all users&#39; presence and the result will have a &#x60;full&#x60; field with value &#x60;true&#x60; . (optional)
     * @param  string $ids The user IDs whose status you want. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersPresence'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersPresenceWithHttpInfo($x_user_id, $x_auth_token, $from = null, $ids = null, string $contentType = self::contentTypes['getApiV1UsersPresence'][0])
    {
        $request = $this->getApiV1UsersPresenceRequest($x_user_id, $x_auth_token, $from, $ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersPresenceAsync
     *
     * Get Users Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $from The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don&#39;t pass &#x60;from&#x60; parameter, you&#39;ll get a list of all users&#39; presence and the result will have a &#x60;full&#x60; field with value &#x60;true&#x60; . (optional)
     * @param  string $ids The user IDs whose status you want. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersPresenceAsync($x_user_id, $x_auth_token, $from = null, $ids = null, string $contentType = self::contentTypes['getApiV1UsersPresence'][0])
    {
        return $this->getApiV1UsersPresenceAsyncWithHttpInfo($x_user_id, $x_auth_token, $from, $ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersPresenceAsyncWithHttpInfo
     *
     * Get Users Presence
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $from The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don&#39;t pass &#x60;from&#x60; parameter, you&#39;ll get a list of all users&#39; presence and the result will have a &#x60;full&#x60; field with value &#x60;true&#x60; . (optional)
     * @param  string $ids The user IDs whose status you want. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersPresenceAsyncWithHttpInfo($x_user_id, $x_auth_token, $from = null, $ids = null, string $contentType = self::contentTypes['getApiV1UsersPresence'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersPresence200Response';
        $request = $this->getApiV1UsersPresenceRequest($x_user_id, $x_auth_token, $from, $ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersPresence'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $from The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don&#39;t pass &#x60;from&#x60; parameter, you&#39;ll get a list of all users&#39; presence and the result will have a &#x60;full&#x60; field with value &#x60;true&#x60; . (optional)
     * @param  string $ids The user IDs whose status you want. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersPresence'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersPresenceRequest($x_user_id, $x_auth_token, $from = null, $ids = null, string $contentType = self::contentTypes['getApiV1UsersPresence'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersPresence'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersPresence'
            );
        }




        $resourcePath = '/api/v1/users.presence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersRequestDataDownload
     *
     * Request Data Download
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  bool $full_export Whether you want a full export or not. By default, the value is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersRequestDataDownload'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersRequestDataDownload($x_auth_token, $x_user_id, $full_export = false, string $contentType = self::contentTypes['getApiV1UsersRequestDataDownload'][0])
    {
        list($response) = $this->getApiV1UsersRequestDataDownloadWithHttpInfo($x_auth_token, $x_user_id, $full_export, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersRequestDataDownloadWithHttpInfo
     *
     * Request Data Download
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  bool $full_export Whether you want a full export or not. By default, the value is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersRequestDataDownload'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersRequestDataDownloadWithHttpInfo($x_auth_token, $x_user_id, $full_export = false, string $contentType = self::contentTypes['getApiV1UsersRequestDataDownload'][0])
    {
        $request = $this->getApiV1UsersRequestDataDownloadRequest($x_auth_token, $x_user_id, $full_export, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersRequestDataDownloadAsync
     *
     * Request Data Download
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  bool $full_export Whether you want a full export or not. By default, the value is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersRequestDataDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersRequestDataDownloadAsync($x_auth_token, $x_user_id, $full_export = false, string $contentType = self::contentTypes['getApiV1UsersRequestDataDownload'][0])
    {
        return $this->getApiV1UsersRequestDataDownloadAsyncWithHttpInfo($x_auth_token, $x_user_id, $full_export, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersRequestDataDownloadAsyncWithHttpInfo
     *
     * Request Data Download
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  bool $full_export Whether you want a full export or not. By default, the value is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersRequestDataDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersRequestDataDownloadAsyncWithHttpInfo($x_auth_token, $x_user_id, $full_export = false, string $contentType = self::contentTypes['getApiV1UsersRequestDataDownload'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersRequestDataDownload200Response';
        $request = $this->getApiV1UsersRequestDataDownloadRequest($x_auth_token, $x_user_id, $full_export, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersRequestDataDownload'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  bool $full_export Whether you want a full export or not. By default, the value is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersRequestDataDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersRequestDataDownloadRequest($x_auth_token, $x_user_id, $full_export = false, string $contentType = self::contentTypes['getApiV1UsersRequestDataDownload'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersRequestDataDownload'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersRequestDataDownload'
            );
        }



        $resourcePath = '/api/v1/users.requestDataDownload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $full_export,
            'fullExport', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1UsersSendWelcomeEmail
     *
     * Send Welcome Email to User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmailRequest $get_api_v1_users_send_welcome_email_request get_api_v1_users_send_welcome_email_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersSendWelcomeEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1UsersSendWelcomeEmail($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request = null, string $contentType = self::contentTypes['getApiV1UsersSendWelcomeEmail'][0])
    {
        list($response) = $this->getApiV1UsersSendWelcomeEmailWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1UsersSendWelcomeEmailWithHttpInfo
     *
     * Send Welcome Email to User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmailRequest $get_api_v1_users_send_welcome_email_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersSendWelcomeEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1UsersSendWelcomeEmailWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request = null, string $contentType = self::contentTypes['getApiV1UsersSendWelcomeEmail'][0])
    {
        $request = $this->getApiV1UsersSendWelcomeEmailRequest($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmail400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1UsersSendWelcomeEmailAsync
     *
     * Send Welcome Email to User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmailRequest $get_api_v1_users_send_welcome_email_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersSendWelcomeEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersSendWelcomeEmailAsync($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request = null, string $contentType = self::contentTypes['getApiV1UsersSendWelcomeEmail'][0])
    {
        return $this->getApiV1UsersSendWelcomeEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1UsersSendWelcomeEmailAsyncWithHttpInfo
     *
     * Send Welcome Email to User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmailRequest $get_api_v1_users_send_welcome_email_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersSendWelcomeEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1UsersSendWelcomeEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request = null, string $contentType = self::contentTypes['getApiV1UsersSendWelcomeEmail'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->getApiV1UsersSendWelcomeEmailRequest($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1UsersSendWelcomeEmail'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1UsersSendWelcomeEmailRequest $get_api_v1_users_send_welcome_email_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1UsersSendWelcomeEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1UsersSendWelcomeEmailRequest($x_auth_token, $x_user_id, $get_api_v1_users_send_welcome_email_request = null, string $contentType = self::contentTypes['getApiV1UsersSendWelcomeEmail'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1UsersSendWelcomeEmail'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1UsersSendWelcomeEmail'
            );
        }



        $resourcePath = '/api/v1/users.sendWelcomeEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_api_v1_users_send_welcome_email_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_api_v1_users_send_welcome_email_request));
            } else {
                $httpBody = $get_api_v1_users_send_welcome_email_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ModerationReportUser
     *
     * Report User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1ModerationReportUserRequest $post_api_v1_moderation_report_user_request post_api_v1_moderation_report_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ModerationReportUser'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1ModerationReportUser($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request = null, string $contentType = self::contentTypes['postApiV1ModerationReportUser'][0])
    {
        list($response) = $this->postApiV1ModerationReportUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1ModerationReportUserWithHttpInfo
     *
     * Report User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1ModerationReportUserRequest $post_api_v1_moderation_report_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ModerationReportUser'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ModerationReportUserWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request = null, string $contentType = self::contentTypes['postApiV1ModerationReportUser'][0])
    {
        $request = $this->postApiV1ModerationReportUserRequest($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ModerationReportUserAsync
     *
     * Report User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1ModerationReportUserRequest $post_api_v1_moderation_report_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ModerationReportUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ModerationReportUserAsync($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request = null, string $contentType = self::contentTypes['postApiV1ModerationReportUser'][0])
    {
        return $this->postApiV1ModerationReportUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ModerationReportUserAsyncWithHttpInfo
     *
     * Report User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1ModerationReportUserRequest $post_api_v1_moderation_report_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ModerationReportUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ModerationReportUserAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request = null, string $contentType = self::contentTypes['postApiV1ModerationReportUser'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1ModerationReportUserRequest($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ModerationReportUser'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1ModerationReportUserRequest $post_api_v1_moderation_report_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ModerationReportUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ModerationReportUserRequest($x_auth_token, $x_user_id, $post_api_v1_moderation_report_user_request = null, string $contentType = self::contentTypes['postApiV1ModerationReportUser'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1ModerationReportUser'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1ModerationReportUser'
            );
        }



        $resourcePath = '/api/v1/moderation.reportUser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_moderation_report_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_moderation_report_user_request));
            } else {
                $httpBody = $post_api_v1_moderation_report_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1Users2faDisableEmail
     *
     * Disable 2FA Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faDisableEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1Users2faDisableEmail($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['postApiV1Users2faDisableEmail'][0])
    {
        list($response) = $this->postApiV1Users2faDisableEmailWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1Users2faDisableEmailWithHttpInfo
     *
     * Disable 2FA Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faDisableEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1Users2faDisableEmailWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['postApiV1Users2faDisableEmail'][0])
    {
        $request = $this->postApiV1Users2faDisableEmailRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1Users2faDisableEmailAsync
     *
     * Disable 2FA Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faDisableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faDisableEmailAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['postApiV1Users2faDisableEmail'][0])
    {
        return $this->postApiV1Users2faDisableEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1Users2faDisableEmailAsyncWithHttpInfo
     *
     * Disable 2FA Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faDisableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faDisableEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['postApiV1Users2faDisableEmail'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1Users2faDisableEmailRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1Users2faDisableEmail'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faDisableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1Users2faDisableEmailRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['postApiV1Users2faDisableEmail'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1Users2faDisableEmail'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1Users2faDisableEmail'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1Users2faDisableEmail'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1Users2faDisableEmail'
            );
        }


        $resourcePath = '/api/v1/users.2fa.disableEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1Users2faEnableEmail
     *
     * Enable 2FA with Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faEnableEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1Users2faEnableEmail($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1Users2faEnableEmail'][0])
    {
        list($response) = $this->postApiV1Users2faEnableEmailWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1Users2faEnableEmailWithHttpInfo
     *
     * Enable 2FA with Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faEnableEmail'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1Users2faEnableEmailWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1Users2faEnableEmail'][0])
    {
        $request = $this->postApiV1Users2faEnableEmailRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1Users2faEnableEmailAsync
     *
     * Enable 2FA with Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faEnableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faEnableEmailAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1Users2faEnableEmail'][0])
    {
        return $this->postApiV1Users2faEnableEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1Users2faEnableEmailAsyncWithHttpInfo
     *
     * Enable 2FA with Email
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faEnableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faEnableEmailAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1Users2faEnableEmail'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1Users2faEnableEmailRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1Users2faEnableEmail'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faEnableEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1Users2faEnableEmailRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1Users2faEnableEmail'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1Users2faEnableEmail'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1Users2faEnableEmail'
            );
        }


        $resourcePath = '/api/v1/users.2fa.enableEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1Users2faSendEmailCode
     *
     * Send 2FA Email Code
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1Users2faSendEmailCodeRequest $post_api_v1_users2fa_send_email_code_request post_api_v1_users2fa_send_email_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faSendEmailCode'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1Users2faSendEmailCode($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request = null, string $contentType = self::contentTypes['postApiV1Users2faSendEmailCode'][0])
    {
        list($response) = $this->postApiV1Users2faSendEmailCodeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1Users2faSendEmailCodeWithHttpInfo
     *
     * Send 2FA Email Code
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1Users2faSendEmailCodeRequest $post_api_v1_users2fa_send_email_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faSendEmailCode'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1Users2faSendEmailCodeWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request = null, string $contentType = self::contentTypes['postApiV1Users2faSendEmailCode'][0])
    {
        $request = $this->postApiV1Users2faSendEmailCodeRequest($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1Users2faSendEmailCodeAsync
     *
     * Send 2FA Email Code
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1Users2faSendEmailCodeRequest $post_api_v1_users2fa_send_email_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faSendEmailCodeAsync($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request = null, string $contentType = self::contentTypes['postApiV1Users2faSendEmailCode'][0])
    {
        return $this->postApiV1Users2faSendEmailCodeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1Users2faSendEmailCodeAsyncWithHttpInfo
     *
     * Send 2FA Email Code
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1Users2faSendEmailCodeRequest $post_api_v1_users2fa_send_email_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1Users2faSendEmailCodeAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request = null, string $contentType = self::contentTypes['postApiV1Users2faSendEmailCode'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1Users2faSendEmailCodeRequest($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1Users2faSendEmailCode'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1Users2faSendEmailCodeRequest $post_api_v1_users2fa_send_email_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1Users2faSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1Users2faSendEmailCodeRequest($x_auth_token, $x_user_id, $post_api_v1_users2fa_send_email_code_request = null, string $contentType = self::contentTypes['postApiV1Users2faSendEmailCode'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1Users2faSendEmailCode'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1Users2faSendEmailCode'
            );
        }



        $resourcePath = '/api/v1/users.2fa.sendEmailCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users2fa_send_email_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users2fa_send_email_code_request));
            } else {
                $httpBody = $post_api_v1_users2fa_send_email_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersCreate
     *
     * Create User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateRequest $post_api_v1_users_create_request post_api_v1_users_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersCreate($x_user_id, $x_auth_token, $post_api_v1_users_create_request = null, string $contentType = self::contentTypes['postApiV1UsersCreate'][0])
    {
        list($response) = $this->postApiV1UsersCreateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_create_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersCreateWithHttpInfo
     *
     * Create User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateRequest $post_api_v1_users_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersCreateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_create_request = null, string $contentType = self::contentTypes['postApiV1UsersCreate'][0])
    {
        $request = $this->postApiV1UsersCreateRequest($x_user_id, $x_auth_token, $post_api_v1_users_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersCreateAsync
     *
     * Create User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateRequest $post_api_v1_users_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersCreateAsync($x_user_id, $x_auth_token, $post_api_v1_users_create_request = null, string $contentType = self::contentTypes['postApiV1UsersCreate'][0])
    {
        return $this->postApiV1UsersCreateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersCreateAsyncWithHttpInfo
     *
     * Create User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateRequest $post_api_v1_users_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersCreateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_create_request = null, string $contentType = self::contentTypes['postApiV1UsersCreate'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200Response';
        $request = $this->postApiV1UsersCreateRequest($x_user_id, $x_auth_token, $post_api_v1_users_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersCreate'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateRequest $post_api_v1_users_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersCreateRequest($x_user_id, $x_auth_token, $post_api_v1_users_create_request = null, string $contentType = self::contentTypes['postApiV1UsersCreate'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersCreate'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersCreate'
            );
        }



        $resourcePath = '/api/v1/users.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_create_request));
            } else {
                $httpBody = $post_api_v1_users_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersCreateToken
     *
     * Create Users Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateTokenRequest $post_api_v1_users_create_token_request post_api_v1_users_create_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreateToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     * @deprecated
     */
    public function postApiV1UsersCreateToken($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request = null, string $contentType = self::contentTypes['postApiV1UsersCreateToken'][0])
    {
        list($response) = $this->postApiV1UsersCreateTokenWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersCreateTokenWithHttpInfo
     *
     * Create Users Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateTokenRequest $post_api_v1_users_create_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreateToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postApiV1UsersCreateTokenWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request = null, string $contentType = self::contentTypes['postApiV1UsersCreateToken'][0])
    {
        $request = $this->postApiV1UsersCreateTokenRequest($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersCreateTokenAsync
     *
     * Create Users Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateTokenRequest $post_api_v1_users_create_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postApiV1UsersCreateTokenAsync($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request = null, string $contentType = self::contentTypes['postApiV1UsersCreateToken'][0])
    {
        return $this->postApiV1UsersCreateTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersCreateTokenAsyncWithHttpInfo
     *
     * Create Users Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateTokenRequest $post_api_v1_users_create_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postApiV1UsersCreateTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request = null, string $contentType = self::contentTypes['postApiV1UsersCreateToken'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateToken200Response';
        $request = $this->postApiV1UsersCreateTokenRequest($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersCreateToken'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreateTokenRequest $post_api_v1_users_create_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersCreateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postApiV1UsersCreateTokenRequest($x_auth_token, $x_user_id, $post_api_v1_users_create_token_request = null, string $contentType = self::contentTypes['postApiV1UsersCreateToken'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersCreateToken'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersCreateToken'
            );
        }



        $resourcePath = '/api/v1/users.createToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_create_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_create_token_request));
            } else {
                $httpBody = $post_api_v1_users_create_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersDeactivateIdle
     *
     * Deactivate Idle Users
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdleRequest $post_api_v1_users_deactivate_idle_request post_api_v1_users_deactivate_idle_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeactivateIdle'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response
     */
    public function postApiV1UsersDeactivateIdle($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request = null, string $contentType = self::contentTypes['postApiV1UsersDeactivateIdle'][0])
    {
        list($response) = $this->postApiV1UsersDeactivateIdleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersDeactivateIdleWithHttpInfo
     *
     * Deactivate Idle Users
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdleRequest $post_api_v1_users_deactivate_idle_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeactivateIdle'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersDeactivateIdleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request = null, string $contentType = self::contentTypes['postApiV1UsersDeactivateIdle'][0])
    {
        $request = $this->postApiV1UsersDeactivateIdleRequest($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersDeactivateIdleAsync
     *
     * Deactivate Idle Users
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdleRequest $post_api_v1_users_deactivate_idle_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeactivateIdle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeactivateIdleAsync($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request = null, string $contentType = self::contentTypes['postApiV1UsersDeactivateIdle'][0])
    {
        return $this->postApiV1UsersDeactivateIdleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersDeactivateIdleAsyncWithHttpInfo
     *
     * Deactivate Idle Users
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdleRequest $post_api_v1_users_deactivate_idle_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeactivateIdle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeactivateIdleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request = null, string $contentType = self::contentTypes['postApiV1UsersDeactivateIdle'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdle200Response';
        $request = $this->postApiV1UsersDeactivateIdleRequest($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersDeactivateIdle'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeactivateIdleRequest $post_api_v1_users_deactivate_idle_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeactivateIdle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersDeactivateIdleRequest($x_user_id, $x_auth_token, $post_api_v1_users_deactivate_idle_request = null, string $contentType = self::contentTypes['postApiV1UsersDeactivateIdle'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersDeactivateIdle'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersDeactivateIdle'
            );
        }



        $resourcePath = '/api/v1/users.deactivateIdle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_deactivate_idle_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_deactivate_idle_request));
            } else {
                $httpBody = $post_api_v1_users_deactivate_idle_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersDelete
     *
     * Delete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteRequest $post_api_v1_users_delete_request post_api_v1_users_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response
     */
    public function postApiV1UsersDelete($x_auth_token, $x_user_id, $post_api_v1_users_delete_request = null, string $contentType = self::contentTypes['postApiV1UsersDelete'][0])
    {
        list($response) = $this->postApiV1UsersDeleteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersDeleteWithHttpInfo
     *
     * Delete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteRequest $post_api_v1_users_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersDeleteWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_request = null, string $contentType = self::contentTypes['postApiV1UsersDelete'][0])
    {
        $request = $this->postApiV1UsersDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersDeleteAsync
     *
     * Delete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteRequest $post_api_v1_users_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeleteAsync($x_auth_token, $x_user_id, $post_api_v1_users_delete_request = null, string $contentType = self::contentTypes['postApiV1UsersDelete'][0])
    {
        return $this->postApiV1UsersDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersDeleteAsyncWithHttpInfo
     *
     * Delete User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteRequest $post_api_v1_users_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeleteAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_request = null, string $contentType = self::contentTypes['postApiV1UsersDelete'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersDelete'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteRequest $post_api_v1_users_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersDeleteRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_request = null, string $contentType = self::contentTypes['postApiV1UsersDelete'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersDelete'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersDelete'
            );
        }



        $resourcePath = '/api/v1/users.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_delete_request));
            } else {
                $httpBody = $post_api_v1_users_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersDeleteOwnAccount
     *
     * Delete Own Account
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteOwnAccountRequest $post_api_v1_users_delete_own_account_request post_api_v1_users_delete_own_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeleteOwnAccount'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersDeleteOwnAccount($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request = null, string $contentType = self::contentTypes['postApiV1UsersDeleteOwnAccount'][0])
    {
        list($response) = $this->postApiV1UsersDeleteOwnAccountWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersDeleteOwnAccountWithHttpInfo
     *
     * Delete Own Account
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteOwnAccountRequest $post_api_v1_users_delete_own_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeleteOwnAccount'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersDeleteOwnAccountWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request = null, string $contentType = self::contentTypes['postApiV1UsersDeleteOwnAccount'][0])
    {
        $request = $this->postApiV1UsersDeleteOwnAccountRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersDeleteOwnAccountAsync
     *
     * Delete Own Account
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteOwnAccountRequest $post_api_v1_users_delete_own_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeleteOwnAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeleteOwnAccountAsync($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request = null, string $contentType = self::contentTypes['postApiV1UsersDeleteOwnAccount'][0])
    {
        return $this->postApiV1UsersDeleteOwnAccountAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersDeleteOwnAccountAsyncWithHttpInfo
     *
     * Delete Own Account
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteOwnAccountRequest $post_api_v1_users_delete_own_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeleteOwnAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersDeleteOwnAccountAsyncWithHttpInfo($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request = null, string $contentType = self::contentTypes['postApiV1UsersDeleteOwnAccount'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersDeleteOwnAccountRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersDeleteOwnAccount'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersDeleteOwnAccountRequest $post_api_v1_users_delete_own_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersDeleteOwnAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersDeleteOwnAccountRequest($x_auth_token, $x_user_id, $post_api_v1_users_delete_own_account_request = null, string $contentType = self::contentTypes['postApiV1UsersDeleteOwnAccount'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersDeleteOwnAccount'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersDeleteOwnAccount'
            );
        }



        $resourcePath = '/api/v1/users.deleteOwnAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_delete_own_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_delete_own_account_request));
            } else {
                $httpBody = $post_api_v1_users_delete_own_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersForgotPassword
     *
     * Forgot Password
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPasswordRequest $post_api_v1_users_forgot_password_request post_api_v1_users_forgot_password_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersForgotPassword'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response
     */
    public function postApiV1UsersForgotPassword($post_api_v1_users_forgot_password_request = null, string $contentType = self::contentTypes['postApiV1UsersForgotPassword'][0])
    {
        list($response) = $this->postApiV1UsersForgotPasswordWithHttpInfo($post_api_v1_users_forgot_password_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersForgotPasswordWithHttpInfo
     *
     * Forgot Password
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPasswordRequest $post_api_v1_users_forgot_password_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersForgotPassword'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersForgotPasswordWithHttpInfo($post_api_v1_users_forgot_password_request = null, string $contentType = self::contentTypes['postApiV1UsersForgotPassword'][0])
    {
        $request = $this->postApiV1UsersForgotPasswordRequest($post_api_v1_users_forgot_password_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersForgotPasswordAsync
     *
     * Forgot Password
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPasswordRequest $post_api_v1_users_forgot_password_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersForgotPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersForgotPasswordAsync($post_api_v1_users_forgot_password_request = null, string $contentType = self::contentTypes['postApiV1UsersForgotPassword'][0])
    {
        return $this->postApiV1UsersForgotPasswordAsyncWithHttpInfo($post_api_v1_users_forgot_password_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersForgotPasswordAsyncWithHttpInfo
     *
     * Forgot Password
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPasswordRequest $post_api_v1_users_forgot_password_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersForgotPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersForgotPasswordAsyncWithHttpInfo($post_api_v1_users_forgot_password_request = null, string $contentType = self::contentTypes['postApiV1UsersForgotPassword'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPassword200Response';
        $request = $this->postApiV1UsersForgotPasswordRequest($post_api_v1_users_forgot_password_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersForgotPassword'
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersForgotPasswordRequest $post_api_v1_users_forgot_password_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersForgotPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersForgotPasswordRequest($post_api_v1_users_forgot_password_request = null, string $contentType = self::contentTypes['postApiV1UsersForgotPassword'][0])
    {



        $resourcePath = '/api/v1/users.forgotPassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_forgot_password_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_forgot_password_request));
            } else {
                $httpBody = $post_api_v1_users_forgot_password_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersGeneratePersonalAccessToken
     *
     * Generate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessTokenRequest $post_api_v1_users_generate_personal_access_token_request post_api_v1_users_generate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersGeneratePersonalAccessToken($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'][0])
    {
        list($response) = $this->postApiV1UsersGeneratePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersGeneratePersonalAccessTokenWithHttpInfo
     *
     * Generate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessTokenRequest $post_api_v1_users_generate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersGeneratePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'][0])
    {
        $request = $this->postApiV1UsersGeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersGeneratePersonalAccessTokenAsync
     *
     * Generate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessTokenRequest $post_api_v1_users_generate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersGeneratePersonalAccessTokenAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'][0])
    {
        return $this->postApiV1UsersGeneratePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersGeneratePersonalAccessTokenAsyncWithHttpInfo
     *
     * Generate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessTokenRequest $post_api_v1_users_generate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersGeneratePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response';
        $request = $this->postApiV1UsersGeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersGeneratePersonalAccessToken'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessTokenRequest $post_api_v1_users_generate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersGeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_generate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersGeneratePersonalAccessToken'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersGeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersGeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersGeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersGeneratePersonalAccessToken'
            );
        }



        $resourcePath = '/api/v1/users.generatePersonalAccessToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_generate_personal_access_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_generate_personal_access_token_request));
            } else {
                $httpBody = $post_api_v1_users_generate_personal_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersLogout
     *
     * Logout User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogout'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersLogout($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogout'][0])
    {
        list($response) = $this->postApiV1UsersLogoutWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersLogoutWithHttpInfo
     *
     * Logout User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogout'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersLogoutWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogout'][0])
    {
        $request = $this->postApiV1UsersLogoutRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersLogoutAsync
     *
     * Logout User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersLogoutAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogout'][0])
    {
        return $this->postApiV1UsersLogoutAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersLogoutAsyncWithHttpInfo
     *
     * Logout User
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersLogoutAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogout'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogout200Response';
        $request = $this->postApiV1UsersLogoutRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersLogout'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersLogoutRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogout'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersLogout'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersLogout'
            );
        }


        $resourcePath = '/api/v1/users.logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersLogoutOtherClients
     *
     * Logout Other Clients
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogoutOtherClients'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersLogoutOtherClients($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogoutOtherClients'][0])
    {
        list($response) = $this->postApiV1UsersLogoutOtherClientsWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersLogoutOtherClientsWithHttpInfo
     *
     * Logout Other Clients
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogoutOtherClients'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersLogoutOtherClientsWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogoutOtherClients'][0])
    {
        $request = $this->postApiV1UsersLogoutOtherClientsRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersLogoutOtherClientsAsync
     *
     * Logout Other Clients
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogoutOtherClients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersLogoutOtherClientsAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogoutOtherClients'][0])
    {
        return $this->postApiV1UsersLogoutOtherClientsAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersLogoutOtherClientsAsyncWithHttpInfo
     *
     * Logout Other Clients
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogoutOtherClients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersLogoutOtherClientsAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogoutOtherClients'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersLogoutOtherClients200Response';
        $request = $this->postApiV1UsersLogoutOtherClientsRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersLogoutOtherClients'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersLogoutOtherClients'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersLogoutOtherClientsRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersLogoutOtherClients'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersLogoutOtherClients'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersLogoutOtherClients'
            );
        }


        $resourcePath = '/api/v1/users.logoutOtherClients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersRegeneratePersonalAccessToken
     *
     * Regenerate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersRegeneratePersonalAccessToken($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'][0])
    {
        list($response) = $this->postApiV1UsersRegeneratePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersRegeneratePersonalAccessTokenWithHttpInfo
     *
     * Regenerate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersRegeneratePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'][0])
    {
        $request = $this->postApiV1UsersRegeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersRegeneratePersonalAccessTokenAsync
     *
     * Regenerate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRegeneratePersonalAccessTokenAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'][0])
    {
        return $this->postApiV1UsersRegeneratePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersRegeneratePersonalAccessTokenAsyncWithHttpInfo
     *
     * Regenerate Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRegeneratePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken200Response';
        $request = $this->postApiV1UsersRegeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersRegeneratePersonalAccessToken'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersRegeneratePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRegeneratePersonalAccessToken'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersRegeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersRegeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersRegeneratePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersRegeneratePersonalAccessToken'
            );
        }



        $resourcePath = '/api/v1/users.regeneratePersonalAccessToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_regenerate_personal_access_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_regenerate_personal_access_token_request));
            } else {
                $httpBody = $post_api_v1_users_regenerate_personal_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersRegister
     *
     * Register User
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegisterRequest $post_api_v1_users_register_request post_api_v1_users_register_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegister'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response
     */
    public function postApiV1UsersRegister($post_api_v1_users_register_request = null, string $contentType = self::contentTypes['postApiV1UsersRegister'][0])
    {
        list($response) = $this->postApiV1UsersRegisterWithHttpInfo($post_api_v1_users_register_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersRegisterWithHttpInfo
     *
     * Register User
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegisterRequest $post_api_v1_users_register_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegister'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersRegisterWithHttpInfo($post_api_v1_users_register_request = null, string $contentType = self::contentTypes['postApiV1UsersRegister'][0])
    {
        $request = $this->postApiV1UsersRegisterRequest($post_api_v1_users_register_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersRegisterAsync
     *
     * Register User
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegisterRequest $post_api_v1_users_register_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRegisterAsync($post_api_v1_users_register_request = null, string $contentType = self::contentTypes['postApiV1UsersRegister'][0])
    {
        return $this->postApiV1UsersRegisterAsyncWithHttpInfo($post_api_v1_users_register_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersRegisterAsyncWithHttpInfo
     *
     * Register User
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegisterRequest $post_api_v1_users_register_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRegisterAsyncWithHttpInfo($post_api_v1_users_register_request = null, string $contentType = self::contentTypes['postApiV1UsersRegister'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegister200Response';
        $request = $this->postApiV1UsersRegisterRequest($post_api_v1_users_register_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersRegister'
     *
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegisterRequest $post_api_v1_users_register_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersRegisterRequest($post_api_v1_users_register_request = null, string $contentType = self::contentTypes['postApiV1UsersRegister'][0])
    {



        $resourcePath = '/api/v1/users.register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_register_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_register_request));
            } else {
                $httpBody = $post_api_v1_users_register_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersRemoveOtherTokens
     *
     * Remove Other Tokens
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemoveOtherTokens'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersRemoveOtherTokens($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersRemoveOtherTokens'][0])
    {
        list($response) = $this->postApiV1UsersRemoveOtherTokensWithHttpInfo($x_auth_token, $x_user_id, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersRemoveOtherTokensWithHttpInfo
     *
     * Remove Other Tokens
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemoveOtherTokens'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersRemoveOtherTokensWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersRemoveOtherTokens'][0])
    {
        $request = $this->postApiV1UsersRemoveOtherTokensRequest($x_auth_token, $x_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersRemoveOtherTokensAsync
     *
     * Remove Other Tokens
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemoveOtherTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRemoveOtherTokensAsync($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersRemoveOtherTokens'][0])
    {
        return $this->postApiV1UsersRemoveOtherTokensAsyncWithHttpInfo($x_auth_token, $x_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersRemoveOtherTokensAsyncWithHttpInfo
     *
     * Remove Other Tokens
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemoveOtherTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRemoveOtherTokensAsyncWithHttpInfo($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersRemoveOtherTokens'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersRemoveOtherTokensRequest($x_auth_token, $x_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersRemoveOtherTokens'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemoveOtherTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersRemoveOtherTokensRequest($x_auth_token, $x_user_id, string $contentType = self::contentTypes['postApiV1UsersRemoveOtherTokens'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersRemoveOtherTokens'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersRemoveOtherTokens'
            );
        }


        $resourcePath = '/api/v1/users.removeOtherTokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersRemovePersonalAccessToken
     *
     * Remove Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemovePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersRemovePersonalAccessToken($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRemovePersonalAccessToken'][0])
    {
        list($response) = $this->postApiV1UsersRemovePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersRemovePersonalAccessTokenWithHttpInfo
     *
     * Remove Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemovePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersRemovePersonalAccessTokenWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRemovePersonalAccessToken'][0])
    {
        $request = $this->postApiV1UsersRemovePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersRemovePersonalAccessTokenAsync
     *
     * Remove Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemovePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRemovePersonalAccessTokenAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRemovePersonalAccessToken'][0])
    {
        return $this->postApiV1UsersRemovePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersRemovePersonalAccessTokenAsyncWithHttpInfo
     *
     * Remove Personal Access Token
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemovePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersRemovePersonalAccessTokenAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRemovePersonalAccessToken'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersRemovePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersRemovePersonalAccessToken'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersRegeneratePersonalAccessTokenRequest $post_api_v1_users_regenerate_personal_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersRemovePersonalAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersRemovePersonalAccessTokenRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_regenerate_personal_access_token_request = null, string $contentType = self::contentTypes['postApiV1UsersRemovePersonalAccessToken'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersRemovePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersRemovePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersRemovePersonalAccessToken'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersRemovePersonalAccessToken'
            );
        }



        $resourcePath = '/api/v1/users.removePersonalAccessToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_regenerate_personal_access_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_regenerate_personal_access_token_request));
            } else {
                $httpBody = $post_api_v1_users_regenerate_personal_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersResetAvatar
     *
     * Reset Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetAvatarRequest $post_api_v1_users_reset_avatar_request post_api_v1_users_reset_avatar_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersResetAvatar($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersResetAvatar'][0])
    {
        list($response) = $this->postApiV1UsersResetAvatarWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersResetAvatarWithHttpInfo
     *
     * Reset Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetAvatarRequest $post_api_v1_users_reset_avatar_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersResetAvatarWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersResetAvatar'][0])
    {
        $request = $this->postApiV1UsersResetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersResetAvatarAsync
     *
     * Reset Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetAvatarRequest $post_api_v1_users_reset_avatar_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetAvatarAsync($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersResetAvatar'][0])
    {
        return $this->postApiV1UsersResetAvatarAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersResetAvatarAsyncWithHttpInfo
     *
     * Reset Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetAvatarRequest $post_api_v1_users_reset_avatar_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetAvatarAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersResetAvatar'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersResetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersResetAvatar'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetAvatarRequest $post_api_v1_users_reset_avatar_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersResetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_reset_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersResetAvatar'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersResetAvatar'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersResetAvatar'
            );
        }



        $resourcePath = '/api/v1/users.resetAvatar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_reset_avatar_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_reset_avatar_request));
            } else {
                $httpBody = $post_api_v1_users_reset_avatar_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersResetE2EKey
     *
     * Reset Users E2E Key
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetE2EKeyRequest $post_api_v1_users_reset_e2_e_key_request post_api_v1_users_reset_e2_e_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetE2EKey'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersResetE2EKey($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request = null, string $contentType = self::contentTypes['postApiV1UsersResetE2EKey'][0])
    {
        list($response) = $this->postApiV1UsersResetE2EKeyWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersResetE2EKeyWithHttpInfo
     *
     * Reset Users E2E Key
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetE2EKeyRequest $post_api_v1_users_reset_e2_e_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetE2EKey'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersResetE2EKeyWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request = null, string $contentType = self::contentTypes['postApiV1UsersResetE2EKey'][0])
    {
        $request = $this->postApiV1UsersResetE2EKeyRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersResetE2EKeyAsync
     *
     * Reset Users E2E Key
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetE2EKeyRequest $post_api_v1_users_reset_e2_e_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetE2EKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetE2EKeyAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request = null, string $contentType = self::contentTypes['postApiV1UsersResetE2EKey'][0])
    {
        return $this->postApiV1UsersResetE2EKeyAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersResetE2EKeyAsyncWithHttpInfo
     *
     * Reset Users E2E Key
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetE2EKeyRequest $post_api_v1_users_reset_e2_e_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetE2EKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetE2EKeyAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request = null, string $contentType = self::contentTypes['postApiV1UsersResetE2EKey'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersResetE2EKeyRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersResetE2EKey'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetE2EKeyRequest $post_api_v1_users_reset_e2_e_key_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetE2EKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersResetE2EKeyRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_e2_e_key_request = null, string $contentType = self::contentTypes['postApiV1UsersResetE2EKey'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersResetE2EKey'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersResetE2EKey'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersResetE2EKey'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersResetE2EKey'
            );
        }



        $resourcePath = '/api/v1/users.resetE2EKey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_reset_e2_e_key_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_reset_e2_e_key_request));
            } else {
                $httpBody = $post_api_v1_users_reset_e2_e_key_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersResetTOTP
     *
     * Reset Users TOTP
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetTOTPRequest $post_api_v1_users_reset_totp_request post_api_v1_users_reset_totp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetTOTP'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersResetTOTP($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request = null, string $contentType = self::contentTypes['postApiV1UsersResetTOTP'][0])
    {
        list($response) = $this->postApiV1UsersResetTOTPWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersResetTOTPWithHttpInfo
     *
     * Reset Users TOTP
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetTOTPRequest $post_api_v1_users_reset_totp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetTOTP'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersResetTOTPWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request = null, string $contentType = self::contentTypes['postApiV1UsersResetTOTP'][0])
    {
        $request = $this->postApiV1UsersResetTOTPRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersGeneratePersonalAccessToken400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersResetTOTPAsync
     *
     * Reset Users TOTP
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetTOTPRequest $post_api_v1_users_reset_totp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetTOTP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetTOTPAsync($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request = null, string $contentType = self::contentTypes['postApiV1UsersResetTOTP'][0])
    {
        return $this->postApiV1UsersResetTOTPAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersResetTOTPAsyncWithHttpInfo
     *
     * Reset Users TOTP
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetTOTPRequest $post_api_v1_users_reset_totp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetTOTP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersResetTOTPAsyncWithHttpInfo($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request = null, string $contentType = self::contentTypes['postApiV1UsersResetTOTP'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersResetTOTPRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersResetTOTP'
     *
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersResetTOTPRequest $post_api_v1_users_reset_totp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersResetTOTP'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersResetTOTPRequest($x_auth_token, $x_user_id, $x_2fa_code, $x_2fa_method, $post_api_v1_users_reset_totp_request = null, string $contentType = self::contentTypes['postApiV1UsersResetTOTP'][0])
    {

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersResetTOTP'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersResetTOTP'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersResetTOTP'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersResetTOTP'
            );
        }



        $resourcePath = '/api/v1/users.resetTOTP';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_reset_totp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_reset_totp_request));
            } else {
                $httpBody = $post_api_v1_users_reset_totp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersSetActiveStatus
     *
     * Set User&#39;s Status Active
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatusRequest $post_api_v1_users_set_active_status_request If &#x60;activeStatus&#x3D;false&#x60; &amp; &#x60;confirmRelinquish&#x3D;true&#x60; and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetActiveStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersSetActiveStatus($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetActiveStatus'][0])
    {
        list($response) = $this->postApiV1UsersSetActiveStatusWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersSetActiveStatusWithHttpInfo
     *
     * Set User&#39;s Status Active
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatusRequest $post_api_v1_users_set_active_status_request If &#x60;activeStatus&#x3D;false&#x60; &amp; &#x60;confirmRelinquish&#x3D;true&#x60; and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetActiveStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersSetActiveStatusWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetActiveStatus'][0])
    {
        $request = $this->postApiV1UsersSetActiveStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersSetActiveStatusAsync
     *
     * Set User&#39;s Status Active
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatusRequest $post_api_v1_users_set_active_status_request If &#x60;activeStatus&#x3D;false&#x60; &amp; &#x60;confirmRelinquish&#x3D;true&#x60; and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetActiveStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetActiveStatusAsync($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetActiveStatus'][0])
    {
        return $this->postApiV1UsersSetActiveStatusAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersSetActiveStatusAsyncWithHttpInfo
     *
     * Set User&#39;s Status Active
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatusRequest $post_api_v1_users_set_active_status_request If &#x60;activeStatus&#x3D;false&#x60; &amp; &#x60;confirmRelinquish&#x3D;true&#x60; and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetActiveStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetActiveStatusAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetActiveStatus'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatus200Response';
        $request = $this->postApiV1UsersSetActiveStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersSetActiveStatus'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetActiveStatusRequest $post_api_v1_users_set_active_status_request If &#x60;activeStatus&#x3D;false&#x60; &amp; &#x60;confirmRelinquish&#x3D;true&#x60; and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetActiveStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersSetActiveStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_active_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetActiveStatus'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersSetActiveStatus'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersSetActiveStatus'
            );
        }



        $resourcePath = '/api/v1/users.setActiveStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_set_active_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_set_active_status_request));
            } else {
                $httpBody = $post_api_v1_users_set_active_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersSetAvatar
     *
     * Set User Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetAvatarRequest $post_api_v1_users_set_avatar_request You have 2 options to set the user avatar:   * Upload the image file to use as the new avatar, as form data. For example, &#x60;image&#x3D;@my-own-avatar.png&#x60;.   * Enter the image URL you want to set as the user avatar in the request body. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersSetAvatar($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersSetAvatar'][0])
    {
        list($response) = $this->postApiV1UsersSetAvatarWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersSetAvatarWithHttpInfo
     *
     * Set User Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetAvatarRequest $post_api_v1_users_set_avatar_request You have 2 options to set the user avatar:   * Upload the image file to use as the new avatar, as form data. For example, &#x60;image&#x3D;@my-own-avatar.png&#x60;.   * Enter the image URL you want to set as the user avatar in the request body. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetAvatar'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersSetAvatarWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersSetAvatar'][0])
    {
        $request = $this->postApiV1UsersSetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersSetAvatarAsync
     *
     * Set User Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetAvatarRequest $post_api_v1_users_set_avatar_request You have 2 options to set the user avatar:   * Upload the image file to use as the new avatar, as form data. For example, &#x60;image&#x3D;@my-own-avatar.png&#x60;.   * Enter the image URL you want to set as the user avatar in the request body. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetAvatarAsync($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersSetAvatar'][0])
    {
        return $this->postApiV1UsersSetAvatarAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersSetAvatarAsyncWithHttpInfo
     *
     * Set User Avatar
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetAvatarRequest $post_api_v1_users_set_avatar_request You have 2 options to set the user avatar:   * Upload the image file to use as the new avatar, as form data. For example, &#x60;image&#x3D;@my-own-avatar.png&#x60;.   * Enter the image URL you want to set as the user avatar in the request body. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetAvatarAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersSetAvatar'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersSetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersSetAvatar'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetAvatarRequest $post_api_v1_users_set_avatar_request You have 2 options to set the user avatar:   * Upload the image file to use as the new avatar, as form data. For example, &#x60;image&#x3D;@my-own-avatar.png&#x60;.   * Enter the image URL you want to set as the user avatar in the request body. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetAvatar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersSetAvatarRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_avatar_request = null, string $contentType = self::contentTypes['postApiV1UsersSetAvatar'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersSetAvatar'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersSetAvatar'
            );
        }



        $resourcePath = '/api/v1/users.setAvatar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_set_avatar_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_set_avatar_request));
            } else {
                $httpBody = $post_api_v1_users_set_avatar_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersSetPreferences
     *
     * Set User Preferences
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferencesRequest $post_api_v1_users_set_preferences_request post_api_v1_users_set_preferences_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetPreferences'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersSetPreferences($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request = null, string $contentType = self::contentTypes['postApiV1UsersSetPreferences'][0])
    {
        list($response) = $this->postApiV1UsersSetPreferencesWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersSetPreferencesWithHttpInfo
     *
     * Set User Preferences
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferencesRequest $post_api_v1_users_set_preferences_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetPreferences'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersSetPreferencesWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request = null, string $contentType = self::contentTypes['postApiV1UsersSetPreferences'][0])
    {
        $request = $this->postApiV1UsersSetPreferencesRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersSetPreferencesAsync
     *
     * Set User Preferences
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferencesRequest $post_api_v1_users_set_preferences_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetPreferencesAsync($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request = null, string $contentType = self::contentTypes['postApiV1UsersSetPreferences'][0])
    {
        return $this->postApiV1UsersSetPreferencesAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersSetPreferencesAsyncWithHttpInfo
     *
     * Set User Preferences
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferencesRequest $post_api_v1_users_set_preferences_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetPreferencesAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request = null, string $contentType = self::contentTypes['postApiV1UsersSetPreferences'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferences200Response';
        $request = $this->postApiV1UsersSetPreferencesRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersSetPreferences'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetPreferencesRequest $post_api_v1_users_set_preferences_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetPreferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersSetPreferencesRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_preferences_request = null, string $contentType = self::contentTypes['postApiV1UsersSetPreferences'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersSetPreferences'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersSetPreferences'
            );
        }



        $resourcePath = '/api/v1/users.setPreferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_set_preferences_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_set_preferences_request));
            } else {
                $httpBody = $post_api_v1_users_set_preferences_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersSetStatus
     *
     * Set User Status
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetStatusRequest $post_api_v1_users_set_status_request post_api_v1_users_set_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersSetStatus($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetStatus'][0])
    {
        list($response) = $this->postApiV1UsersSetStatusWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersSetStatusWithHttpInfo
     *
     * Set User Status
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetStatusRequest $post_api_v1_users_set_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetStatus'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersSetStatusWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetStatus'][0])
    {
        $request = $this->postApiV1UsersSetStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersSetStatusAsync
     *
     * Set User Status
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetStatusRequest $post_api_v1_users_set_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetStatusAsync($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetStatus'][0])
    {
        return $this->postApiV1UsersSetStatusAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersSetStatusAsyncWithHttpInfo
     *
     * Set User Status
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetStatusRequest $post_api_v1_users_set_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersSetStatusAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetStatus'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1UsersSetStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersSetStatus'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersSetStatusRequest $post_api_v1_users_set_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersSetStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersSetStatusRequest($x_user_id, $x_auth_token, $post_api_v1_users_set_status_request = null, string $contentType = self::contentTypes['postApiV1UsersSetStatus'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersSetStatus'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersSetStatus'
            );
        }



        $resourcePath = '/api/v1/users.setStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_set_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_set_status_request));
            } else {
                $httpBody = $post_api_v1_users_set_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersUpdate
     *
     * Update User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateRequest $post_api_v1_users_update_request post_api_v1_users_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersUpdate($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdate'][0])
    {
        list($response) = $this->postApiV1UsersUpdateWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersUpdateWithHttpInfo
     *
     * Update User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateRequest $post_api_v1_users_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdate'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersUpdateWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdate'][0])
    {
        $request = $this->postApiV1UsersUpdateRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersUpdateAsync
     *
     * Update User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateRequest $post_api_v1_users_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersUpdateAsync($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdate'][0])
    {
        return $this->postApiV1UsersUpdateAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersUpdateAsyncWithHttpInfo
     *
     * Update User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateRequest $post_api_v1_users_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersUpdateAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdate'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdate200Response';
        $request = $this->postApiV1UsersUpdateRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersUpdate'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateRequest $post_api_v1_users_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersUpdateRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdate'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersUpdate'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersUpdate'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersUpdate'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersUpdate'
            );
        }



        $resourcePath = '/api/v1/users.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_update_request));
            } else {
                $httpBody = $post_api_v1_users_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1UsersUpdateOwnBasicInfo
     *
     * Update Own Basic Information
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfoRequest $post_api_v1_users_update_own_basic_info_request post_api_v1_users_update_own_basic_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1UsersUpdateOwnBasicInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'][0])
    {
        list($response) = $this->postApiV1UsersUpdateOwnBasicInfoWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1UsersUpdateOwnBasicInfoWithHttpInfo
     *
     * Update Own Basic Information
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfoRequest $post_api_v1_users_update_own_basic_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'] to see the possible values for this operation
     *
     * @throws \WebMI\RocketChatApiClient\UserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response|\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1UsersUpdateOwnBasicInfoWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'][0])
    {
        $request = $this->postApiV1UsersUpdateOwnBasicInfoRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\RocketChatApiClient\UserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1UsersUpdateOwnBasicInfoAsync
     *
     * Update Own Basic Information
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfoRequest $post_api_v1_users_update_own_basic_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersUpdateOwnBasicInfoAsync($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'][0])
    {
        return $this->postApiV1UsersUpdateOwnBasicInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1UsersUpdateOwnBasicInfoAsyncWithHttpInfo
     *
     * Update Own Basic Information
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfoRequest $post_api_v1_users_update_own_basic_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1UsersUpdateOwnBasicInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'][0])
    {
        $returnType = '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200Response';
        $request = $this->postApiV1UsersUpdateOwnBasicInfoRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1UsersUpdateOwnBasicInfo'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $x_2fa_code The 2fa code. See &lt;a href&#x3D;\&quot;https://developer.rocket.chat/apidocs/introduction-to-two-factor-authentication\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Introduction to Two-Factor Authentication&lt;/a&gt;. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfoRequest $post_api_v1_users_update_own_basic_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1UsersUpdateOwnBasicInfoRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_users_update_own_basic_info_request = null, string $contentType = self::contentTypes['postApiV1UsersUpdateOwnBasicInfo'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1UsersUpdateOwnBasicInfo'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1UsersUpdateOwnBasicInfo'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1UsersUpdateOwnBasicInfo'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1UsersUpdateOwnBasicInfo'
            );
        }



        $resourcePath = '/api/v1/users.updateOwnBasicInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['x-2fa-code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['x-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_users_update_own_basic_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_users_update_own_basic_info_request));
            } else {
                $httpBody = $post_api_v1_users_update_own_basic_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
