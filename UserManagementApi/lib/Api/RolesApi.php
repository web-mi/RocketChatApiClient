<?php
/**
 * RolesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatUserManagementApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RocketChatUserManagementApi\ApiException;
use RocketChatUserManagementApi\Configuration;
use RocketChatUserManagementApi\HeaderSelector;
use RocketChatUserManagementApi\ObjectSerializer;

/**
 * RolesApi Class Doc Comment
 *
 * @category Class
 * @package  RocketChatUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getApiV1RolesGetUsersInRole' => [
            'application/json',
        ],
        'getApiV1RolesList' => [
            'application/json',
        ],
        'getApiV1RolesSync' => [
            'application/json',
        ],
        'postApiV1RolesAddUserToRole' => [
            'application/json',
        ],
        'postApiV1RolesCreate' => [
            'application/json',
        ],
        'postApiV1RolesDelete' => [
            'application/json',
        ],
        'postApiV1RolesRemoveUserFromRole' => [
            'application/json',
        ],
        'postApiV1RolesUpdate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1RolesGetUsersInRole
     *
     * Get Users of a Role
     *
     * @param  string $role The role name or the role ID. For custom roles, use the role ID. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $room_id The room ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesGetUsersInRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1RolesGetUsersInRole($role, $x_user_id, $x_auth_token, $room_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RolesGetUsersInRole'][0])
    {
        list($response) = $this->getApiV1RolesGetUsersInRoleWithHttpInfo($role, $x_user_id, $x_auth_token, $room_id, $offset, $count, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RolesGetUsersInRoleWithHttpInfo
     *
     * Get Users of a Role
     *
     * @param  string $role The role name or the role ID. For custom roles, use the role ID. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $room_id The room ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesGetUsersInRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RolesGetUsersInRoleWithHttpInfo($role, $x_user_id, $x_auth_token, $room_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RolesGetUsersInRole'][0])
    {
        $request = $this->getApiV1RolesGetUsersInRoleRequest($role, $x_user_id, $x_auth_token, $room_id, $offset, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RolesGetUsersInRoleAsync
     *
     * Get Users of a Role
     *
     * @param  string $role The role name or the role ID. For custom roles, use the role ID. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $room_id The room ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesGetUsersInRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesGetUsersInRoleAsync($role, $x_user_id, $x_auth_token, $room_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RolesGetUsersInRole'][0])
    {
        return $this->getApiV1RolesGetUsersInRoleAsyncWithHttpInfo($role, $x_user_id, $x_auth_token, $room_id, $offset, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RolesGetUsersInRoleAsyncWithHttpInfo
     *
     * Get Users of a Role
     *
     * @param  string $role The role name or the role ID. For custom roles, use the role ID. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $room_id The room ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesGetUsersInRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesGetUsersInRoleAsyncWithHttpInfo($role, $x_user_id, $x_auth_token, $room_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RolesGetUsersInRole'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesGetUsersInRole200Response';
        $request = $this->getApiV1RolesGetUsersInRoleRequest($role, $x_user_id, $x_auth_token, $room_id, $offset, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RolesGetUsersInRole'
     *
     * @param  string $role The role name or the role ID. For custom roles, use the role ID. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $room_id The room ID. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesGetUsersInRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RolesGetUsersInRoleRequest($role, $x_user_id, $x_auth_token, $room_id = null, $offset = null, $count = null, string $contentType = self::contentTypes['getApiV1RolesGetUsersInRole'][0])
    {

        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling getApiV1RolesGetUsersInRole'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RolesGetUsersInRole'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RolesGetUsersInRole'
            );
        }





        $resourcePath = '/api/v1/roles.getUsersInRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role,
            'role', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $room_id,
            'roomId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RolesList
     *
     * Get Roles
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesList'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\GetApiV1RolesList200Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1RolesList($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesList'][0])
    {
        list($response) = $this->getApiV1RolesListWithHttpInfo($x_user_id, $x_auth_token, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RolesListWithHttpInfo
     *
     * Get Roles
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesList'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\GetApiV1RolesList200Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RolesListWithHttpInfo($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesList'][0])
    {
        $request = $this->getApiV1RolesListRequest($x_user_id, $x_auth_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RolesListAsync
     *
     * Get Roles
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesListAsync($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesList'][0])
    {
        return $this->getApiV1RolesListAsyncWithHttpInfo($x_user_id, $x_auth_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RolesListAsyncWithHttpInfo
     *
     * Get Roles
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesListAsyncWithHttpInfo($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesList'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesList200Response';
        $request = $this->getApiV1RolesListRequest($x_user_id, $x_auth_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RolesList'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RolesListRequest($x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesList'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RolesList'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RolesList'
            );
        }


        $resourcePath = '/api/v1/roles.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1RolesSync
     *
     * Get Updated Roles
     *
     * @param  string $updated_since Date as ISO string. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesSync'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response|\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function getApiV1RolesSync($updated_since, $x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesSync'][0])
    {
        list($response) = $this->getApiV1RolesSyncWithHttpInfo($updated_since, $x_user_id, $x_auth_token, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1RolesSyncWithHttpInfo
     *
     * Get Updated Roles
     *
     * @param  string $updated_since Date as ISO string. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesSync'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response|\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1RolesSyncWithHttpInfo($updated_since, $x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesSync'][0])
    {
        $request = $this->getApiV1RolesSyncRequest($updated_since, $x_user_id, $x_auth_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetApiV1RolesSync400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1RolesSyncAsync
     *
     * Get Updated Roles
     *
     * @param  string $updated_since Date as ISO string. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesSync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesSyncAsync($updated_since, $x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesSync'][0])
    {
        return $this->getApiV1RolesSyncAsyncWithHttpInfo($updated_since, $x_user_id, $x_auth_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1RolesSyncAsyncWithHttpInfo
     *
     * Get Updated Roles
     *
     * @param  string $updated_since Date as ISO string. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesSync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1RolesSyncAsyncWithHttpInfo($updated_since, $x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesSync'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\GetApiV1RolesSync200Response';
        $request = $this->getApiV1RolesSyncRequest($updated_since, $x_user_id, $x_auth_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1RolesSync'
     *
     * @param  string $updated_since Date as ISO string. (required)
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1RolesSync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1RolesSyncRequest($updated_since, $x_user_id, $x_auth_token, string $contentType = self::contentTypes['getApiV1RolesSync'][0])
    {

        // verify the required parameter 'updated_since' is set
        if ($updated_since === null || (is_array($updated_since) && count($updated_since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updated_since when calling getApiV1RolesSync'
            );
        }

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1RolesSync'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1RolesSync'
            );
        }


        $resourcePath = '/api/v1/roles.sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_since,
            'updatedSince', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RolesAddUserToRole
     *
     * Assign Role to User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRoleRequest $post_api_v1_roles_add_user_to_role_request By default, the three major room roles are available in Rocket.Chat are **Owner**, **Leader**, and **Moderator**.  [Creating custom roles](https://docs.rocket.chat/use-rocket.chat/user-management/custom-roles) is exclusively available on the Enterprise plan.  Refer to [Roles](https://docs.rocket.chat/setup-and-configure/roles-in-rocket.chat) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesAddUserToRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1RolesAddUserToRole($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request = null, string $contentType = self::contentTypes['postApiV1RolesAddUserToRole'][0])
    {
        list($response) = $this->postApiV1RolesAddUserToRoleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RolesAddUserToRoleWithHttpInfo
     *
     * Assign Role to User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRoleRequest $post_api_v1_roles_add_user_to_role_request By default, the three major room roles are available in Rocket.Chat are **Owner**, **Leader**, and **Moderator**.  [Creating custom roles](https://docs.rocket.chat/use-rocket.chat/user-management/custom-roles) is exclusively available on the Enterprise plan.  Refer to [Roles](https://docs.rocket.chat/setup-and-configure/roles-in-rocket.chat) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesAddUserToRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RolesAddUserToRoleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request = null, string $contentType = self::contentTypes['postApiV1RolesAddUserToRole'][0])
    {
        $request = $this->postApiV1RolesAddUserToRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RolesAddUserToRoleAsync
     *
     * Assign Role to User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRoleRequest $post_api_v1_roles_add_user_to_role_request By default, the three major room roles are available in Rocket.Chat are **Owner**, **Leader**, and **Moderator**.  [Creating custom roles](https://docs.rocket.chat/use-rocket.chat/user-management/custom-roles) is exclusively available on the Enterprise plan.  Refer to [Roles](https://docs.rocket.chat/setup-and-configure/roles-in-rocket.chat) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesAddUserToRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesAddUserToRoleAsync($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request = null, string $contentType = self::contentTypes['postApiV1RolesAddUserToRole'][0])
    {
        return $this->postApiV1RolesAddUserToRoleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RolesAddUserToRoleAsyncWithHttpInfo
     *
     * Assign Role to User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRoleRequest $post_api_v1_roles_add_user_to_role_request By default, the three major room roles are available in Rocket.Chat are **Owner**, **Leader**, and **Moderator**.  [Creating custom roles](https://docs.rocket.chat/use-rocket.chat/user-management/custom-roles) is exclusively available on the Enterprise plan.  Refer to [Roles](https://docs.rocket.chat/setup-and-configure/roles-in-rocket.chat) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesAddUserToRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesAddUserToRoleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request = null, string $contentType = self::contentTypes['postApiV1RolesAddUserToRole'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRole200Response';
        $request = $this->postApiV1RolesAddUserToRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RolesAddUserToRole'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesAddUserToRoleRequest $post_api_v1_roles_add_user_to_role_request By default, the three major room roles are available in Rocket.Chat are **Owner**, **Leader**, and **Moderator**.  [Creating custom roles](https://docs.rocket.chat/use-rocket.chat/user-management/custom-roles) is exclusively available on the Enterprise plan.  Refer to [Roles](https://docs.rocket.chat/setup-and-configure/roles-in-rocket.chat) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesAddUserToRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RolesAddUserToRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_add_user_to_role_request = null, string $contentType = self::contentTypes['postApiV1RolesAddUserToRole'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RolesAddUserToRole'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RolesAddUserToRole'
            );
        }



        $resourcePath = '/api/v1/roles.addUserToRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_roles_add_user_to_role_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_roles_add_user_to_role_request));
            } else {
                $httpBody = $post_api_v1_roles_add_user_to_role_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RolesCreate
     *
     * Create Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesCreateRequest $post_api_v1_roles_create_request post_api_v1_roles_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesCreate'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1RolesCreate($x_user_id, $x_auth_token, $post_api_v1_roles_create_request = null, string $contentType = self::contentTypes['postApiV1RolesCreate'][0])
    {
        list($response) = $this->postApiV1RolesCreateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_create_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RolesCreateWithHttpInfo
     *
     * Create Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesCreateRequest $post_api_v1_roles_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesCreate'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RolesCreateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_create_request = null, string $contentType = self::contentTypes['postApiV1RolesCreate'][0])
    {
        $request = $this->postApiV1RolesCreateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RolesCreateAsync
     *
     * Create Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesCreateRequest $post_api_v1_roles_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesCreateAsync($x_user_id, $x_auth_token, $post_api_v1_roles_create_request = null, string $contentType = self::contentTypes['postApiV1RolesCreate'][0])
    {
        return $this->postApiV1RolesCreateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RolesCreateAsyncWithHttpInfo
     *
     * Create Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesCreateRequest $post_api_v1_roles_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesCreateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_create_request = null, string $contentType = self::contentTypes['postApiV1RolesCreate'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response';
        $request = $this->postApiV1RolesCreateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RolesCreate'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesCreateRequest $post_api_v1_roles_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RolesCreateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_create_request = null, string $contentType = self::contentTypes['postApiV1RolesCreate'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RolesCreate'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RolesCreate'
            );
        }



        $resourcePath = '/api/v1/roles.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_roles_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_roles_create_request));
            } else {
                $httpBody = $post_api_v1_roles_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RolesDelete
     *
     * Delete Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesDeleteRequest $post_api_v1_roles_delete_request post_api_v1_roles_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesDelete'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1RolesDelete($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request = null, string $contentType = self::contentTypes['postApiV1RolesDelete'][0])
    {
        list($response) = $this->postApiV1RolesDeleteWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RolesDeleteWithHttpInfo
     *
     * Delete Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesDeleteRequest $post_api_v1_roles_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesDelete'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RolesDeleteWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request = null, string $contentType = self::contentTypes['postApiV1RolesDelete'][0])
    {
        $request = $this->postApiV1RolesDeleteRequest($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RolesDeleteAsync
     *
     * Delete Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesDeleteRequest $post_api_v1_roles_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesDeleteAsync($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request = null, string $contentType = self::contentTypes['postApiV1RolesDelete'][0])
    {
        return $this->postApiV1RolesDeleteAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RolesDeleteAsyncWithHttpInfo
     *
     * Delete Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesDeleteRequest $post_api_v1_roles_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesDeleteAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request = null, string $contentType = self::contentTypes['postApiV1RolesDelete'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1RolesDeleteRequest($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RolesDelete'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesDeleteRequest $post_api_v1_roles_delete_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RolesDeleteRequest($x_user_id, $x_auth_token, $post_api_v1_roles_delete_request = null, string $contentType = self::contentTypes['postApiV1RolesDelete'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RolesDelete'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RolesDelete'
            );
        }



        $resourcePath = '/api/v1/roles.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_roles_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_roles_delete_request));
            } else {
                $httpBody = $post_api_v1_roles_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RolesRemoveUserFromRole
     *
     * Remove Role from User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesRemoveUserFromRoleRequest $post_api_v1_roles_remove_user_from_role_request post_api_v1_roles_remove_user_from_role_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesRemoveUserFromRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1RolesRemoveUserFromRole($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request = null, string $contentType = self::contentTypes['postApiV1RolesRemoveUserFromRole'][0])
    {
        list($response) = $this->postApiV1RolesRemoveUserFromRoleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RolesRemoveUserFromRoleWithHttpInfo
     *
     * Remove Role from User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesRemoveUserFromRoleRequest $post_api_v1_roles_remove_user_from_role_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesRemoveUserFromRole'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RolesRemoveUserFromRoleWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request = null, string $contentType = self::contentTypes['postApiV1RolesRemoveUserFromRole'][0])
    {
        $request = $this->postApiV1RolesRemoveUserFromRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RolesRemoveUserFromRoleAsync
     *
     * Remove Role from User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesRemoveUserFromRoleRequest $post_api_v1_roles_remove_user_from_role_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesRemoveUserFromRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesRemoveUserFromRoleAsync($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request = null, string $contentType = self::contentTypes['postApiV1RolesRemoveUserFromRole'][0])
    {
        return $this->postApiV1RolesRemoveUserFromRoleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RolesRemoveUserFromRoleAsyncWithHttpInfo
     *
     * Remove Role from User
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesRemoveUserFromRoleRequest $post_api_v1_roles_remove_user_from_role_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesRemoveUserFromRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesRemoveUserFromRoleAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request = null, string $contentType = self::contentTypes['postApiV1RolesRemoveUserFromRole'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesDelete200Response';
        $request = $this->postApiV1RolesRemoveUserFromRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RolesRemoveUserFromRole'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesRemoveUserFromRoleRequest $post_api_v1_roles_remove_user_from_role_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesRemoveUserFromRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RolesRemoveUserFromRoleRequest($x_user_id, $x_auth_token, $post_api_v1_roles_remove_user_from_role_request = null, string $contentType = self::contentTypes['postApiV1RolesRemoveUserFromRole'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RolesRemoveUserFromRole'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RolesRemoveUserFromRole'
            );
        }



        $resourcePath = '/api/v1/roles.removeUserFromRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_roles_remove_user_from_role_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_roles_remove_user_from_role_request));
            } else {
                $httpBody = $post_api_v1_roles_remove_user_from_role_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1RolesUpdate
     *
     * Update Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesUpdateRequest $post_api_v1_roles_update_request post_api_v1_roles_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesUpdate'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response
     */
    public function postApiV1RolesUpdate($x_user_id, $x_auth_token, $post_api_v1_roles_update_request = null, string $contentType = self::contentTypes['postApiV1RolesUpdate'][0])
    {
        list($response) = $this->postApiV1RolesUpdateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_update_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1RolesUpdateWithHttpInfo
     *
     * Update Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesUpdateRequest $post_api_v1_roles_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesUpdate'] to see the possible values for this operation
     *
     * @throws \RocketChatUserManagementApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response|\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response|\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1RolesUpdateWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_update_request = null, string $contentType = self::contentTypes['postApiV1RolesUpdate'][0])
    {
        $request = $this->postApiV1RolesUpdateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\PostApiV1PermissionsUpdate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatUserManagementApi\Model\GetPermissionsListAll401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1RolesUpdateAsync
     *
     * Update Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesUpdateRequest $post_api_v1_roles_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesUpdateAsync($x_user_id, $x_auth_token, $post_api_v1_roles_update_request = null, string $contentType = self::contentTypes['postApiV1RolesUpdate'][0])
    {
        return $this->postApiV1RolesUpdateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1RolesUpdateAsyncWithHttpInfo
     *
     * Update Role
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesUpdateRequest $post_api_v1_roles_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1RolesUpdateAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_roles_update_request = null, string $contentType = self::contentTypes['postApiV1RolesUpdate'][0])
    {
        $returnType = '\RocketChatUserManagementApi\Model\PostApiV1RolesCreate200Response';
        $request = $this->postApiV1RolesUpdateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1RolesUpdate'
     *
     * @param  string $x_user_id The authenticated user ID. (required)
     * @param  string $x_auth_token The authenticated user token. (required)
     * @param  \RocketChatUserManagementApi\Model\PostApiV1RolesUpdateRequest $post_api_v1_roles_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1RolesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1RolesUpdateRequest($x_user_id, $x_auth_token, $post_api_v1_roles_update_request = null, string $contentType = self::contentTypes['postApiV1RolesUpdate'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1RolesUpdate'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1RolesUpdate'
            );
        }



        $resourcePath = '/api/v1/roles.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_roles_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_roles_update_request));
            } else {
                $httpBody = $post_api_v1_roles_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
