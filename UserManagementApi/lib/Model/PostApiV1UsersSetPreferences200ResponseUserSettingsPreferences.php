<?php
/**
 * PostApiV1UsersSetPreferences200ResponseUserSettingsPreferences
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\UserManagementApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\UserManagementApi\ObjectSerializer;

/**
 * PostApiV1UsersSetPreferences200ResponseUserSettingsPreferences Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1UsersSetPreferences200ResponseUserSettingsPreferences implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_users_setPreferences_200_response_user_settings_preferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable_auto_away' => 'bool',
        'idle_time_limit' => 'int',
        'desktop_notification_require_interaction' => 'bool',
        'desktop_notifications' => 'string',
        'push_notifications' => 'string',
        'unread_alert' => 'bool',
        'use_emojis' => 'bool',
        'convert_ascii_emoji' => 'bool',
        'auto_image_load' => 'bool',
        'save_mobile_bandwidth' => 'bool',
        'collapse_media_by_default' => 'bool',
        'hide_usernames' => 'bool',
        'hide_roles' => 'bool',
        'hide_flex_tab' => 'bool',
        'display_avatars' => 'bool',
        'sidebar_group_by_type' => 'bool',
        'sidebar_view_mode' => 'string',
        'sidebar_display_avatar' => 'bool',
        'sidebar_show_unread' => 'bool',
        'sidebar_sortby' => 'string',
        'show_message_in_main_thread' => 'bool',
        'sidebar_show_favorites' => 'bool',
        'send_on_enter' => 'string',
        'message_view_mode' => 'int',
        'email_notification_mode' => 'string',
        'new_room_notification' => 'string',
        'new_message_notification' => 'string',
        'mute_focused_conversations' => 'bool',
        'notifications_sound_volume' => 'int',
        'enable_message_parser_early_adoption' => 'bool',
        'mobile_notifications' => 'string',
        'desktop_notification_duration' => 'int',
        'dont_ask_again_list' => 'object[]',
        'highlights' => 'object[]',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable_auto_away' => null,
        'idle_time_limit' => null,
        'desktop_notification_require_interaction' => null,
        'desktop_notifications' => null,
        'push_notifications' => null,
        'unread_alert' => null,
        'use_emojis' => null,
        'convert_ascii_emoji' => null,
        'auto_image_load' => null,
        'save_mobile_bandwidth' => null,
        'collapse_media_by_default' => null,
        'hide_usernames' => null,
        'hide_roles' => null,
        'hide_flex_tab' => null,
        'display_avatars' => null,
        'sidebar_group_by_type' => null,
        'sidebar_view_mode' => null,
        'sidebar_display_avatar' => null,
        'sidebar_show_unread' => null,
        'sidebar_sortby' => null,
        'show_message_in_main_thread' => null,
        'sidebar_show_favorites' => null,
        'send_on_enter' => null,
        'message_view_mode' => null,
        'email_notification_mode' => null,
        'new_room_notification' => null,
        'new_message_notification' => null,
        'mute_focused_conversations' => null,
        'notifications_sound_volume' => null,
        'enable_message_parser_early_adoption' => null,
        'mobile_notifications' => null,
        'desktop_notification_duration' => null,
        'dont_ask_again_list' => null,
        'highlights' => null,
        'language' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enable_auto_away' => false,
        'idle_time_limit' => false,
        'desktop_notification_require_interaction' => false,
        'desktop_notifications' => false,
        'push_notifications' => false,
        'unread_alert' => false,
        'use_emojis' => false,
        'convert_ascii_emoji' => false,
        'auto_image_load' => false,
        'save_mobile_bandwidth' => false,
        'collapse_media_by_default' => false,
        'hide_usernames' => false,
        'hide_roles' => false,
        'hide_flex_tab' => false,
        'display_avatars' => false,
        'sidebar_group_by_type' => false,
        'sidebar_view_mode' => false,
        'sidebar_display_avatar' => false,
        'sidebar_show_unread' => false,
        'sidebar_sortby' => false,
        'show_message_in_main_thread' => false,
        'sidebar_show_favorites' => false,
        'send_on_enter' => false,
        'message_view_mode' => false,
        'email_notification_mode' => false,
        'new_room_notification' => false,
        'new_message_notification' => false,
        'mute_focused_conversations' => false,
        'notifications_sound_volume' => false,
        'enable_message_parser_early_adoption' => false,
        'mobile_notifications' => false,
        'desktop_notification_duration' => false,
        'dont_ask_again_list' => false,
        'highlights' => false,
        'language' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_auto_away' => 'enableAutoAway',
        'idle_time_limit' => 'idleTimeLimit',
        'desktop_notification_require_interaction' => 'desktopNotificationRequireInteraction',
        'desktop_notifications' => 'desktopNotifications',
        'push_notifications' => 'pushNotifications',
        'unread_alert' => 'unreadAlert',
        'use_emojis' => 'useEmojis',
        'convert_ascii_emoji' => 'convertAsciiEmoji',
        'auto_image_load' => 'autoImageLoad',
        'save_mobile_bandwidth' => 'saveMobileBandwidth',
        'collapse_media_by_default' => 'collapseMediaByDefault',
        'hide_usernames' => 'hideUsernames',
        'hide_roles' => 'hideRoles',
        'hide_flex_tab' => 'hideFlexTab',
        'display_avatars' => 'displayAvatars',
        'sidebar_group_by_type' => 'sidebarGroupByType',
        'sidebar_view_mode' => 'sidebarViewMode',
        'sidebar_display_avatar' => 'sidebarDisplayAvatar',
        'sidebar_show_unread' => 'sidebarShowUnread',
        'sidebar_sortby' => 'sidebarSortby',
        'show_message_in_main_thread' => 'showMessageInMainThread',
        'sidebar_show_favorites' => 'sidebarShowFavorites',
        'send_on_enter' => 'sendOnEnter',
        'message_view_mode' => 'messageViewMode',
        'email_notification_mode' => 'emailNotificationMode',
        'new_room_notification' => 'newRoomNotification',
        'new_message_notification' => 'newMessageNotification',
        'mute_focused_conversations' => 'muteFocusedConversations',
        'notifications_sound_volume' => 'notificationsSoundVolume',
        'enable_message_parser_early_adoption' => 'enableMessageParserEarlyAdoption',
        'mobile_notifications' => 'mobileNotifications',
        'desktop_notification_duration' => 'desktopNotificationDuration',
        'dont_ask_again_list' => 'dontAskAgainList',
        'highlights' => 'highlights',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_auto_away' => 'set_enable_auto_away',
        'idle_time_limit' => 'set_idle_time_limit',
        'desktop_notification_require_interaction' => 'set_desktop_notification_require_interaction',
        'desktop_notifications' => 'set_desktop_notifications',
        'push_notifications' => 'set_push_notifications',
        'unread_alert' => 'set_unread_alert',
        'use_emojis' => 'set_use_emojis',
        'convert_ascii_emoji' => 'set_convert_ascii_emoji',
        'auto_image_load' => 'set_auto_image_load',
        'save_mobile_bandwidth' => 'set_save_mobile_bandwidth',
        'collapse_media_by_default' => 'set_collapse_media_by_default',
        'hide_usernames' => 'set_hide_usernames',
        'hide_roles' => 'set_hide_roles',
        'hide_flex_tab' => 'set_hide_flex_tab',
        'display_avatars' => 'set_display_avatars',
        'sidebar_group_by_type' => 'set_sidebar_group_by_type',
        'sidebar_view_mode' => 'set_sidebar_view_mode',
        'sidebar_display_avatar' => 'set_sidebar_display_avatar',
        'sidebar_show_unread' => 'set_sidebar_show_unread',
        'sidebar_sortby' => 'set_sidebar_sortby',
        'show_message_in_main_thread' => 'set_show_message_in_main_thread',
        'sidebar_show_favorites' => 'set_sidebar_show_favorites',
        'send_on_enter' => 'set_send_on_enter',
        'message_view_mode' => 'set_message_view_mode',
        'email_notification_mode' => 'set_email_notification_mode',
        'new_room_notification' => 'set_new_room_notification',
        'new_message_notification' => 'set_new_message_notification',
        'mute_focused_conversations' => 'set_mute_focused_conversations',
        'notifications_sound_volume' => 'set_notifications_sound_volume',
        'enable_message_parser_early_adoption' => 'set_enable_message_parser_early_adoption',
        'mobile_notifications' => 'set_mobile_notifications',
        'desktop_notification_duration' => 'set_desktop_notification_duration',
        'dont_ask_again_list' => 'set_dont_ask_again_list',
        'highlights' => 'set_highlights',
        'language' => 'set_language'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_auto_away' => 'get_enable_auto_away',
        'idle_time_limit' => 'get_idle_time_limit',
        'desktop_notification_require_interaction' => 'get_desktop_notification_require_interaction',
        'desktop_notifications' => 'get_desktop_notifications',
        'push_notifications' => 'get_push_notifications',
        'unread_alert' => 'get_unread_alert',
        'use_emojis' => 'get_use_emojis',
        'convert_ascii_emoji' => 'get_convert_ascii_emoji',
        'auto_image_load' => 'get_auto_image_load',
        'save_mobile_bandwidth' => 'get_save_mobile_bandwidth',
        'collapse_media_by_default' => 'get_collapse_media_by_default',
        'hide_usernames' => 'get_hide_usernames',
        'hide_roles' => 'get_hide_roles',
        'hide_flex_tab' => 'get_hide_flex_tab',
        'display_avatars' => 'get_display_avatars',
        'sidebar_group_by_type' => 'get_sidebar_group_by_type',
        'sidebar_view_mode' => 'get_sidebar_view_mode',
        'sidebar_display_avatar' => 'get_sidebar_display_avatar',
        'sidebar_show_unread' => 'get_sidebar_show_unread',
        'sidebar_sortby' => 'get_sidebar_sortby',
        'show_message_in_main_thread' => 'get_show_message_in_main_thread',
        'sidebar_show_favorites' => 'get_sidebar_show_favorites',
        'send_on_enter' => 'get_send_on_enter',
        'message_view_mode' => 'get_message_view_mode',
        'email_notification_mode' => 'get_email_notification_mode',
        'new_room_notification' => 'get_new_room_notification',
        'new_message_notification' => 'get_new_message_notification',
        'mute_focused_conversations' => 'get_mute_focused_conversations',
        'notifications_sound_volume' => 'get_notifications_sound_volume',
        'enable_message_parser_early_adoption' => 'get_enable_message_parser_early_adoption',
        'mobile_notifications' => 'get_mobile_notifications',
        'desktop_notification_duration' => 'get_desktop_notification_duration',
        'dont_ask_again_list' => 'get_dont_ask_again_list',
        'highlights' => 'get_highlights',
        'language' => 'get_language'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enable_auto_away', $data ?? [], null);
        $this->setIfExists('idle_time_limit', $data ?? [], null);
        $this->setIfExists('desktop_notification_require_interaction', $data ?? [], null);
        $this->setIfExists('desktop_notifications', $data ?? [], null);
        $this->setIfExists('push_notifications', $data ?? [], null);
        $this->setIfExists('unread_alert', $data ?? [], null);
        $this->setIfExists('use_emojis', $data ?? [], null);
        $this->setIfExists('convert_ascii_emoji', $data ?? [], null);
        $this->setIfExists('auto_image_load', $data ?? [], null);
        $this->setIfExists('save_mobile_bandwidth', $data ?? [], null);
        $this->setIfExists('collapse_media_by_default', $data ?? [], null);
        $this->setIfExists('hide_usernames', $data ?? [], null);
        $this->setIfExists('hide_roles', $data ?? [], null);
        $this->setIfExists('hide_flex_tab', $data ?? [], null);
        $this->setIfExists('display_avatars', $data ?? [], null);
        $this->setIfExists('sidebar_group_by_type', $data ?? [], null);
        $this->setIfExists('sidebar_view_mode', $data ?? [], null);
        $this->setIfExists('sidebar_display_avatar', $data ?? [], null);
        $this->setIfExists('sidebar_show_unread', $data ?? [], null);
        $this->setIfExists('sidebar_sortby', $data ?? [], null);
        $this->setIfExists('show_message_in_main_thread', $data ?? [], null);
        $this->setIfExists('sidebar_show_favorites', $data ?? [], null);
        $this->setIfExists('send_on_enter', $data ?? [], null);
        $this->setIfExists('message_view_mode', $data ?? [], null);
        $this->setIfExists('email_notification_mode', $data ?? [], null);
        $this->setIfExists('new_room_notification', $data ?? [], null);
        $this->setIfExists('new_message_notification', $data ?? [], null);
        $this->setIfExists('mute_focused_conversations', $data ?? [], null);
        $this->setIfExists('notifications_sound_volume', $data ?? [], null);
        $this->setIfExists('enable_message_parser_early_adoption', $data ?? [], null);
        $this->setIfExists('mobile_notifications', $data ?? [], null);
        $this->setIfExists('desktop_notification_duration', $data ?? [], null);
        $this->setIfExists('dont_ask_again_list', $data ?? [], null);
        $this->setIfExists('highlights', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_auto_away
     *
     * @return bool|null
     */
    public function get_enable_auto_away()
    {
        return $this->container['enable_auto_away'];
    }

    /**
     * Sets enable_auto_away
     *
     * @param bool|null $enable_auto_away enable_auto_away
     *
     * @return self
     */
    public function set_enable_auto_away($enable_auto_away)
    {
        if (is_null($enable_auto_away)) {
            throw new \InvalidArgumentException('non-nullable enable_auto_away cannot be null');
        }
        $this->container['enable_auto_away'] = $enable_auto_away;

        return $this;
    }

    /**
     * Gets idle_time_limit
     *
     * @return int|null
     */
    public function get_idle_time_limit()
    {
        return $this->container['idle_time_limit'];
    }

    /**
     * Sets idle_time_limit
     *
     * @param int|null $idle_time_limit idle_time_limit
     *
     * @return self
     */
    public function set_idle_time_limit($idle_time_limit)
    {
        if (is_null($idle_time_limit)) {
            throw new \InvalidArgumentException('non-nullable idle_time_limit cannot be null');
        }
        $this->container['idle_time_limit'] = $idle_time_limit;

        return $this;
    }

    /**
     * Gets desktop_notification_require_interaction
     *
     * @return bool|null
     */
    public function get_desktop_notification_require_interaction()
    {
        return $this->container['desktop_notification_require_interaction'];
    }

    /**
     * Sets desktop_notification_require_interaction
     *
     * @param bool|null $desktop_notification_require_interaction desktop_notification_require_interaction
     *
     * @return self
     */
    public function set_desktop_notification_require_interaction($desktop_notification_require_interaction)
    {
        if (is_null($desktop_notification_require_interaction)) {
            throw new \InvalidArgumentException('non-nullable desktop_notification_require_interaction cannot be null');
        }
        $this->container['desktop_notification_require_interaction'] = $desktop_notification_require_interaction;

        return $this;
    }

    /**
     * Gets desktop_notifications
     *
     * @return string|null
     */
    public function get_desktop_notifications()
    {
        return $this->container['desktop_notifications'];
    }

    /**
     * Sets desktop_notifications
     *
     * @param string|null $desktop_notifications desktop_notifications
     *
     * @return self
     */
    public function set_desktop_notifications($desktop_notifications)
    {
        if (is_null($desktop_notifications)) {
            throw new \InvalidArgumentException('non-nullable desktop_notifications cannot be null');
        }
        $this->container['desktop_notifications'] = $desktop_notifications;

        return $this;
    }

    /**
     * Gets push_notifications
     *
     * @return string|null
     */
    public function get_push_notifications()
    {
        return $this->container['push_notifications'];
    }

    /**
     * Sets push_notifications
     *
     * @param string|null $push_notifications push_notifications
     *
     * @return self
     */
    public function set_push_notifications($push_notifications)
    {
        if (is_null($push_notifications)) {
            throw new \InvalidArgumentException('non-nullable push_notifications cannot be null');
        }
        $this->container['push_notifications'] = $push_notifications;

        return $this;
    }

    /**
     * Gets unread_alert
     *
     * @return bool|null
     */
    public function get_unread_alert()
    {
        return $this->container['unread_alert'];
    }

    /**
     * Sets unread_alert
     *
     * @param bool|null $unread_alert unread_alert
     *
     * @return self
     */
    public function set_unread_alert($unread_alert)
    {
        if (is_null($unread_alert)) {
            throw new \InvalidArgumentException('non-nullable unread_alert cannot be null');
        }
        $this->container['unread_alert'] = $unread_alert;

        return $this;
    }

    /**
     * Gets use_emojis
     *
     * @return bool|null
     */
    public function get_use_emojis()
    {
        return $this->container['use_emojis'];
    }

    /**
     * Sets use_emojis
     *
     * @param bool|null $use_emojis use_emojis
     *
     * @return self
     */
    public function set_use_emojis($use_emojis)
    {
        if (is_null($use_emojis)) {
            throw new \InvalidArgumentException('non-nullable use_emojis cannot be null');
        }
        $this->container['use_emojis'] = $use_emojis;

        return $this;
    }

    /**
     * Gets convert_ascii_emoji
     *
     * @return bool|null
     */
    public function get_convert_ascii_emoji()
    {
        return $this->container['convert_ascii_emoji'];
    }

    /**
     * Sets convert_ascii_emoji
     *
     * @param bool|null $convert_ascii_emoji convert_ascii_emoji
     *
     * @return self
     */
    public function set_convert_ascii_emoji($convert_ascii_emoji)
    {
        if (is_null($convert_ascii_emoji)) {
            throw new \InvalidArgumentException('non-nullable convert_ascii_emoji cannot be null');
        }
        $this->container['convert_ascii_emoji'] = $convert_ascii_emoji;

        return $this;
    }

    /**
     * Gets auto_image_load
     *
     * @return bool|null
     */
    public function get_auto_image_load()
    {
        return $this->container['auto_image_load'];
    }

    /**
     * Sets auto_image_load
     *
     * @param bool|null $auto_image_load auto_image_load
     *
     * @return self
     */
    public function set_auto_image_load($auto_image_load)
    {
        if (is_null($auto_image_load)) {
            throw new \InvalidArgumentException('non-nullable auto_image_load cannot be null');
        }
        $this->container['auto_image_load'] = $auto_image_load;

        return $this;
    }

    /**
     * Gets save_mobile_bandwidth
     *
     * @return bool|null
     */
    public function get_save_mobile_bandwidth()
    {
        return $this->container['save_mobile_bandwidth'];
    }

    /**
     * Sets save_mobile_bandwidth
     *
     * @param bool|null $save_mobile_bandwidth save_mobile_bandwidth
     *
     * @return self
     */
    public function set_save_mobile_bandwidth($save_mobile_bandwidth)
    {
        if (is_null($save_mobile_bandwidth)) {
            throw new \InvalidArgumentException('non-nullable save_mobile_bandwidth cannot be null');
        }
        $this->container['save_mobile_bandwidth'] = $save_mobile_bandwidth;

        return $this;
    }

    /**
     * Gets collapse_media_by_default
     *
     * @return bool|null
     */
    public function get_collapse_media_by_default()
    {
        return $this->container['collapse_media_by_default'];
    }

    /**
     * Sets collapse_media_by_default
     *
     * @param bool|null $collapse_media_by_default collapse_media_by_default
     *
     * @return self
     */
    public function set_collapse_media_by_default($collapse_media_by_default)
    {
        if (is_null($collapse_media_by_default)) {
            throw new \InvalidArgumentException('non-nullable collapse_media_by_default cannot be null');
        }
        $this->container['collapse_media_by_default'] = $collapse_media_by_default;

        return $this;
    }

    /**
     * Gets hide_usernames
     *
     * @return bool|null
     */
    public function get_hide_usernames()
    {
        return $this->container['hide_usernames'];
    }

    /**
     * Sets hide_usernames
     *
     * @param bool|null $hide_usernames hide_usernames
     *
     * @return self
     */
    public function set_hide_usernames($hide_usernames)
    {
        if (is_null($hide_usernames)) {
            throw new \InvalidArgumentException('non-nullable hide_usernames cannot be null');
        }
        $this->container['hide_usernames'] = $hide_usernames;

        return $this;
    }

    /**
     * Gets hide_roles
     *
     * @return bool|null
     */
    public function get_hide_roles()
    {
        return $this->container['hide_roles'];
    }

    /**
     * Sets hide_roles
     *
     * @param bool|null $hide_roles hide_roles
     *
     * @return self
     */
    public function set_hide_roles($hide_roles)
    {
        if (is_null($hide_roles)) {
            throw new \InvalidArgumentException('non-nullable hide_roles cannot be null');
        }
        $this->container['hide_roles'] = $hide_roles;

        return $this;
    }

    /**
     * Gets hide_flex_tab
     *
     * @return bool|null
     */
    public function get_hide_flex_tab()
    {
        return $this->container['hide_flex_tab'];
    }

    /**
     * Sets hide_flex_tab
     *
     * @param bool|null $hide_flex_tab hide_flex_tab
     *
     * @return self
     */
    public function set_hide_flex_tab($hide_flex_tab)
    {
        if (is_null($hide_flex_tab)) {
            throw new \InvalidArgumentException('non-nullable hide_flex_tab cannot be null');
        }
        $this->container['hide_flex_tab'] = $hide_flex_tab;

        return $this;
    }

    /**
     * Gets display_avatars
     *
     * @return bool|null
     */
    public function get_display_avatars()
    {
        return $this->container['display_avatars'];
    }

    /**
     * Sets display_avatars
     *
     * @param bool|null $display_avatars display_avatars
     *
     * @return self
     */
    public function set_display_avatars($display_avatars)
    {
        if (is_null($display_avatars)) {
            throw new \InvalidArgumentException('non-nullable display_avatars cannot be null');
        }
        $this->container['display_avatars'] = $display_avatars;

        return $this;
    }

    /**
     * Gets sidebar_group_by_type
     *
     * @return bool|null
     */
    public function get_sidebar_group_by_type()
    {
        return $this->container['sidebar_group_by_type'];
    }

    /**
     * Sets sidebar_group_by_type
     *
     * @param bool|null $sidebar_group_by_type sidebar_group_by_type
     *
     * @return self
     */
    public function set_sidebar_group_by_type($sidebar_group_by_type)
    {
        if (is_null($sidebar_group_by_type)) {
            throw new \InvalidArgumentException('non-nullable sidebar_group_by_type cannot be null');
        }
        $this->container['sidebar_group_by_type'] = $sidebar_group_by_type;

        return $this;
    }

    /**
     * Gets sidebar_view_mode
     *
     * @return string|null
     */
    public function get_sidebar_view_mode()
    {
        return $this->container['sidebar_view_mode'];
    }

    /**
     * Sets sidebar_view_mode
     *
     * @param string|null $sidebar_view_mode sidebar_view_mode
     *
     * @return self
     */
    public function set_sidebar_view_mode($sidebar_view_mode)
    {
        if (is_null($sidebar_view_mode)) {
            throw new \InvalidArgumentException('non-nullable sidebar_view_mode cannot be null');
        }
        $this->container['sidebar_view_mode'] = $sidebar_view_mode;

        return $this;
    }

    /**
     * Gets sidebar_display_avatar
     *
     * @return bool|null
     */
    public function get_sidebar_display_avatar()
    {
        return $this->container['sidebar_display_avatar'];
    }

    /**
     * Sets sidebar_display_avatar
     *
     * @param bool|null $sidebar_display_avatar sidebar_display_avatar
     *
     * @return self
     */
    public function set_sidebar_display_avatar($sidebar_display_avatar)
    {
        if (is_null($sidebar_display_avatar)) {
            throw new \InvalidArgumentException('non-nullable sidebar_display_avatar cannot be null');
        }
        $this->container['sidebar_display_avatar'] = $sidebar_display_avatar;

        return $this;
    }

    /**
     * Gets sidebar_show_unread
     *
     * @return bool|null
     */
    public function get_sidebar_show_unread()
    {
        return $this->container['sidebar_show_unread'];
    }

    /**
     * Sets sidebar_show_unread
     *
     * @param bool|null $sidebar_show_unread sidebar_show_unread
     *
     * @return self
     */
    public function set_sidebar_show_unread($sidebar_show_unread)
    {
        if (is_null($sidebar_show_unread)) {
            throw new \InvalidArgumentException('non-nullable sidebar_show_unread cannot be null');
        }
        $this->container['sidebar_show_unread'] = $sidebar_show_unread;

        return $this;
    }

    /**
     * Gets sidebar_sortby
     *
     * @return string|null
     */
    public function get_sidebar_sortby()
    {
        return $this->container['sidebar_sortby'];
    }

    /**
     * Sets sidebar_sortby
     *
     * @param string|null $sidebar_sortby sidebar_sortby
     *
     * @return self
     */
    public function set_sidebar_sortby($sidebar_sortby)
    {
        if (is_null($sidebar_sortby)) {
            throw new \InvalidArgumentException('non-nullable sidebar_sortby cannot be null');
        }
        $this->container['sidebar_sortby'] = $sidebar_sortby;

        return $this;
    }

    /**
     * Gets show_message_in_main_thread
     *
     * @return bool|null
     */
    public function get_show_message_in_main_thread()
    {
        return $this->container['show_message_in_main_thread'];
    }

    /**
     * Sets show_message_in_main_thread
     *
     * @param bool|null $show_message_in_main_thread show_message_in_main_thread
     *
     * @return self
     */
    public function set_show_message_in_main_thread($show_message_in_main_thread)
    {
        if (is_null($show_message_in_main_thread)) {
            throw new \InvalidArgumentException('non-nullable show_message_in_main_thread cannot be null');
        }
        $this->container['show_message_in_main_thread'] = $show_message_in_main_thread;

        return $this;
    }

    /**
     * Gets sidebar_show_favorites
     *
     * @return bool|null
     */
    public function get_sidebar_show_favorites()
    {
        return $this->container['sidebar_show_favorites'];
    }

    /**
     * Sets sidebar_show_favorites
     *
     * @param bool|null $sidebar_show_favorites sidebar_show_favorites
     *
     * @return self
     */
    public function set_sidebar_show_favorites($sidebar_show_favorites)
    {
        if (is_null($sidebar_show_favorites)) {
            throw new \InvalidArgumentException('non-nullable sidebar_show_favorites cannot be null');
        }
        $this->container['sidebar_show_favorites'] = $sidebar_show_favorites;

        return $this;
    }

    /**
     * Gets send_on_enter
     *
     * @return string|null
     */
    public function get_send_on_enter()
    {
        return $this->container['send_on_enter'];
    }

    /**
     * Sets send_on_enter
     *
     * @param string|null $send_on_enter send_on_enter
     *
     * @return self
     */
    public function set_send_on_enter($send_on_enter)
    {
        if (is_null($send_on_enter)) {
            throw new \InvalidArgumentException('non-nullable send_on_enter cannot be null');
        }
        $this->container['send_on_enter'] = $send_on_enter;

        return $this;
    }

    /**
     * Gets message_view_mode
     *
     * @return int|null
     */
    public function get_message_view_mode()
    {
        return $this->container['message_view_mode'];
    }

    /**
     * Sets message_view_mode
     *
     * @param int|null $message_view_mode message_view_mode
     *
     * @return self
     */
    public function set_message_view_mode($message_view_mode)
    {
        if (is_null($message_view_mode)) {
            throw new \InvalidArgumentException('non-nullable message_view_mode cannot be null');
        }
        $this->container['message_view_mode'] = $message_view_mode;

        return $this;
    }

    /**
     * Gets email_notification_mode
     *
     * @return string|null
     */
    public function get_email_notification_mode()
    {
        return $this->container['email_notification_mode'];
    }

    /**
     * Sets email_notification_mode
     *
     * @param string|null $email_notification_mode email_notification_mode
     *
     * @return self
     */
    public function set_email_notification_mode($email_notification_mode)
    {
        if (is_null($email_notification_mode)) {
            throw new \InvalidArgumentException('non-nullable email_notification_mode cannot be null');
        }
        $this->container['email_notification_mode'] = $email_notification_mode;

        return $this;
    }

    /**
     * Gets new_room_notification
     *
     * @return string|null
     */
    public function get_new_room_notification()
    {
        return $this->container['new_room_notification'];
    }

    /**
     * Sets new_room_notification
     *
     * @param string|null $new_room_notification new_room_notification
     *
     * @return self
     */
    public function set_new_room_notification($new_room_notification)
    {
        if (is_null($new_room_notification)) {
            throw new \InvalidArgumentException('non-nullable new_room_notification cannot be null');
        }
        $this->container['new_room_notification'] = $new_room_notification;

        return $this;
    }

    /**
     * Gets new_message_notification
     *
     * @return string|null
     */
    public function get_new_message_notification()
    {
        return $this->container['new_message_notification'];
    }

    /**
     * Sets new_message_notification
     *
     * @param string|null $new_message_notification new_message_notification
     *
     * @return self
     */
    public function set_new_message_notification($new_message_notification)
    {
        if (is_null($new_message_notification)) {
            throw new \InvalidArgumentException('non-nullable new_message_notification cannot be null');
        }
        $this->container['new_message_notification'] = $new_message_notification;

        return $this;
    }

    /**
     * Gets mute_focused_conversations
     *
     * @return bool|null
     */
    public function get_mute_focused_conversations()
    {
        return $this->container['mute_focused_conversations'];
    }

    /**
     * Sets mute_focused_conversations
     *
     * @param bool|null $mute_focused_conversations mute_focused_conversations
     *
     * @return self
     */
    public function set_mute_focused_conversations($mute_focused_conversations)
    {
        if (is_null($mute_focused_conversations)) {
            throw new \InvalidArgumentException('non-nullable mute_focused_conversations cannot be null');
        }
        $this->container['mute_focused_conversations'] = $mute_focused_conversations;

        return $this;
    }

    /**
     * Gets notifications_sound_volume
     *
     * @return int|null
     */
    public function get_notifications_sound_volume()
    {
        return $this->container['notifications_sound_volume'];
    }

    /**
     * Sets notifications_sound_volume
     *
     * @param int|null $notifications_sound_volume notifications_sound_volume
     *
     * @return self
     */
    public function set_notifications_sound_volume($notifications_sound_volume)
    {
        if (is_null($notifications_sound_volume)) {
            throw new \InvalidArgumentException('non-nullable notifications_sound_volume cannot be null');
        }
        $this->container['notifications_sound_volume'] = $notifications_sound_volume;

        return $this;
    }

    /**
     * Gets enable_message_parser_early_adoption
     *
     * @return bool|null
     */
    public function get_enable_message_parser_early_adoption()
    {
        return $this->container['enable_message_parser_early_adoption'];
    }

    /**
     * Sets enable_message_parser_early_adoption
     *
     * @param bool|null $enable_message_parser_early_adoption enable_message_parser_early_adoption
     *
     * @return self
     */
    public function set_enable_message_parser_early_adoption($enable_message_parser_early_adoption)
    {
        if (is_null($enable_message_parser_early_adoption)) {
            throw new \InvalidArgumentException('non-nullable enable_message_parser_early_adoption cannot be null');
        }
        $this->container['enable_message_parser_early_adoption'] = $enable_message_parser_early_adoption;

        return $this;
    }

    /**
     * Gets mobile_notifications
     *
     * @return string|null
     */
    public function get_mobile_notifications()
    {
        return $this->container['mobile_notifications'];
    }

    /**
     * Sets mobile_notifications
     *
     * @param string|null $mobile_notifications mobile_notifications
     *
     * @return self
     */
    public function set_mobile_notifications($mobile_notifications)
    {
        if (is_null($mobile_notifications)) {
            throw new \InvalidArgumentException('non-nullable mobile_notifications cannot be null');
        }
        $this->container['mobile_notifications'] = $mobile_notifications;

        return $this;
    }

    /**
     * Gets desktop_notification_duration
     *
     * @return int|null
     */
    public function get_desktop_notification_duration()
    {
        return $this->container['desktop_notification_duration'];
    }

    /**
     * Sets desktop_notification_duration
     *
     * @param int|null $desktop_notification_duration desktop_notification_duration
     *
     * @return self
     */
    public function set_desktop_notification_duration($desktop_notification_duration)
    {
        if (is_null($desktop_notification_duration)) {
            throw new \InvalidArgumentException('non-nullable desktop_notification_duration cannot be null');
        }
        $this->container['desktop_notification_duration'] = $desktop_notification_duration;

        return $this;
    }

    /**
     * Gets dont_ask_again_list
     *
     * @return object[]|null
     */
    public function get_dont_ask_again_list()
    {
        return $this->container['dont_ask_again_list'];
    }

    /**
     * Sets dont_ask_again_list
     *
     * @param object[]|null $dont_ask_again_list dont_ask_again_list
     *
     * @return self
     */
    public function set_dont_ask_again_list($dont_ask_again_list)
    {
        if (is_null($dont_ask_again_list)) {
            throw new \InvalidArgumentException('non-nullable dont_ask_again_list cannot be null');
        }
        $this->container['dont_ask_again_list'] = $dont_ask_again_list;

        return $this;
    }

    /**
     * Gets highlights
     *
     * @return object[]|null
     */
    public function get_highlights()
    {
        return $this->container['highlights'];
    }

    /**
     * Sets highlights
     *
     * @param object[]|null $highlights highlights
     *
     * @return self
     */
    public function set_highlights($highlights)
    {
        if (is_null($highlights)) {
            throw new \InvalidArgumentException('non-nullable highlights cannot be null');
        }
        $this->container['highlights'] = $highlights;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function get_language()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function set_language($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


