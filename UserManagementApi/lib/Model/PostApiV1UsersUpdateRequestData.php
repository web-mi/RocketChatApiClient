<?php
/**
 * PostApiV1UsersUpdateRequestData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\UserManagementApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\UserManagementApi\ObjectSerializer;

/**
 * PostApiV1UsersUpdateRequestData Class Doc Comment
 *
 * @category Class
 * @description The object that includes the user information to update with the following parameters. Note: If you provide an empty object, the user details are returned.
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1UsersUpdateRequestData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_users_update_request_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'email' => 'string',
        'password' => 'string',
        'username' => 'string',
        'active' => 'bool',
        'roles' => 'string[]',
        'join_default_channels' => 'bool',
        'require_password_change' => 'bool',
        'send_welcome_email' => 'bool',
        'verified' => 'bool',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'email' => null,
        'password' => null,
        'username' => null,
        'active' => null,
        'roles' => null,
        'join_default_channels' => null,
        'require_password_change' => null,
        'send_welcome_email' => null,
        'verified' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'email' => false,
        'password' => false,
        'username' => false,
        'active' => false,
        'roles' => false,
        'join_default_channels' => false,
        'require_password_change' => false,
        'send_welcome_email' => false,
        'verified' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'password' => 'password',
        'username' => 'username',
        'active' => 'active',
        'roles' => 'roles',
        'join_default_channels' => 'joinDefaultChannels',
        'require_password_change' => 'requirePasswordChange',
        'send_welcome_email' => 'sendWelcomeEmail',
        'verified' => 'verified',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'set_name',
        'email' => 'set_email',
        'password' => 'set_password',
        'username' => 'set_username',
        'active' => 'set_active',
        'roles' => 'set_roles',
        'join_default_channels' => 'set_join_default_channels',
        'require_password_change' => 'set_require_password_change',
        'send_welcome_email' => 'set_send_welcome_email',
        'verified' => 'set_verified',
        'custom_fields' => 'set_custom_fields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'get_name',
        'email' => 'get_email',
        'password' => 'get_password',
        'username' => 'get_username',
        'active' => 'get_active',
        'roles' => 'get_roles',
        'join_default_channels' => 'get_join_default_channels',
        'require_password_change' => 'get_require_password_change',
        'send_welcome_email' => 'get_send_welcome_email',
        'verified' => 'get_verified',
        'custom_fields' => 'get_custom_fields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('join_default_channels', $data ?? [], true);
        $this->setIfExists('require_password_change', $data ?? [], false);
        $this->setIfExists('send_welcome_email', $data ?? [], false);
        $this->setIfExists('verified', $data ?? [], true);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the user.
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function get_email()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email ID of the user.
     *
     * @return self
     */
    public function set_email($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function get_password()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password The password for the user.
     *
     * @return self
     */
    public function set_password($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function get_username()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The username for the user.
     *
     * @return self
     */
    public function set_username($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function get_active()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Whether the user is active, which determines if they can login or not.
     *
     * @return self
     */
    public function set_active($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function get_roles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles The roles the user has been assigned.
     *
     * @return self
     */
    public function set_roles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets join_default_channels
     *
     * @return bool|null
     */
    public function get_join_default_channels()
    {
        return $this->container['join_default_channels'];
    }

    /**
     * Sets join_default_channels
     *
     * @param bool|null $join_default_channels Whether the user should join the default channels.
     *
     * @return self
     */
    public function set_join_default_channels($join_default_channels)
    {
        if (is_null($join_default_channels)) {
            throw new \InvalidArgumentException('non-nullable join_default_channels cannot be null');
        }
        $this->container['join_default_channels'] = $join_default_channels;

        return $this;
    }

    /**
     * Gets require_password_change
     *
     * @return bool|null
     */
    public function get_require_password_change()
    {
        return $this->container['require_password_change'];
    }

    /**
     * Sets require_password_change
     *
     * @param bool|null $require_password_change Whether the user should be required to change their password when they login.
     *
     * @return self
     */
    public function set_require_password_change($require_password_change)
    {
        if (is_null($require_password_change)) {
            throw new \InvalidArgumentException('non-nullable require_password_change cannot be null');
        }
        $this->container['require_password_change'] = $require_password_change;

        return $this;
    }

    /**
     * Gets send_welcome_email
     *
     * @return bool|null
     */
    public function get_send_welcome_email()
    {
        return $this->container['send_welcome_email'];
    }

    /**
     * Sets send_welcome_email
     *
     * @param bool|null $send_welcome_email Whether the user should get a welcome email.
     *
     * @return self
     */
    public function set_send_welcome_email($send_welcome_email)
    {
        if (is_null($send_welcome_email)) {
            throw new \InvalidArgumentException('non-nullable send_welcome_email cannot be null');
        }
        $this->container['send_welcome_email'] = $send_welcome_email;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function get_verified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified Whether the user's email address should be verified.
     *
     * @return self
     */
    public function set_verified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function get_custom_fields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields Any custom fields the user should have on their account. To save custom fields, you must first define the custom fields in the admin panel (Administration > Settings > Accounts > Registration > Custom Fields). For details on how to configure this field, see [Custom Fields](https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/accounts/custom-fields). For information on how to view the custom fields, see the [Get Users List](https://developer.rocket.chat/reference/api/rest-api/endpoints/user-management/users-endpoints/get-users-list) endpoint.
     *
     * @return self
     */
    public function set_custom_fields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


