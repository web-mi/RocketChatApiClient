<?php
/**
 * GetApiV1UsersRequestDataDownload200ResponseExportOperation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMIRocketChatApiClientUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMIRocketChatApiClientUserManagementApi\Model;

use \ArrayAccess;
use \WebMIRocketChatApiClientUserManagementApi\ObjectSerializer;

/**
 * GetApiV1UsersRequestDataDownload200ResponseExportOperation Class Doc Comment
 *
 * @category Class
 * @package  WebMIRocketChatApiClientUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1UsersRequestDataDownload200ResponseExportOperation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_users_requestDataDownload_200_response_exportOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'created_at' => 'string',
        'user_id' => 'string',
        'room_list' => '\WebMIRocketChatApiClientUserManagementApi\Model\GetApiV1UsersRequestDataDownload200ResponseExportOperationRoomListInner[]',
        'status' => 'string',
        'export_path' => 'string',
        'assets_path' => 'string',
        'file_list' => 'object[]',
        'generated_file' => 'string',
        'full_export' => 'bool',
        '_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'created_at' => null,
        'user_id' => null,
        'room_list' => null,
        'status' => null,
        'export_path' => null,
        'assets_path' => null,
        'file_list' => null,
        'generated_file' => null,
        'full_export' => null,
        '_updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'created_at' => false,
        'user_id' => false,
        'room_list' => false,
        'status' => false,
        'export_path' => false,
        'assets_path' => false,
        'file_list' => false,
        'generated_file' => false,
        'full_export' => false,
        '_updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'created_at' => 'createdAt',
        'user_id' => 'userId',
        'room_list' => 'roomList',
        'status' => 'status',
        'export_path' => 'exportPath',
        'assets_path' => 'assetsPath',
        'file_list' => 'fileList',
        'generated_file' => 'generatedFile',
        'full_export' => 'fullExport',
        '_updated_at' => '_updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'created_at' => 'setCreatedAt',
        'user_id' => 'setUserId',
        'room_list' => 'setRoomList',
        'status' => 'setStatus',
        'export_path' => 'setExportPath',
        'assets_path' => 'setAssetsPath',
        'file_list' => 'setFileList',
        'generated_file' => 'setGeneratedFile',
        'full_export' => 'setFullExport',
        '_updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'created_at' => 'getCreatedAt',
        'user_id' => 'getUserId',
        'room_list' => 'getRoomList',
        'status' => 'getStatus',
        'export_path' => 'getExportPath',
        'assets_path' => 'getAssetsPath',
        'file_list' => 'getFileList',
        'generated_file' => 'getGeneratedFile',
        'full_export' => 'getFullExport',
        '_updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('room_list', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('export_path', $data ?? [], null);
        $this->setIfExists('assets_path', $data ?? [], null);
        $this->setIfExists('file_list', $data ?? [], null);
        $this->setIfExists('generated_file', $data ?? [], null);
        $this->setIfExists('full_export', $data ?? [], null);
        $this->setIfExists('_updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets room_list
     *
     * @return \WebMIRocketChatApiClientUserManagementApi\Model\GetApiV1UsersRequestDataDownload200ResponseExportOperationRoomListInner[]|null
     */
    public function getRoomList()
    {
        return $this->container['room_list'];
    }

    /**
     * Sets room_list
     *
     * @param \WebMIRocketChatApiClientUserManagementApi\Model\GetApiV1UsersRequestDataDownload200ResponseExportOperationRoomListInner[]|null $room_list room_list
     *
     * @return self
     */
    public function setRoomList($room_list)
    {
        if (is_null($room_list)) {
            throw new \InvalidArgumentException('non-nullable room_list cannot be null');
        }
        $this->container['room_list'] = $room_list;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets export_path
     *
     * @return string|null
     */
    public function getExportPath()
    {
        return $this->container['export_path'];
    }

    /**
     * Sets export_path
     *
     * @param string|null $export_path export_path
     *
     * @return self
     */
    public function setExportPath($export_path)
    {
        if (is_null($export_path)) {
            throw new \InvalidArgumentException('non-nullable export_path cannot be null');
        }
        $this->container['export_path'] = $export_path;

        return $this;
    }

    /**
     * Gets assets_path
     *
     * @return string|null
     */
    public function getAssetsPath()
    {
        return $this->container['assets_path'];
    }

    /**
     * Sets assets_path
     *
     * @param string|null $assets_path assets_path
     *
     * @return self
     */
    public function setAssetsPath($assets_path)
    {
        if (is_null($assets_path)) {
            throw new \InvalidArgumentException('non-nullable assets_path cannot be null');
        }
        $this->container['assets_path'] = $assets_path;

        return $this;
    }

    /**
     * Gets file_list
     *
     * @return object[]|null
     */
    public function getFileList()
    {
        return $this->container['file_list'];
    }

    /**
     * Sets file_list
     *
     * @param object[]|null $file_list file_list
     *
     * @return self
     */
    public function setFileList($file_list)
    {
        if (is_null($file_list)) {
            throw new \InvalidArgumentException('non-nullable file_list cannot be null');
        }
        $this->container['file_list'] = $file_list;

        return $this;
    }

    /**
     * Gets generated_file
     *
     * @return string|null
     */
    public function getGeneratedFile()
    {
        return $this->container['generated_file'];
    }

    /**
     * Sets generated_file
     *
     * @param string|null $generated_file generated_file
     *
     * @return self
     */
    public function setGeneratedFile($generated_file)
    {
        if (is_null($generated_file)) {
            throw new \InvalidArgumentException('non-nullable generated_file cannot be null');
        }
        $this->container['generated_file'] = $generated_file;

        return $this;
    }

    /**
     * Gets full_export
     *
     * @return bool|null
     */
    public function getFullExport()
    {
        return $this->container['full_export'];
    }

    /**
     * Sets full_export
     *
     * @param bool|null $full_export full_export
     *
     * @return self
     */
    public function setFullExport($full_export)
    {
        if (is_null($full_export)) {
            throw new \InvalidArgumentException('non-nullable full_export cannot be null');
        }
        $this->container['full_export'] = $full_export;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string|null $_updated_at _updated_at
     *
     * @return self
     */
    public function setUpdatedAt($_updated_at)
    {
        if (is_null($_updated_at)) {
            throw new \InvalidArgumentException('non-nullable _updated_at cannot be null');
        }
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


