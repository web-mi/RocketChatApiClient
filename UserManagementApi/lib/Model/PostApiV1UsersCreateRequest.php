<?php
/**
 * PostApiV1UsersCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatUserManagementApi\Model;

use \ArrayAccess;
use \RocketChatUserManagementApi\ObjectSerializer;

/**
 * PostApiV1UsersCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  RocketChatUserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1UsersCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_users_create_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'email' => 'string',
        'password' => 'string',
        'username' => 'string',
        'active' => 'bool',
        'nickname' => 'string',
        'bio' => 'string',
        'join_default_channels' => 'bool',
        'status_text' => 'string',
        'roles' => 'string[]',
        'require_password_change' => 'bool',
        'set_random_password' => 'bool',
        'send_welcome_email' => 'bool',
        'verified' => 'bool',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'email' => null,
        'password' => null,
        'username' => null,
        'active' => null,
        'nickname' => null,
        'bio' => null,
        'join_default_channels' => null,
        'status_text' => null,
        'roles' => null,
        'require_password_change' => null,
        'set_random_password' => null,
        'send_welcome_email' => null,
        'verified' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'email' => false,
        'password' => false,
        'username' => false,
        'active' => false,
        'nickname' => false,
        'bio' => false,
        'join_default_channels' => false,
        'status_text' => false,
        'roles' => false,
        'require_password_change' => false,
        'set_random_password' => false,
        'send_welcome_email' => false,
        'verified' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'password' => 'password',
        'username' => 'username',
        'active' => 'active',
        'nickname' => 'nickname',
        'bio' => 'bio',
        'join_default_channels' => 'joinDefaultChannels',
        'status_text' => 'statusText',
        'roles' => 'roles',
        'require_password_change' => 'requirePasswordChange',
        'set_random_password' => 'setRandomPassword',
        'send_welcome_email' => 'sendWelcomeEmail',
        'verified' => 'verified',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'username' => 'setUsername',
        'active' => 'setActive',
        'nickname' => 'setNickname',
        'bio' => 'setBio',
        'join_default_channels' => 'setJoinDefaultChannels',
        'status_text' => 'setStatusText',
        'roles' => 'setRoles',
        'require_password_change' => 'setRequirePasswordChange',
        'set_random_password' => 'setSetRandomPassword',
        'send_welcome_email' => 'setSendWelcomeEmail',
        'verified' => 'setVerified',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'username' => 'getUsername',
        'active' => 'getActive',
        'nickname' => 'getNickname',
        'bio' => 'getBio',
        'join_default_channels' => 'getJoinDefaultChannels',
        'status_text' => 'getStatusText',
        'roles' => 'getRoles',
        'require_password_change' => 'getRequirePasswordChange',
        'set_random_password' => 'getSetRandomPassword',
        'send_welcome_email' => 'getSendWelcomeEmail',
        'verified' => 'getVerified',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('bio', $data ?? [], null);
        $this->setIfExists('join_default_channels', $data ?? [], true);
        $this->setIfExists('status_text', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('require_password_change', $data ?? [], false);
        $this->setIfExists('set_random_password', $data ?? [], false);
        $this->setIfExists('send_welcome_email', $data ?? [], false);
        $this->setIfExists('verified', $data ?? [], false);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The display name of the user.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address for the user.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password for the user.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The username for the user.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Set the users' active status.  If the user is deactivated, they can not login. By default, the user is active.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname The nickname for the user.
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string|null
     */
    public function getBio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string|null $bio The bio for the user.
     *
     * @return self
     */
    public function setBio($bio)
    {
        if (is_null($bio)) {
            throw new \InvalidArgumentException('non-nullable bio cannot be null');
        }
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets join_default_channels
     *
     * @return bool|null
     */
    public function getJoinDefaultChannels()
    {
        return $this->container['join_default_channels'];
    }

    /**
     * Sets join_default_channels
     *
     * @param bool|null $join_default_channels Select whether users should automatically join default channels once they are created. By default, it is set to `true`.
     *
     * @return self
     */
    public function setJoinDefaultChannels($join_default_channels)
    {
        if (is_null($join_default_channels)) {
            throw new \InvalidArgumentException('non-nullable join_default_channels cannot be null');
        }
        $this->container['join_default_channels'] = $join_default_channels;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string|null
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string|null $status_text The status text of the user.
     *
     * @return self
     */
    public function setStatusText($status_text)
    {
        if (is_null($status_text)) {
            throw new \InvalidArgumentException('non-nullable status_text cannot be null');
        }
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles The roles to be assigned to this user. If it is not specified, the `user` role is assigned by default. **Note:** * For default roles, the role name and ID are the same. For custom roles, the name and ID are different.  * If you are setting a custom role for a user, make sure to enter the custom role ID, and not the role name. Refer to [Roles](https://docs.rocket.chat/use-rocket.chat/workspace-administration/permissions#roles) for more information.
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets require_password_change
     *
     * @return bool|null
     */
    public function getRequirePasswordChange()
    {
        return $this->container['require_password_change'];
    }

    /**
     * Sets require_password_change
     *
     * @param bool|null $require_password_change Should the user be required to change their password when they login? It is set to `false` by default
     *
     * @return self
     */
    public function setRequirePasswordChange($require_password_change)
    {
        if (is_null($require_password_change)) {
            throw new \InvalidArgumentException('non-nullable require_password_change cannot be null');
        }
        $this->container['require_password_change'] = $require_password_change;

        return $this;
    }

    /**
     * Gets set_random_password
     *
     * @return bool|null
     */
    public function getSetRandomPassword()
    {
        return $this->container['set_random_password'];
    }

    /**
     * Sets set_random_password
     *
     * @param bool|null $set_random_password Should the user be assigned a random password once they are created? It is set to `false` by defualt.
     *
     * @return self
     */
    public function setSetRandomPassword($set_random_password)
    {
        if (is_null($set_random_password)) {
            throw new \InvalidArgumentException('non-nullable set_random_password cannot be null');
        }
        $this->container['set_random_password'] = $set_random_password;

        return $this;
    }

    /**
     * Gets send_welcome_email
     *
     * @return bool|null
     */
    public function getSendWelcomeEmail()
    {
        return $this->container['send_welcome_email'];
    }

    /**
     * Sets send_welcome_email
     *
     * @param bool|null $send_welcome_email Should the user get a welcome email? It is set to `true` by default.
     *
     * @return self
     */
    public function setSendWelcomeEmail($send_welcome_email)
    {
        if (is_null($send_welcome_email)) {
            throw new \InvalidArgumentException('non-nullable send_welcome_email cannot be null');
        }
        $this->container['send_welcome_email'] = $send_welcome_email;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified Should the user's email address be verified when created? It is set to `false` by default.
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields A valid JSON object of key-value pairs consisting of additional fields to be added during user registration. By default, the value is `undefined`. To save custom fields, you must first define them in the [workspace admin settings](https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/accounts/custom-fields). For information on how to view the custom fields, see the [Get Users List](https://developer.rocket.chat/reference/api/rest-api/endpoints/user-management/users-endpoints/get-users-list) endpoint.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


