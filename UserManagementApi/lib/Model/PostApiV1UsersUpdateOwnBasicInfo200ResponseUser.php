<?php
/**
 * PostApiV1UsersUpdateOwnBasicInfo200ResponseUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\UserManagementApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\UserManagementApi\ObjectSerializer;

/**
 * PostApiV1UsersUpdateOwnBasicInfo200ResponseUser Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\UserManagementApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1UsersUpdateOwnBasicInfo200ResponseUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_users_updateOwnBasicInfo_200_response_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'created_at' => 'string',
        'services' => '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserServices',
        'username' => 'string',
        'emails' => '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200ResponseUserEmailsInner[]',
        'type' => 'string',
        'status' => 'string',
        'active' => 'bool',
        '_updated_at' => 'string',
        '__rooms' => 'string[]',
        'roles' => 'string[]',
        'name' => 'string',
        'settings' => '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserSettings',
        'last_login' => 'string',
        'status_connection' => 'string',
        'utc_offset' => 'int',
        'banners' => '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserBanners',
        'status_default' => 'string',
        'status_text' => 'string',
        'operator' => 'bool',
        'livechat_status_system_modified' => 'bool',
        'status_livechat' => 'string',
        'livechat_count' => 'int',
        'livechat' => '\WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserLivechat',
        'bio' => 'string',
        'nickname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'created_at' => null,
        'services' => null,
        'username' => null,
        'emails' => null,
        'type' => null,
        'status' => null,
        'active' => null,
        '_updated_at' => null,
        '__rooms' => null,
        'roles' => null,
        'name' => null,
        'settings' => null,
        'last_login' => null,
        'status_connection' => null,
        'utc_offset' => null,
        'banners' => null,
        'status_default' => null,
        'status_text' => null,
        'operator' => null,
        'livechat_status_system_modified' => null,
        'status_livechat' => null,
        'livechat_count' => null,
        'livechat' => null,
        'bio' => null,
        'nickname' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'created_at' => false,
        'services' => false,
        'username' => false,
        'emails' => false,
        'type' => false,
        'status' => false,
        'active' => false,
        '_updated_at' => false,
        '__rooms' => false,
        'roles' => false,
        'name' => false,
        'settings' => false,
        'last_login' => false,
        'status_connection' => false,
        'utc_offset' => false,
        'banners' => false,
        'status_default' => false,
        'status_text' => false,
        'operator' => false,
        'livechat_status_system_modified' => false,
        'status_livechat' => false,
        'livechat_count' => false,
        'livechat' => false,
        'bio' => false,
        'nickname' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'created_at' => 'createdAt',
        'services' => 'services',
        'username' => 'username',
        'emails' => 'emails',
        'type' => 'type',
        'status' => 'status',
        'active' => 'active',
        '_updated_at' => '_updatedAt',
        '__rooms' => '__rooms',
        'roles' => 'roles',
        'name' => 'name',
        'settings' => 'settings',
        'last_login' => 'lastLogin',
        'status_connection' => 'statusConnection',
        'utc_offset' => 'utcOffset',
        'banners' => 'banners',
        'status_default' => 'statusDefault',
        'status_text' => 'statusText',
        'operator' => 'operator',
        'livechat_status_system_modified' => 'livechatStatusSystemModified',
        'status_livechat' => 'statusLivechat',
        'livechat_count' => 'livechatCount',
        'livechat' => 'livechat',
        'bio' => 'bio',
        'nickname' => 'nickname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'set__id',
        'created_at' => 'set_created_at',
        'services' => 'set_services',
        'username' => 'set_username',
        'emails' => 'set_emails',
        'type' => 'set_type',
        'status' => 'set_status',
        'active' => 'set_active',
        '_updated_at' => 'set__updated_at',
        '__rooms' => 'set___rooms',
        'roles' => 'set_roles',
        'name' => 'set_name',
        'settings' => 'set_settings',
        'last_login' => 'set_last_login',
        'status_connection' => 'set_status_connection',
        'utc_offset' => 'set_utc_offset',
        'banners' => 'set_banners',
        'status_default' => 'set_status_default',
        'status_text' => 'set_status_text',
        'operator' => 'set_operator',
        'livechat_status_system_modified' => 'set_livechat_status_system_modified',
        'status_livechat' => 'set_status_livechat',
        'livechat_count' => 'set_livechat_count',
        'livechat' => 'set_livechat',
        'bio' => 'set_bio',
        'nickname' => 'set_nickname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'get__id',
        'created_at' => 'get_created_at',
        'services' => 'get_services',
        'username' => 'get_username',
        'emails' => 'get_emails',
        'type' => 'get_type',
        'status' => 'get_status',
        'active' => 'get_active',
        '_updated_at' => 'get__updated_at',
        '__rooms' => 'get___rooms',
        'roles' => 'get_roles',
        'name' => 'get_name',
        'settings' => 'get_settings',
        'last_login' => 'get_last_login',
        'status_connection' => 'get_status_connection',
        'utc_offset' => 'get_utc_offset',
        'banners' => 'get_banners',
        'status_default' => 'get_status_default',
        'status_text' => 'get_status_text',
        'operator' => 'get_operator',
        'livechat_status_system_modified' => 'get_livechat_status_system_modified',
        'status_livechat' => 'get_status_livechat',
        'livechat_count' => 'get_livechat_count',
        'livechat' => 'get_livechat',
        'bio' => 'get_bio',
        'nickname' => 'get_nickname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('_updated_at', $data ?? [], null);
        $this->setIfExists('__rooms', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('last_login', $data ?? [], null);
        $this->setIfExists('status_connection', $data ?? [], null);
        $this->setIfExists('utc_offset', $data ?? [], null);
        $this->setIfExists('banners', $data ?? [], null);
        $this->setIfExists('status_default', $data ?? [], null);
        $this->setIfExists('status_text', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('livechat_status_system_modified', $data ?? [], null);
        $this->setIfExists('status_livechat', $data ?? [], null);
        $this->setIfExists('livechat_count', $data ?? [], null);
        $this->setIfExists('livechat', $data ?? [], null);
        $this->setIfExists('bio', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function get__id()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function set__id($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function get_created_at()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function set_created_at($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserServices|null
     */
    public function get_services()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserServices|null $services services
     *
     * @return self
     */
    public function set_services($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function get_username()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function set_username($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200ResponseUserEmailsInner[]|null
     */
    public function get_emails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersCreate200ResponseUserEmailsInner[]|null $emails emails
     *
     * @return self
     */
    public function set_emails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function get_status()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function set_status($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function get_active()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function set_active($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string|null
     */
    public function get__updated_at()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string|null $_updated_at _updated_at
     *
     * @return self
     */
    public function set__updated_at($_updated_at)
    {
        if (is_null($_updated_at)) {
            throw new \InvalidArgumentException('non-nullable _updated_at cannot be null');
        }
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets __rooms
     *
     * @return string[]|null
     */
    public function get___rooms()
    {
        return $this->container['__rooms'];
    }

    /**
     * Sets __rooms
     *
     * @param string[]|null $__rooms __rooms
     *
     * @return self
     */
    public function set___rooms($__rooms)
    {
        if (is_null($__rooms)) {
            throw new \InvalidArgumentException('non-nullable __rooms cannot be null');
        }
        $this->container['__rooms'] = $__rooms;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function get_roles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function set_roles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserSettings|null
     */
    public function get_settings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserSettings|null $settings settings
     *
     * @return self
     */
    public function set_settings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return string|null
     */
    public function get_last_login()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param string|null $last_login last_login
     *
     * @return self
     */
    public function set_last_login($last_login)
    {
        if (is_null($last_login)) {
            throw new \InvalidArgumentException('non-nullable last_login cannot be null');
        }
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets status_connection
     *
     * @return string|null
     */
    public function get_status_connection()
    {
        return $this->container['status_connection'];
    }

    /**
     * Sets status_connection
     *
     * @param string|null $status_connection status_connection
     *
     * @return self
     */
    public function set_status_connection($status_connection)
    {
        if (is_null($status_connection)) {
            throw new \InvalidArgumentException('non-nullable status_connection cannot be null');
        }
        $this->container['status_connection'] = $status_connection;

        return $this;
    }

    /**
     * Gets utc_offset
     *
     * @return int|null
     */
    public function get_utc_offset()
    {
        return $this->container['utc_offset'];
    }

    /**
     * Sets utc_offset
     *
     * @param int|null $utc_offset utc_offset
     *
     * @return self
     */
    public function set_utc_offset($utc_offset)
    {
        if (is_null($utc_offset)) {
            throw new \InvalidArgumentException('non-nullable utc_offset cannot be null');
        }
        $this->container['utc_offset'] = $utc_offset;

        return $this;
    }

    /**
     * Gets banners
     *
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserBanners|null
     */
    public function get_banners()
    {
        return $this->container['banners'];
    }

    /**
     * Sets banners
     *
     * @param \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserBanners|null $banners banners
     *
     * @return self
     */
    public function set_banners($banners)
    {
        if (is_null($banners)) {
            throw new \InvalidArgumentException('non-nullable banners cannot be null');
        }
        $this->container['banners'] = $banners;

        return $this;
    }

    /**
     * Gets status_default
     *
     * @return string|null
     */
    public function get_status_default()
    {
        return $this->container['status_default'];
    }

    /**
     * Sets status_default
     *
     * @param string|null $status_default status_default
     *
     * @return self
     */
    public function set_status_default($status_default)
    {
        if (is_null($status_default)) {
            throw new \InvalidArgumentException('non-nullable status_default cannot be null');
        }
        $this->container['status_default'] = $status_default;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string|null
     */
    public function get_status_text()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string|null $status_text status_text
     *
     * @return self
     */
    public function set_status_text($status_text)
    {
        if (is_null($status_text)) {
            throw new \InvalidArgumentException('non-nullable status_text cannot be null');
        }
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return bool|null
     */
    public function get_operator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param bool|null $operator operator
     *
     * @return self
     */
    public function set_operator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets livechat_status_system_modified
     *
     * @return bool|null
     */
    public function get_livechat_status_system_modified()
    {
        return $this->container['livechat_status_system_modified'];
    }

    /**
     * Sets livechat_status_system_modified
     *
     * @param bool|null $livechat_status_system_modified livechat_status_system_modified
     *
     * @return self
     */
    public function set_livechat_status_system_modified($livechat_status_system_modified)
    {
        if (is_null($livechat_status_system_modified)) {
            throw new \InvalidArgumentException('non-nullable livechat_status_system_modified cannot be null');
        }
        $this->container['livechat_status_system_modified'] = $livechat_status_system_modified;

        return $this;
    }

    /**
     * Gets status_livechat
     *
     * @return string|null
     */
    public function get_status_livechat()
    {
        return $this->container['status_livechat'];
    }

    /**
     * Sets status_livechat
     *
     * @param string|null $status_livechat status_livechat
     *
     * @return self
     */
    public function set_status_livechat($status_livechat)
    {
        if (is_null($status_livechat)) {
            throw new \InvalidArgumentException('non-nullable status_livechat cannot be null');
        }
        $this->container['status_livechat'] = $status_livechat;

        return $this;
    }

    /**
     * Gets livechat_count
     *
     * @return int|null
     */
    public function get_livechat_count()
    {
        return $this->container['livechat_count'];
    }

    /**
     * Sets livechat_count
     *
     * @param int|null $livechat_count livechat_count
     *
     * @return self
     */
    public function set_livechat_count($livechat_count)
    {
        if (is_null($livechat_count)) {
            throw new \InvalidArgumentException('non-nullable livechat_count cannot be null');
        }
        $this->container['livechat_count'] = $livechat_count;

        return $this;
    }

    /**
     * Gets livechat
     *
     * @return \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserLivechat|null
     */
    public function get_livechat()
    {
        return $this->container['livechat'];
    }

    /**
     * Sets livechat
     *
     * @param \WebMI\RocketChatApiClient\UserManagementApi\Model\PostApiV1UsersUpdateOwnBasicInfo200ResponseUserLivechat|null $livechat livechat
     *
     * @return self
     */
    public function set_livechat($livechat)
    {
        if (is_null($livechat)) {
            throw new \InvalidArgumentException('non-nullable livechat cannot be null');
        }
        $this->container['livechat'] = $livechat;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string|null
     */
    public function get_bio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string|null $bio bio
     *
     * @return self
     */
    public function set_bio($bio)
    {
        if (is_null($bio)) {
            throw new \InvalidArgumentException('non-nullable bio cannot be null');
        }
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function get_nickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function set_nickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


