<?php
/**
 * GetApiV1Statistics200ResponseSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\StatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\StatisticsApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\StatisticsApi\ObjectSerializer;

/**
 * GetApiV1Statistics200ResponseSettings Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\StatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1Statistics200ResponseSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_statistics_200_response_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsAccounts',
        'canned_responses' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsCannedResponses',
        'e2ee' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsE2ee',
        'email' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsEmail',
        'file_upload' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsFileUpload',
        'general' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsGeneral',
        'live_stream_and_broadcasting' => 'object',
        'message' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsMessage',
        'otr' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsOtr',
        'push' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsPush',
        'search' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsSearch',
        'threads' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsThreads',
        'web_rtc' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsWebRTC'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts' => null,
        'canned_responses' => null,
        'e2ee' => null,
        'email' => null,
        'file_upload' => null,
        'general' => null,
        'live_stream_and_broadcasting' => null,
        'message' => null,
        'otr' => null,
        'push' => null,
        'search' => null,
        'threads' => null,
        'web_rtc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounts' => false,
        'canned_responses' => false,
        'e2ee' => false,
        'email' => false,
        'file_upload' => false,
        'general' => false,
        'live_stream_and_broadcasting' => false,
        'message' => false,
        'otr' => false,
        'push' => false,
        'search' => false,
        'threads' => false,
        'web_rtc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'canned_responses' => 'cannedResponses',
        'e2ee' => 'e2ee',
        'email' => 'email',
        'file_upload' => 'fileUpload',
        'general' => 'general',
        'live_stream_and_broadcasting' => 'liveStreamAndBroadcasting',
        'message' => 'message',
        'otr' => 'otr',
        'push' => 'push',
        'search' => 'search',
        'threads' => 'threads',
        'web_rtc' => 'webRTC'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'canned_responses' => 'setCannedResponses',
        'e2ee' => 'setE2ee',
        'email' => 'setEmail',
        'file_upload' => 'setFileUpload',
        'general' => 'setGeneral',
        'live_stream_and_broadcasting' => 'setLiveStreamAndBroadcasting',
        'message' => 'setMessage',
        'otr' => 'setOtr',
        'push' => 'setPush',
        'search' => 'setSearch',
        'threads' => 'setThreads',
        'web_rtc' => 'setWebRtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'canned_responses' => 'getCannedResponses',
        'e2ee' => 'getE2ee',
        'email' => 'getEmail',
        'file_upload' => 'getFileUpload',
        'general' => 'getGeneral',
        'live_stream_and_broadcasting' => 'getLiveStreamAndBroadcasting',
        'message' => 'getMessage',
        'otr' => 'getOtr',
        'push' => 'getPush',
        'search' => 'getSearch',
        'threads' => 'getThreads',
        'web_rtc' => 'getWebRtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('canned_responses', $data ?? [], null);
        $this->setIfExists('e2ee', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('file_upload', $data ?? [], null);
        $this->setIfExists('general', $data ?? [], null);
        $this->setIfExists('live_stream_and_broadcasting', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('otr', $data ?? [], null);
        $this->setIfExists('push', $data ?? [], null);
        $this->setIfExists('search', $data ?? [], null);
        $this->setIfExists('threads', $data ?? [], null);
        $this->setIfExists('web_rtc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsAccounts|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsAccounts|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets canned_responses
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsCannedResponses|null
     */
    public function getCannedResponses()
    {
        return $this->container['canned_responses'];
    }

    /**
     * Sets canned_responses
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsCannedResponses|null $canned_responses canned_responses
     *
     * @return self
     */
    public function setCannedResponses($canned_responses)
    {
        if (is_null($canned_responses)) {
            throw new \InvalidArgumentException('non-nullable canned_responses cannot be null');
        }
        $this->container['canned_responses'] = $canned_responses;

        return $this;
    }

    /**
     * Gets e2ee
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsE2ee|null
     */
    public function getE2ee()
    {
        return $this->container['e2ee'];
    }

    /**
     * Sets e2ee
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsE2ee|null $e2ee e2ee
     *
     * @return self
     */
    public function setE2ee($e2ee)
    {
        if (is_null($e2ee)) {
            throw new \InvalidArgumentException('non-nullable e2ee cannot be null');
        }
        $this->container['e2ee'] = $e2ee;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsEmail|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsEmail|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets file_upload
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsFileUpload|null
     */
    public function getFileUpload()
    {
        return $this->container['file_upload'];
    }

    /**
     * Sets file_upload
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsFileUpload|null $file_upload file_upload
     *
     * @return self
     */
    public function setFileUpload($file_upload)
    {
        if (is_null($file_upload)) {
            throw new \InvalidArgumentException('non-nullable file_upload cannot be null');
        }
        $this->container['file_upload'] = $file_upload;

        return $this;
    }

    /**
     * Gets general
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsGeneral|null
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsGeneral|null $general general
     *
     * @return self
     */
    public function setGeneral($general)
    {
        if (is_null($general)) {
            throw new \InvalidArgumentException('non-nullable general cannot be null');
        }
        $this->container['general'] = $general;

        return $this;
    }

    /**
     * Gets live_stream_and_broadcasting
     *
     * @return object|null
     */
    public function getLiveStreamAndBroadcasting()
    {
        return $this->container['live_stream_and_broadcasting'];
    }

    /**
     * Sets live_stream_and_broadcasting
     *
     * @param object|null $live_stream_and_broadcasting live_stream_and_broadcasting
     *
     * @return self
     */
    public function setLiveStreamAndBroadcasting($live_stream_and_broadcasting)
    {
        if (is_null($live_stream_and_broadcasting)) {
            throw new \InvalidArgumentException('non-nullable live_stream_and_broadcasting cannot be null');
        }
        $this->container['live_stream_and_broadcasting'] = $live_stream_and_broadcasting;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsMessage|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsMessage|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets otr
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsOtr|null
     */
    public function getOtr()
    {
        return $this->container['otr'];
    }

    /**
     * Sets otr
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsOtr|null $otr otr
     *
     * @return self
     */
    public function setOtr($otr)
    {
        if (is_null($otr)) {
            throw new \InvalidArgumentException('non-nullable otr cannot be null');
        }
        $this->container['otr'] = $otr;

        return $this;
    }

    /**
     * Gets push
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsPush|null
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsPush|null $push push
     *
     * @return self
     */
    public function setPush($push)
    {
        if (is_null($push)) {
            throw new \InvalidArgumentException('non-nullable push cannot be null');
        }
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsSearch|null
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsSearch|null $search search
     *
     * @return self
     */
    public function setSearch($search)
    {
        if (is_null($search)) {
            throw new \InvalidArgumentException('non-nullable search cannot be null');
        }
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsThreads|null
     */
    public function getThreads()
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsThreads|null $threads threads
     *
     * @return self
     */
    public function setThreads($threads)
    {
        if (is_null($threads)) {
            throw new \InvalidArgumentException('non-nullable threads cannot be null');
        }
        $this->container['threads'] = $threads;

        return $this;
    }

    /**
     * Gets web_rtc
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsWebRTC|null
     */
    public function getWebRtc()
    {
        return $this->container['web_rtc'];
    }

    /**
     * Sets web_rtc
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1Statistics200ResponseSettingsWebRTC|null $web_rtc web_rtc
     *
     * @return self
     */
    public function setWebRtc($web_rtc)
    {
        if (is_null($web_rtc)) {
            throw new \InvalidArgumentException('non-nullable web_rtc cannot be null');
        }
        $this->container['web_rtc'] = $web_rtc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


