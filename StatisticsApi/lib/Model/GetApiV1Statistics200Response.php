<?php
/**
 * GetApiV1Statistics200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMIRocketChatApiClientStatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMIRocketChatApiClientStatisticsApi\Model;

use \ArrayAccess;
use \WebMIRocketChatApiClientStatisticsApi\ObjectSerializer;

/**
 * GetApiV1Statistics200Response Class Doc Comment
 *
 * @category Class
 * @package  WebMIRocketChatApiClientStatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1Statistics200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_statistics_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'wizard' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard',
        'unique_id' => 'string',
        'installed_at' => 'string',
        'deployment_fingerprint_hash' => 'string',
        'deployment_fingerprint_verified' => 'bool',
        'version' => 'string',
        'total_users' => 'int',
        'active_users' => 'int',
        'active_guests' => 'int',
        'non_active_users' => 'int',
        'app_users' => 'int',
        'online_users' => 'int',
        'away_users' => 'int',
        'busy_users' => 'int',
        'total_connected_users' => 'int',
        'offline_users' => 'int',
        'user_languages' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages',
        'total_rooms' => 'int',
        'total_channels' => 'int',
        'total_private_groups' => 'int',
        'total_direct' => 'int',
        'total_livechat' => 'int',
        'total_discussions' => 'int',
        'total_threads' => 'int',
        'total_livechat_visitors' => 'int',
        'total_livechat_agents' => 'int',
        'total_livechat_managers' => 'int',
        'livechat_enabled' => 'bool',
        'is_department_removal_enabled' => 'bool',
        'total_triggers' => 'int',
        'archived_departments' => 'int',
        'departments' => 'int',
        'total_custom_fields' => 'int',
        'omnichannel_sources' => 'object[]',
        'total_livechat_public_custom_fields' => 'int',
        'livechat_automatic_forwarding_unanswered_chats' => 'bool',
        'routing_algorithm' => 'string',
        'on_hold_enabled' => 'bool',
        'last_chatted_agent_preferred' => 'bool',
        'assign_new_conversations_to_contact_manager' => 'bool',
        'visitor_abandonment' => 'string',
        'voip_enabled' => 'bool',
        'email_inboxes' => 'int',
        'business_hours' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours',
        'voip_calls' => 'int',
        'voip_extensions' => 'int',
        'chats_on_hold' => 'int',
        'voip_successful_calls' => 'int',
        'voip_error_calls' => 'int',
        'voip_on_hold_calls' => 'int',
        'omnichannel_contacts_by_source' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource',
        'unique_contacts_of_last_week' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource',
        'unique_contacts_of_last_month' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource',
        'unique_contacts_of_yesterday' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource',
        'total_channel_messages' => 'int',
        'total_private_group_messages' => 'int',
        'total_discussions_messages' => 'int',
        'total_direct_messages' => 'int',
        'total_livechat_messages' => 'int',
        'total_messages' => 'int',
        'last_login' => 'string',
        'last_message_sent_at' => 'string',
        'federated_servers' => 'int',
        'federated_users' => 'int',
        'last_seen_subscription' => 'string',
        'os' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOs',
        'process' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess',
        'deploy' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy',
        'read_receipts_enabled' => 'bool',
        'read_receipts_detailed' => 'bool',
        'enterprise_ready' => 'bool',
        'uploads_total' => 'int',
        'migration' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMigration',
        'uploads_total_size' => 'int',
        'instance_count' => 'int',
        'ms_enabled' => 'bool',
        'oplog_enabled' => 'bool',
        'mongo_version' => 'string',
        'mongo_storage_engine' => 'string',
        'apps' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseApps',
        'unique_users_of_yesterday' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday',
        'unique_devices_of_yesterday' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday',
        'unique_users_of_last_week' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek',
        'unique_osof_yesterday' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday',
        'unique_devices_of_last_month' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth',
        'unique_osof_last_week' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek',
        'unique_devices_of_last_week' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth',
        'unique_users_of_last_month' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek',
        'unique_osof_last_month' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek',
        'services' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseServices',
        'importer' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter',
        'video_conf' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseVideoConf',
        'dashboard_count' => 'int',
        'message_audit_apply' => 'int',
        'message_audit_load' => 'int',
        'join_jitsi_button' => 'int',
        'slash_commands_jitsi' => 'int',
        'settings' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseSettings',
        'push_queue' => 'int',
        'total_otr_rooms' => 'int',
        'total_otr' => 'int',
        'integrations' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations',
        'total_broadcast_rooms' => 'int',
        'enterprise' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseEnterprise',
        'teams' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams',
        'total_rooms_with_active_livestream' => 'int',
        'total_triggered_emails' => 'int',
        'total_rooms_with_starred' => 'int',
        'total_rooms_with_pinned' => 'int',
        'total_user_totp' => 'int',
        'total_user_email2fa' => 'int',
        'total_pinned' => 'int',
        'total_starred' => 'int',
        'total_link_invitation' => 'int',
        'total_link_invitation_uses' => 'int',
        'total_email_invitation' => 'int',
        'total_e2_e_rooms' => 'int',
        'logo_change' => 'bool',
        'show_home_button' => 'bool',
        'total_encrypted_messages' => 'int',
        'total_manually_added_users' => 'int',
        'total_subscription_roles' => 'int',
        'total_user_roles' => 'int',
        'total_custom_roles' => 'int',
        'total_web_rtc_calls' => 'int',
        'uncaught_exceptions_count' => 'int',
        'push' => 'int',
        'push_secured' => 'bool',
        'home_title_changed' => 'bool',
        'home_body_changed' => 'bool',
        'custom_css_changed' => 'bool',
        'on_logout_custom_script_changed' => 'bool',
        'logged_out_custom_script_changed' => 'bool',
        'logged_in_custom_script_changed' => 'bool',
        'daily_peak_connections' => 'int',
        'max_monthly_peak_connections' => 'int',
        'matrix_federation' => '\WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMatrixFederation',
        'web_rtc_enabled' => 'bool',
        'web_rtc_enabled_for_omnichannel' => 'bool',
        'omnichannel_web_rtc_calls' => 'int',
        'created_at' => 'string',
        '_updated_at' => 'string',
        'stats_token' => 'string',
        'success' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'wizard' => null,
        'unique_id' => null,
        'installed_at' => null,
        'deployment_fingerprint_hash' => null,
        'deployment_fingerprint_verified' => null,
        'version' => null,
        'total_users' => null,
        'active_users' => null,
        'active_guests' => null,
        'non_active_users' => null,
        'app_users' => null,
        'online_users' => null,
        'away_users' => null,
        'busy_users' => null,
        'total_connected_users' => null,
        'offline_users' => null,
        'user_languages' => null,
        'total_rooms' => null,
        'total_channels' => null,
        'total_private_groups' => null,
        'total_direct' => null,
        'total_livechat' => null,
        'total_discussions' => null,
        'total_threads' => null,
        'total_livechat_visitors' => null,
        'total_livechat_agents' => null,
        'total_livechat_managers' => null,
        'livechat_enabled' => null,
        'is_department_removal_enabled' => null,
        'total_triggers' => null,
        'archived_departments' => null,
        'departments' => null,
        'total_custom_fields' => null,
        'omnichannel_sources' => null,
        'total_livechat_public_custom_fields' => null,
        'livechat_automatic_forwarding_unanswered_chats' => null,
        'routing_algorithm' => null,
        'on_hold_enabled' => null,
        'last_chatted_agent_preferred' => null,
        'assign_new_conversations_to_contact_manager' => null,
        'visitor_abandonment' => null,
        'voip_enabled' => null,
        'email_inboxes' => null,
        'business_hours' => null,
        'voip_calls' => null,
        'voip_extensions' => null,
        'chats_on_hold' => null,
        'voip_successful_calls' => null,
        'voip_error_calls' => null,
        'voip_on_hold_calls' => null,
        'omnichannel_contacts_by_source' => null,
        'unique_contacts_of_last_week' => null,
        'unique_contacts_of_last_month' => null,
        'unique_contacts_of_yesterday' => null,
        'total_channel_messages' => null,
        'total_private_group_messages' => null,
        'total_discussions_messages' => null,
        'total_direct_messages' => null,
        'total_livechat_messages' => null,
        'total_messages' => null,
        'last_login' => null,
        'last_message_sent_at' => null,
        'federated_servers' => null,
        'federated_users' => null,
        'last_seen_subscription' => null,
        'os' => null,
        'process' => null,
        'deploy' => null,
        'read_receipts_enabled' => null,
        'read_receipts_detailed' => null,
        'enterprise_ready' => null,
        'uploads_total' => null,
        'migration' => null,
        'uploads_total_size' => null,
        'instance_count' => null,
        'ms_enabled' => null,
        'oplog_enabled' => null,
        'mongo_version' => null,
        'mongo_storage_engine' => null,
        'apps' => null,
        'unique_users_of_yesterday' => null,
        'unique_devices_of_yesterday' => null,
        'unique_users_of_last_week' => null,
        'unique_osof_yesterday' => null,
        'unique_devices_of_last_month' => null,
        'unique_osof_last_week' => null,
        'unique_devices_of_last_week' => null,
        'unique_users_of_last_month' => null,
        'unique_osof_last_month' => null,
        'services' => null,
        'importer' => null,
        'video_conf' => null,
        'dashboard_count' => null,
        'message_audit_apply' => null,
        'message_audit_load' => null,
        'join_jitsi_button' => null,
        'slash_commands_jitsi' => null,
        'settings' => null,
        'push_queue' => null,
        'total_otr_rooms' => null,
        'total_otr' => null,
        'integrations' => null,
        'total_broadcast_rooms' => null,
        'enterprise' => null,
        'teams' => null,
        'total_rooms_with_active_livestream' => null,
        'total_triggered_emails' => null,
        'total_rooms_with_starred' => null,
        'total_rooms_with_pinned' => null,
        'total_user_totp' => null,
        'total_user_email2fa' => null,
        'total_pinned' => null,
        'total_starred' => null,
        'total_link_invitation' => null,
        'total_link_invitation_uses' => null,
        'total_email_invitation' => null,
        'total_e2_e_rooms' => null,
        'logo_change' => null,
        'show_home_button' => null,
        'total_encrypted_messages' => null,
        'total_manually_added_users' => null,
        'total_subscription_roles' => null,
        'total_user_roles' => null,
        'total_custom_roles' => null,
        'total_web_rtc_calls' => null,
        'uncaught_exceptions_count' => null,
        'push' => null,
        'push_secured' => null,
        'home_title_changed' => null,
        'home_body_changed' => null,
        'custom_css_changed' => null,
        'on_logout_custom_script_changed' => null,
        'logged_out_custom_script_changed' => null,
        'logged_in_custom_script_changed' => null,
        'daily_peak_connections' => null,
        'max_monthly_peak_connections' => null,
        'matrix_federation' => null,
        'web_rtc_enabled' => null,
        'web_rtc_enabled_for_omnichannel' => null,
        'omnichannel_web_rtc_calls' => null,
        'created_at' => null,
        '_updated_at' => null,
        'stats_token' => null,
        'success' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'wizard' => false,
        'unique_id' => false,
        'installed_at' => false,
        'deployment_fingerprint_hash' => false,
        'deployment_fingerprint_verified' => false,
        'version' => false,
        'total_users' => false,
        'active_users' => false,
        'active_guests' => false,
        'non_active_users' => false,
        'app_users' => false,
        'online_users' => false,
        'away_users' => false,
        'busy_users' => false,
        'total_connected_users' => false,
        'offline_users' => false,
        'user_languages' => false,
        'total_rooms' => false,
        'total_channels' => false,
        'total_private_groups' => false,
        'total_direct' => false,
        'total_livechat' => false,
        'total_discussions' => false,
        'total_threads' => false,
        'total_livechat_visitors' => false,
        'total_livechat_agents' => false,
        'total_livechat_managers' => false,
        'livechat_enabled' => false,
        'is_department_removal_enabled' => false,
        'total_triggers' => false,
        'archived_departments' => false,
        'departments' => false,
        'total_custom_fields' => false,
        'omnichannel_sources' => false,
        'total_livechat_public_custom_fields' => false,
        'livechat_automatic_forwarding_unanswered_chats' => false,
        'routing_algorithm' => false,
        'on_hold_enabled' => false,
        'last_chatted_agent_preferred' => false,
        'assign_new_conversations_to_contact_manager' => false,
        'visitor_abandonment' => false,
        'voip_enabled' => false,
        'email_inboxes' => false,
        'business_hours' => false,
        'voip_calls' => false,
        'voip_extensions' => false,
        'chats_on_hold' => false,
        'voip_successful_calls' => false,
        'voip_error_calls' => false,
        'voip_on_hold_calls' => false,
        'omnichannel_contacts_by_source' => false,
        'unique_contacts_of_last_week' => false,
        'unique_contacts_of_last_month' => false,
        'unique_contacts_of_yesterday' => false,
        'total_channel_messages' => false,
        'total_private_group_messages' => false,
        'total_discussions_messages' => false,
        'total_direct_messages' => false,
        'total_livechat_messages' => false,
        'total_messages' => false,
        'last_login' => false,
        'last_message_sent_at' => false,
        'federated_servers' => false,
        'federated_users' => false,
        'last_seen_subscription' => false,
        'os' => false,
        'process' => false,
        'deploy' => false,
        'read_receipts_enabled' => false,
        'read_receipts_detailed' => false,
        'enterprise_ready' => false,
        'uploads_total' => false,
        'migration' => false,
        'uploads_total_size' => false,
        'instance_count' => false,
        'ms_enabled' => false,
        'oplog_enabled' => false,
        'mongo_version' => false,
        'mongo_storage_engine' => false,
        'apps' => false,
        'unique_users_of_yesterday' => false,
        'unique_devices_of_yesterday' => false,
        'unique_users_of_last_week' => false,
        'unique_osof_yesterday' => false,
        'unique_devices_of_last_month' => false,
        'unique_osof_last_week' => false,
        'unique_devices_of_last_week' => false,
        'unique_users_of_last_month' => false,
        'unique_osof_last_month' => false,
        'services' => false,
        'importer' => false,
        'video_conf' => false,
        'dashboard_count' => false,
        'message_audit_apply' => false,
        'message_audit_load' => false,
        'join_jitsi_button' => false,
        'slash_commands_jitsi' => false,
        'settings' => false,
        'push_queue' => false,
        'total_otr_rooms' => false,
        'total_otr' => false,
        'integrations' => false,
        'total_broadcast_rooms' => false,
        'enterprise' => false,
        'teams' => false,
        'total_rooms_with_active_livestream' => false,
        'total_triggered_emails' => false,
        'total_rooms_with_starred' => false,
        'total_rooms_with_pinned' => false,
        'total_user_totp' => false,
        'total_user_email2fa' => false,
        'total_pinned' => false,
        'total_starred' => false,
        'total_link_invitation' => false,
        'total_link_invitation_uses' => false,
        'total_email_invitation' => false,
        'total_e2_e_rooms' => false,
        'logo_change' => false,
        'show_home_button' => false,
        'total_encrypted_messages' => false,
        'total_manually_added_users' => false,
        'total_subscription_roles' => false,
        'total_user_roles' => false,
        'total_custom_roles' => false,
        'total_web_rtc_calls' => false,
        'uncaught_exceptions_count' => false,
        'push' => false,
        'push_secured' => false,
        'home_title_changed' => false,
        'home_body_changed' => false,
        'custom_css_changed' => false,
        'on_logout_custom_script_changed' => false,
        'logged_out_custom_script_changed' => false,
        'logged_in_custom_script_changed' => false,
        'daily_peak_connections' => false,
        'max_monthly_peak_connections' => false,
        'matrix_federation' => false,
        'web_rtc_enabled' => false,
        'web_rtc_enabled_for_omnichannel' => false,
        'omnichannel_web_rtc_calls' => false,
        'created_at' => false,
        '_updated_at' => false,
        'stats_token' => false,
        'success' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'wizard' => 'wizard',
        'unique_id' => 'uniqueId',
        'installed_at' => 'installedAt',
        'deployment_fingerprint_hash' => 'deploymentFingerprintHash',
        'deployment_fingerprint_verified' => 'deploymentFingerprintVerified',
        'version' => 'version',
        'total_users' => 'totalUsers',
        'active_users' => 'activeUsers',
        'active_guests' => 'activeGuests',
        'non_active_users' => 'nonActiveUsers',
        'app_users' => 'appUsers',
        'online_users' => 'onlineUsers',
        'away_users' => 'awayUsers',
        'busy_users' => 'busyUsers',
        'total_connected_users' => 'totalConnectedUsers',
        'offline_users' => 'offlineUsers',
        'user_languages' => 'userLanguages',
        'total_rooms' => 'totalRooms',
        'total_channels' => 'totalChannels',
        'total_private_groups' => 'totalPrivateGroups',
        'total_direct' => 'totalDirect',
        'total_livechat' => 'totalLivechat',
        'total_discussions' => 'totalDiscussions',
        'total_threads' => 'totalThreads',
        'total_livechat_visitors' => 'totalLivechatVisitors',
        'total_livechat_agents' => 'totalLivechatAgents',
        'total_livechat_managers' => 'totalLivechatManagers',
        'livechat_enabled' => 'livechatEnabled',
        'is_department_removal_enabled' => 'isDepartmentRemovalEnabled',
        'total_triggers' => 'totalTriggers',
        'archived_departments' => 'archivedDepartments',
        'departments' => 'departments',
        'total_custom_fields' => 'totalCustomFields',
        'omnichannel_sources' => 'omnichannelSources',
        'total_livechat_public_custom_fields' => 'totalLivechatPublicCustomFields',
        'livechat_automatic_forwarding_unanswered_chats' => 'livechatAutomaticForwardingUnansweredChats',
        'routing_algorithm' => 'routingAlgorithm',
        'on_hold_enabled' => 'onHoldEnabled',
        'last_chatted_agent_preferred' => 'lastChattedAgentPreferred',
        'assign_new_conversations_to_contact_manager' => 'assignNewConversationsToContactManager',
        'visitor_abandonment' => 'visitorAbandonment',
        'voip_enabled' => 'voipEnabled',
        'email_inboxes' => 'emailInboxes',
        'business_hours' => 'BusinessHours',
        'voip_calls' => 'voipCalls',
        'voip_extensions' => 'voipExtensions',
        'chats_on_hold' => 'chatsOnHold',
        'voip_successful_calls' => 'voipSuccessfulCalls',
        'voip_error_calls' => 'voipErrorCalls',
        'voip_on_hold_calls' => 'voipOnHoldCalls',
        'omnichannel_contacts_by_source' => 'omnichannelContactsBySource',
        'unique_contacts_of_last_week' => 'uniqueContactsOfLastWeek',
        'unique_contacts_of_last_month' => 'uniqueContactsOfLastMonth',
        'unique_contacts_of_yesterday' => 'uniqueContactsOfYesterday',
        'total_channel_messages' => 'totalChannelMessages',
        'total_private_group_messages' => 'totalPrivateGroupMessages',
        'total_discussions_messages' => 'totalDiscussionsMessages',
        'total_direct_messages' => 'totalDirectMessages',
        'total_livechat_messages' => 'totalLivechatMessages',
        'total_messages' => 'totalMessages',
        'last_login' => 'lastLogin',
        'last_message_sent_at' => 'lastMessageSentAt',
        'federated_servers' => 'federatedServers',
        'federated_users' => 'federatedUsers',
        'last_seen_subscription' => 'lastSeenSubscription',
        'os' => 'os',
        'process' => 'process',
        'deploy' => 'deploy',
        'read_receipts_enabled' => 'readReceiptsEnabled',
        'read_receipts_detailed' => 'readReceiptsDetailed',
        'enterprise_ready' => 'enterpriseReady',
        'uploads_total' => 'uploadsTotal',
        'migration' => 'migration',
        'uploads_total_size' => 'uploadsTotalSize',
        'instance_count' => 'instanceCount',
        'ms_enabled' => 'msEnabled',
        'oplog_enabled' => 'oplogEnabled',
        'mongo_version' => 'mongoVersion',
        'mongo_storage_engine' => 'mongoStorageEngine',
        'apps' => 'apps',
        'unique_users_of_yesterday' => 'uniqueUsersOfYesterday',
        'unique_devices_of_yesterday' => 'uniqueDevicesOfYesterday',
        'unique_users_of_last_week' => 'uniqueUsersOfLastWeek',
        'unique_osof_yesterday' => 'uniqueOSOfYesterday',
        'unique_devices_of_last_month' => 'uniqueDevicesOfLastMonth',
        'unique_osof_last_week' => 'uniqueOSOfLastWeek',
        'unique_devices_of_last_week' => 'uniqueDevicesOfLastWeek',
        'unique_users_of_last_month' => 'uniqueUsersOfLastMonth',
        'unique_osof_last_month' => 'uniqueOSOfLastMonth',
        'services' => 'services',
        'importer' => 'importer',
        'video_conf' => 'videoConf',
        'dashboard_count' => 'dashboardCount',
        'message_audit_apply' => 'messageAuditApply',
        'message_audit_load' => 'messageAuditLoad',
        'join_jitsi_button' => 'joinJitsiButton',
        'slash_commands_jitsi' => 'slashCommandsJitsi',
        'settings' => 'settings',
        'push_queue' => 'pushQueue',
        'total_otr_rooms' => 'totalOTRRooms',
        'total_otr' => 'totalOTR',
        'integrations' => 'integrations',
        'total_broadcast_rooms' => 'totalBroadcastRooms',
        'enterprise' => 'enterprise',
        'teams' => 'teams',
        'total_rooms_with_active_livestream' => 'totalRoomsWithActiveLivestream',
        'total_triggered_emails' => 'totalTriggeredEmails',
        'total_rooms_with_starred' => 'totalRoomsWithStarred',
        'total_rooms_with_pinned' => 'totalRoomsWithPinned',
        'total_user_totp' => 'totalUserTOTP',
        'total_user_email2fa' => 'totalUserEmail2fa',
        'total_pinned' => 'totalPinned',
        'total_starred' => 'totalStarred',
        'total_link_invitation' => 'totalLinkInvitation',
        'total_link_invitation_uses' => 'totalLinkInvitationUses',
        'total_email_invitation' => 'totalEmailInvitation',
        'total_e2_e_rooms' => 'totalE2ERooms',
        'logo_change' => 'logoChange',
        'show_home_button' => 'showHomeButton',
        'total_encrypted_messages' => 'totalEncryptedMessages',
        'total_manually_added_users' => 'totalManuallyAddedUsers',
        'total_subscription_roles' => 'totalSubscriptionRoles',
        'total_user_roles' => 'totalUserRoles',
        'total_custom_roles' => 'totalCustomRoles',
        'total_web_rtc_calls' => 'totalWebRTCCalls',
        'uncaught_exceptions_count' => 'uncaughtExceptionsCount',
        'push' => 'push',
        'push_secured' => 'pushSecured',
        'home_title_changed' => 'homeTitleChanged',
        'home_body_changed' => 'homeBodyChanged',
        'custom_css_changed' => 'customCSSChanged',
        'on_logout_custom_script_changed' => 'onLogoutCustomScriptChanged',
        'logged_out_custom_script_changed' => 'loggedOutCustomScriptChanged',
        'logged_in_custom_script_changed' => 'loggedInCustomScriptChanged',
        'daily_peak_connections' => 'dailyPeakConnections',
        'max_monthly_peak_connections' => 'maxMonthlyPeakConnections',
        'matrix_federation' => 'matrixFederation',
        'web_rtc_enabled' => 'webRTCEnabled',
        'web_rtc_enabled_for_omnichannel' => 'webRTCEnabledForOmnichannel',
        'omnichannel_web_rtc_calls' => 'omnichannelWebRTCCalls',
        'created_at' => 'createdAt',
        '_updated_at' => '_updatedAt',
        'stats_token' => 'statsToken',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'wizard' => 'setWizard',
        'unique_id' => 'setUniqueId',
        'installed_at' => 'setInstalledAt',
        'deployment_fingerprint_hash' => 'setDeploymentFingerprintHash',
        'deployment_fingerprint_verified' => 'setDeploymentFingerprintVerified',
        'version' => 'setVersion',
        'total_users' => 'setTotalUsers',
        'active_users' => 'setActiveUsers',
        'active_guests' => 'setActiveGuests',
        'non_active_users' => 'setNonActiveUsers',
        'app_users' => 'setAppUsers',
        'online_users' => 'setOnlineUsers',
        'away_users' => 'setAwayUsers',
        'busy_users' => 'setBusyUsers',
        'total_connected_users' => 'setTotalConnectedUsers',
        'offline_users' => 'setOfflineUsers',
        'user_languages' => 'setUserLanguages',
        'total_rooms' => 'setTotalRooms',
        'total_channels' => 'setTotalChannels',
        'total_private_groups' => 'setTotalPrivateGroups',
        'total_direct' => 'setTotalDirect',
        'total_livechat' => 'setTotalLivechat',
        'total_discussions' => 'setTotalDiscussions',
        'total_threads' => 'setTotalThreads',
        'total_livechat_visitors' => 'setTotalLivechatVisitors',
        'total_livechat_agents' => 'setTotalLivechatAgents',
        'total_livechat_managers' => 'setTotalLivechatManagers',
        'livechat_enabled' => 'setLivechatEnabled',
        'is_department_removal_enabled' => 'setIsDepartmentRemovalEnabled',
        'total_triggers' => 'setTotalTriggers',
        'archived_departments' => 'setArchivedDepartments',
        'departments' => 'setDepartments',
        'total_custom_fields' => 'setTotalCustomFields',
        'omnichannel_sources' => 'setOmnichannelSources',
        'total_livechat_public_custom_fields' => 'setTotalLivechatPublicCustomFields',
        'livechat_automatic_forwarding_unanswered_chats' => 'setLivechatAutomaticForwardingUnansweredChats',
        'routing_algorithm' => 'setRoutingAlgorithm',
        'on_hold_enabled' => 'setOnHoldEnabled',
        'last_chatted_agent_preferred' => 'setLastChattedAgentPreferred',
        'assign_new_conversations_to_contact_manager' => 'setAssignNewConversationsToContactManager',
        'visitor_abandonment' => 'setVisitorAbandonment',
        'voip_enabled' => 'setVoipEnabled',
        'email_inboxes' => 'setEmailInboxes',
        'business_hours' => 'setBusinessHours',
        'voip_calls' => 'setVoipCalls',
        'voip_extensions' => 'setVoipExtensions',
        'chats_on_hold' => 'setChatsOnHold',
        'voip_successful_calls' => 'setVoipSuccessfulCalls',
        'voip_error_calls' => 'setVoipErrorCalls',
        'voip_on_hold_calls' => 'setVoipOnHoldCalls',
        'omnichannel_contacts_by_source' => 'setOmnichannelContactsBySource',
        'unique_contacts_of_last_week' => 'setUniqueContactsOfLastWeek',
        'unique_contacts_of_last_month' => 'setUniqueContactsOfLastMonth',
        'unique_contacts_of_yesterday' => 'setUniqueContactsOfYesterday',
        'total_channel_messages' => 'setTotalChannelMessages',
        'total_private_group_messages' => 'setTotalPrivateGroupMessages',
        'total_discussions_messages' => 'setTotalDiscussionsMessages',
        'total_direct_messages' => 'setTotalDirectMessages',
        'total_livechat_messages' => 'setTotalLivechatMessages',
        'total_messages' => 'setTotalMessages',
        'last_login' => 'setLastLogin',
        'last_message_sent_at' => 'setLastMessageSentAt',
        'federated_servers' => 'setFederatedServers',
        'federated_users' => 'setFederatedUsers',
        'last_seen_subscription' => 'setLastSeenSubscription',
        'os' => 'setOs',
        'process' => 'setProcess',
        'deploy' => 'setDeploy',
        'read_receipts_enabled' => 'setReadReceiptsEnabled',
        'read_receipts_detailed' => 'setReadReceiptsDetailed',
        'enterprise_ready' => 'setEnterpriseReady',
        'uploads_total' => 'setUploadsTotal',
        'migration' => 'setMigration',
        'uploads_total_size' => 'setUploadsTotalSize',
        'instance_count' => 'setInstanceCount',
        'ms_enabled' => 'setMsEnabled',
        'oplog_enabled' => 'setOplogEnabled',
        'mongo_version' => 'setMongoVersion',
        'mongo_storage_engine' => 'setMongoStorageEngine',
        'apps' => 'setApps',
        'unique_users_of_yesterday' => 'setUniqueUsersOfYesterday',
        'unique_devices_of_yesterday' => 'setUniqueDevicesOfYesterday',
        'unique_users_of_last_week' => 'setUniqueUsersOfLastWeek',
        'unique_osof_yesterday' => 'setUniqueOsofYesterday',
        'unique_devices_of_last_month' => 'setUniqueDevicesOfLastMonth',
        'unique_osof_last_week' => 'setUniqueOsofLastWeek',
        'unique_devices_of_last_week' => 'setUniqueDevicesOfLastWeek',
        'unique_users_of_last_month' => 'setUniqueUsersOfLastMonth',
        'unique_osof_last_month' => 'setUniqueOsofLastMonth',
        'services' => 'setServices',
        'importer' => 'setImporter',
        'video_conf' => 'setVideoConf',
        'dashboard_count' => 'setDashboardCount',
        'message_audit_apply' => 'setMessageAuditApply',
        'message_audit_load' => 'setMessageAuditLoad',
        'join_jitsi_button' => 'setJoinJitsiButton',
        'slash_commands_jitsi' => 'setSlashCommandsJitsi',
        'settings' => 'setSettings',
        'push_queue' => 'setPushQueue',
        'total_otr_rooms' => 'setTotalOtrRooms',
        'total_otr' => 'setTotalOtr',
        'integrations' => 'setIntegrations',
        'total_broadcast_rooms' => 'setTotalBroadcastRooms',
        'enterprise' => 'setEnterprise',
        'teams' => 'setTeams',
        'total_rooms_with_active_livestream' => 'setTotalRoomsWithActiveLivestream',
        'total_triggered_emails' => 'setTotalTriggeredEmails',
        'total_rooms_with_starred' => 'setTotalRoomsWithStarred',
        'total_rooms_with_pinned' => 'setTotalRoomsWithPinned',
        'total_user_totp' => 'setTotalUserTotp',
        'total_user_email2fa' => 'setTotalUserEmail2fa',
        'total_pinned' => 'setTotalPinned',
        'total_starred' => 'setTotalStarred',
        'total_link_invitation' => 'setTotalLinkInvitation',
        'total_link_invitation_uses' => 'setTotalLinkInvitationUses',
        'total_email_invitation' => 'setTotalEmailInvitation',
        'total_e2_e_rooms' => 'setTotalE2ERooms',
        'logo_change' => 'setLogoChange',
        'show_home_button' => 'setShowHomeButton',
        'total_encrypted_messages' => 'setTotalEncryptedMessages',
        'total_manually_added_users' => 'setTotalManuallyAddedUsers',
        'total_subscription_roles' => 'setTotalSubscriptionRoles',
        'total_user_roles' => 'setTotalUserRoles',
        'total_custom_roles' => 'setTotalCustomRoles',
        'total_web_rtc_calls' => 'setTotalWebRtcCalls',
        'uncaught_exceptions_count' => 'setUncaughtExceptionsCount',
        'push' => 'setPush',
        'push_secured' => 'setPushSecured',
        'home_title_changed' => 'setHomeTitleChanged',
        'home_body_changed' => 'setHomeBodyChanged',
        'custom_css_changed' => 'setCustomCssChanged',
        'on_logout_custom_script_changed' => 'setOnLogoutCustomScriptChanged',
        'logged_out_custom_script_changed' => 'setLoggedOutCustomScriptChanged',
        'logged_in_custom_script_changed' => 'setLoggedInCustomScriptChanged',
        'daily_peak_connections' => 'setDailyPeakConnections',
        'max_monthly_peak_connections' => 'setMaxMonthlyPeakConnections',
        'matrix_federation' => 'setMatrixFederation',
        'web_rtc_enabled' => 'setWebRtcEnabled',
        'web_rtc_enabled_for_omnichannel' => 'setWebRtcEnabledForOmnichannel',
        'omnichannel_web_rtc_calls' => 'setOmnichannelWebRtcCalls',
        'created_at' => 'setCreatedAt',
        '_updated_at' => 'setUpdatedAt',
        'stats_token' => 'setStatsToken',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'wizard' => 'getWizard',
        'unique_id' => 'getUniqueId',
        'installed_at' => 'getInstalledAt',
        'deployment_fingerprint_hash' => 'getDeploymentFingerprintHash',
        'deployment_fingerprint_verified' => 'getDeploymentFingerprintVerified',
        'version' => 'getVersion',
        'total_users' => 'getTotalUsers',
        'active_users' => 'getActiveUsers',
        'active_guests' => 'getActiveGuests',
        'non_active_users' => 'getNonActiveUsers',
        'app_users' => 'getAppUsers',
        'online_users' => 'getOnlineUsers',
        'away_users' => 'getAwayUsers',
        'busy_users' => 'getBusyUsers',
        'total_connected_users' => 'getTotalConnectedUsers',
        'offline_users' => 'getOfflineUsers',
        'user_languages' => 'getUserLanguages',
        'total_rooms' => 'getTotalRooms',
        'total_channels' => 'getTotalChannels',
        'total_private_groups' => 'getTotalPrivateGroups',
        'total_direct' => 'getTotalDirect',
        'total_livechat' => 'getTotalLivechat',
        'total_discussions' => 'getTotalDiscussions',
        'total_threads' => 'getTotalThreads',
        'total_livechat_visitors' => 'getTotalLivechatVisitors',
        'total_livechat_agents' => 'getTotalLivechatAgents',
        'total_livechat_managers' => 'getTotalLivechatManagers',
        'livechat_enabled' => 'getLivechatEnabled',
        'is_department_removal_enabled' => 'getIsDepartmentRemovalEnabled',
        'total_triggers' => 'getTotalTriggers',
        'archived_departments' => 'getArchivedDepartments',
        'departments' => 'getDepartments',
        'total_custom_fields' => 'getTotalCustomFields',
        'omnichannel_sources' => 'getOmnichannelSources',
        'total_livechat_public_custom_fields' => 'getTotalLivechatPublicCustomFields',
        'livechat_automatic_forwarding_unanswered_chats' => 'getLivechatAutomaticForwardingUnansweredChats',
        'routing_algorithm' => 'getRoutingAlgorithm',
        'on_hold_enabled' => 'getOnHoldEnabled',
        'last_chatted_agent_preferred' => 'getLastChattedAgentPreferred',
        'assign_new_conversations_to_contact_manager' => 'getAssignNewConversationsToContactManager',
        'visitor_abandonment' => 'getVisitorAbandonment',
        'voip_enabled' => 'getVoipEnabled',
        'email_inboxes' => 'getEmailInboxes',
        'business_hours' => 'getBusinessHours',
        'voip_calls' => 'getVoipCalls',
        'voip_extensions' => 'getVoipExtensions',
        'chats_on_hold' => 'getChatsOnHold',
        'voip_successful_calls' => 'getVoipSuccessfulCalls',
        'voip_error_calls' => 'getVoipErrorCalls',
        'voip_on_hold_calls' => 'getVoipOnHoldCalls',
        'omnichannel_contacts_by_source' => 'getOmnichannelContactsBySource',
        'unique_contacts_of_last_week' => 'getUniqueContactsOfLastWeek',
        'unique_contacts_of_last_month' => 'getUniqueContactsOfLastMonth',
        'unique_contacts_of_yesterday' => 'getUniqueContactsOfYesterday',
        'total_channel_messages' => 'getTotalChannelMessages',
        'total_private_group_messages' => 'getTotalPrivateGroupMessages',
        'total_discussions_messages' => 'getTotalDiscussionsMessages',
        'total_direct_messages' => 'getTotalDirectMessages',
        'total_livechat_messages' => 'getTotalLivechatMessages',
        'total_messages' => 'getTotalMessages',
        'last_login' => 'getLastLogin',
        'last_message_sent_at' => 'getLastMessageSentAt',
        'federated_servers' => 'getFederatedServers',
        'federated_users' => 'getFederatedUsers',
        'last_seen_subscription' => 'getLastSeenSubscription',
        'os' => 'getOs',
        'process' => 'getProcess',
        'deploy' => 'getDeploy',
        'read_receipts_enabled' => 'getReadReceiptsEnabled',
        'read_receipts_detailed' => 'getReadReceiptsDetailed',
        'enterprise_ready' => 'getEnterpriseReady',
        'uploads_total' => 'getUploadsTotal',
        'migration' => 'getMigration',
        'uploads_total_size' => 'getUploadsTotalSize',
        'instance_count' => 'getInstanceCount',
        'ms_enabled' => 'getMsEnabled',
        'oplog_enabled' => 'getOplogEnabled',
        'mongo_version' => 'getMongoVersion',
        'mongo_storage_engine' => 'getMongoStorageEngine',
        'apps' => 'getApps',
        'unique_users_of_yesterday' => 'getUniqueUsersOfYesterday',
        'unique_devices_of_yesterday' => 'getUniqueDevicesOfYesterday',
        'unique_users_of_last_week' => 'getUniqueUsersOfLastWeek',
        'unique_osof_yesterday' => 'getUniqueOsofYesterday',
        'unique_devices_of_last_month' => 'getUniqueDevicesOfLastMonth',
        'unique_osof_last_week' => 'getUniqueOsofLastWeek',
        'unique_devices_of_last_week' => 'getUniqueDevicesOfLastWeek',
        'unique_users_of_last_month' => 'getUniqueUsersOfLastMonth',
        'unique_osof_last_month' => 'getUniqueOsofLastMonth',
        'services' => 'getServices',
        'importer' => 'getImporter',
        'video_conf' => 'getVideoConf',
        'dashboard_count' => 'getDashboardCount',
        'message_audit_apply' => 'getMessageAuditApply',
        'message_audit_load' => 'getMessageAuditLoad',
        'join_jitsi_button' => 'getJoinJitsiButton',
        'slash_commands_jitsi' => 'getSlashCommandsJitsi',
        'settings' => 'getSettings',
        'push_queue' => 'getPushQueue',
        'total_otr_rooms' => 'getTotalOtrRooms',
        'total_otr' => 'getTotalOtr',
        'integrations' => 'getIntegrations',
        'total_broadcast_rooms' => 'getTotalBroadcastRooms',
        'enterprise' => 'getEnterprise',
        'teams' => 'getTeams',
        'total_rooms_with_active_livestream' => 'getTotalRoomsWithActiveLivestream',
        'total_triggered_emails' => 'getTotalTriggeredEmails',
        'total_rooms_with_starred' => 'getTotalRoomsWithStarred',
        'total_rooms_with_pinned' => 'getTotalRoomsWithPinned',
        'total_user_totp' => 'getTotalUserTotp',
        'total_user_email2fa' => 'getTotalUserEmail2fa',
        'total_pinned' => 'getTotalPinned',
        'total_starred' => 'getTotalStarred',
        'total_link_invitation' => 'getTotalLinkInvitation',
        'total_link_invitation_uses' => 'getTotalLinkInvitationUses',
        'total_email_invitation' => 'getTotalEmailInvitation',
        'total_e2_e_rooms' => 'getTotalE2ERooms',
        'logo_change' => 'getLogoChange',
        'show_home_button' => 'getShowHomeButton',
        'total_encrypted_messages' => 'getTotalEncryptedMessages',
        'total_manually_added_users' => 'getTotalManuallyAddedUsers',
        'total_subscription_roles' => 'getTotalSubscriptionRoles',
        'total_user_roles' => 'getTotalUserRoles',
        'total_custom_roles' => 'getTotalCustomRoles',
        'total_web_rtc_calls' => 'getTotalWebRtcCalls',
        'uncaught_exceptions_count' => 'getUncaughtExceptionsCount',
        'push' => 'getPush',
        'push_secured' => 'getPushSecured',
        'home_title_changed' => 'getHomeTitleChanged',
        'home_body_changed' => 'getHomeBodyChanged',
        'custom_css_changed' => 'getCustomCssChanged',
        'on_logout_custom_script_changed' => 'getOnLogoutCustomScriptChanged',
        'logged_out_custom_script_changed' => 'getLoggedOutCustomScriptChanged',
        'logged_in_custom_script_changed' => 'getLoggedInCustomScriptChanged',
        'daily_peak_connections' => 'getDailyPeakConnections',
        'max_monthly_peak_connections' => 'getMaxMonthlyPeakConnections',
        'matrix_federation' => 'getMatrixFederation',
        'web_rtc_enabled' => 'getWebRtcEnabled',
        'web_rtc_enabled_for_omnichannel' => 'getWebRtcEnabledForOmnichannel',
        'omnichannel_web_rtc_calls' => 'getOmnichannelWebRtcCalls',
        'created_at' => 'getCreatedAt',
        '_updated_at' => 'getUpdatedAt',
        'stats_token' => 'getStatsToken',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('wizard', $data ?? [], null);
        $this->setIfExists('unique_id', $data ?? [], null);
        $this->setIfExists('installed_at', $data ?? [], null);
        $this->setIfExists('deployment_fingerprint_hash', $data ?? [], null);
        $this->setIfExists('deployment_fingerprint_verified', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('total_users', $data ?? [], null);
        $this->setIfExists('active_users', $data ?? [], null);
        $this->setIfExists('active_guests', $data ?? [], null);
        $this->setIfExists('non_active_users', $data ?? [], null);
        $this->setIfExists('app_users', $data ?? [], null);
        $this->setIfExists('online_users', $data ?? [], null);
        $this->setIfExists('away_users', $data ?? [], null);
        $this->setIfExists('busy_users', $data ?? [], null);
        $this->setIfExists('total_connected_users', $data ?? [], null);
        $this->setIfExists('offline_users', $data ?? [], null);
        $this->setIfExists('user_languages', $data ?? [], null);
        $this->setIfExists('total_rooms', $data ?? [], null);
        $this->setIfExists('total_channels', $data ?? [], null);
        $this->setIfExists('total_private_groups', $data ?? [], null);
        $this->setIfExists('total_direct', $data ?? [], null);
        $this->setIfExists('total_livechat', $data ?? [], null);
        $this->setIfExists('total_discussions', $data ?? [], null);
        $this->setIfExists('total_threads', $data ?? [], null);
        $this->setIfExists('total_livechat_visitors', $data ?? [], null);
        $this->setIfExists('total_livechat_agents', $data ?? [], null);
        $this->setIfExists('total_livechat_managers', $data ?? [], null);
        $this->setIfExists('livechat_enabled', $data ?? [], null);
        $this->setIfExists('is_department_removal_enabled', $data ?? [], null);
        $this->setIfExists('total_triggers', $data ?? [], null);
        $this->setIfExists('archived_departments', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('total_custom_fields', $data ?? [], null);
        $this->setIfExists('omnichannel_sources', $data ?? [], null);
        $this->setIfExists('total_livechat_public_custom_fields', $data ?? [], null);
        $this->setIfExists('livechat_automatic_forwarding_unanswered_chats', $data ?? [], null);
        $this->setIfExists('routing_algorithm', $data ?? [], null);
        $this->setIfExists('on_hold_enabled', $data ?? [], null);
        $this->setIfExists('last_chatted_agent_preferred', $data ?? [], null);
        $this->setIfExists('assign_new_conversations_to_contact_manager', $data ?? [], null);
        $this->setIfExists('visitor_abandonment', $data ?? [], null);
        $this->setIfExists('voip_enabled', $data ?? [], null);
        $this->setIfExists('email_inboxes', $data ?? [], null);
        $this->setIfExists('business_hours', $data ?? [], null);
        $this->setIfExists('voip_calls', $data ?? [], null);
        $this->setIfExists('voip_extensions', $data ?? [], null);
        $this->setIfExists('chats_on_hold', $data ?? [], null);
        $this->setIfExists('voip_successful_calls', $data ?? [], null);
        $this->setIfExists('voip_error_calls', $data ?? [], null);
        $this->setIfExists('voip_on_hold_calls', $data ?? [], null);
        $this->setIfExists('omnichannel_contacts_by_source', $data ?? [], null);
        $this->setIfExists('unique_contacts_of_last_week', $data ?? [], null);
        $this->setIfExists('unique_contacts_of_last_month', $data ?? [], null);
        $this->setIfExists('unique_contacts_of_yesterday', $data ?? [], null);
        $this->setIfExists('total_channel_messages', $data ?? [], null);
        $this->setIfExists('total_private_group_messages', $data ?? [], null);
        $this->setIfExists('total_discussions_messages', $data ?? [], null);
        $this->setIfExists('total_direct_messages', $data ?? [], null);
        $this->setIfExists('total_livechat_messages', $data ?? [], null);
        $this->setIfExists('total_messages', $data ?? [], null);
        $this->setIfExists('last_login', $data ?? [], null);
        $this->setIfExists('last_message_sent_at', $data ?? [], null);
        $this->setIfExists('federated_servers', $data ?? [], null);
        $this->setIfExists('federated_users', $data ?? [], null);
        $this->setIfExists('last_seen_subscription', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('process', $data ?? [], null);
        $this->setIfExists('deploy', $data ?? [], null);
        $this->setIfExists('read_receipts_enabled', $data ?? [], null);
        $this->setIfExists('read_receipts_detailed', $data ?? [], null);
        $this->setIfExists('enterprise_ready', $data ?? [], null);
        $this->setIfExists('uploads_total', $data ?? [], null);
        $this->setIfExists('migration', $data ?? [], null);
        $this->setIfExists('uploads_total_size', $data ?? [], null);
        $this->setIfExists('instance_count', $data ?? [], null);
        $this->setIfExists('ms_enabled', $data ?? [], null);
        $this->setIfExists('oplog_enabled', $data ?? [], null);
        $this->setIfExists('mongo_version', $data ?? [], null);
        $this->setIfExists('mongo_storage_engine', $data ?? [], null);
        $this->setIfExists('apps', $data ?? [], null);
        $this->setIfExists('unique_users_of_yesterday', $data ?? [], null);
        $this->setIfExists('unique_devices_of_yesterday', $data ?? [], null);
        $this->setIfExists('unique_users_of_last_week', $data ?? [], null);
        $this->setIfExists('unique_osof_yesterday', $data ?? [], null);
        $this->setIfExists('unique_devices_of_last_month', $data ?? [], null);
        $this->setIfExists('unique_osof_last_week', $data ?? [], null);
        $this->setIfExists('unique_devices_of_last_week', $data ?? [], null);
        $this->setIfExists('unique_users_of_last_month', $data ?? [], null);
        $this->setIfExists('unique_osof_last_month', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('importer', $data ?? [], null);
        $this->setIfExists('video_conf', $data ?? [], null);
        $this->setIfExists('dashboard_count', $data ?? [], null);
        $this->setIfExists('message_audit_apply', $data ?? [], null);
        $this->setIfExists('message_audit_load', $data ?? [], null);
        $this->setIfExists('join_jitsi_button', $data ?? [], null);
        $this->setIfExists('slash_commands_jitsi', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('push_queue', $data ?? [], null);
        $this->setIfExists('total_otr_rooms', $data ?? [], null);
        $this->setIfExists('total_otr', $data ?? [], null);
        $this->setIfExists('integrations', $data ?? [], null);
        $this->setIfExists('total_broadcast_rooms', $data ?? [], null);
        $this->setIfExists('enterprise', $data ?? [], null);
        $this->setIfExists('teams', $data ?? [], null);
        $this->setIfExists('total_rooms_with_active_livestream', $data ?? [], null);
        $this->setIfExists('total_triggered_emails', $data ?? [], null);
        $this->setIfExists('total_rooms_with_starred', $data ?? [], null);
        $this->setIfExists('total_rooms_with_pinned', $data ?? [], null);
        $this->setIfExists('total_user_totp', $data ?? [], null);
        $this->setIfExists('total_user_email2fa', $data ?? [], null);
        $this->setIfExists('total_pinned', $data ?? [], null);
        $this->setIfExists('total_starred', $data ?? [], null);
        $this->setIfExists('total_link_invitation', $data ?? [], null);
        $this->setIfExists('total_link_invitation_uses', $data ?? [], null);
        $this->setIfExists('total_email_invitation', $data ?? [], null);
        $this->setIfExists('total_e2_e_rooms', $data ?? [], null);
        $this->setIfExists('logo_change', $data ?? [], null);
        $this->setIfExists('show_home_button', $data ?? [], null);
        $this->setIfExists('total_encrypted_messages', $data ?? [], null);
        $this->setIfExists('total_manually_added_users', $data ?? [], null);
        $this->setIfExists('total_subscription_roles', $data ?? [], null);
        $this->setIfExists('total_user_roles', $data ?? [], null);
        $this->setIfExists('total_custom_roles', $data ?? [], null);
        $this->setIfExists('total_web_rtc_calls', $data ?? [], null);
        $this->setIfExists('uncaught_exceptions_count', $data ?? [], null);
        $this->setIfExists('push', $data ?? [], null);
        $this->setIfExists('push_secured', $data ?? [], null);
        $this->setIfExists('home_title_changed', $data ?? [], null);
        $this->setIfExists('home_body_changed', $data ?? [], null);
        $this->setIfExists('custom_css_changed', $data ?? [], null);
        $this->setIfExists('on_logout_custom_script_changed', $data ?? [], null);
        $this->setIfExists('logged_out_custom_script_changed', $data ?? [], null);
        $this->setIfExists('logged_in_custom_script_changed', $data ?? [], null);
        $this->setIfExists('daily_peak_connections', $data ?? [], null);
        $this->setIfExists('max_monthly_peak_connections', $data ?? [], null);
        $this->setIfExists('matrix_federation', $data ?? [], null);
        $this->setIfExists('web_rtc_enabled', $data ?? [], null);
        $this->setIfExists('web_rtc_enabled_for_omnichannel', $data ?? [], null);
        $this->setIfExists('omnichannel_web_rtc_calls', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('_updated_at', $data ?? [], null);
        $this->setIfExists('stats_token', $data ?? [], null);
        $this->setIfExists('success', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets wizard
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard|null
     */
    public function getWizard()
    {
        return $this->container['wizard'];
    }

    /**
     * Sets wizard
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard|null $wizard wizard
     *
     * @return self
     */
    public function setWizard($wizard)
    {
        if (is_null($wizard)) {
            throw new \InvalidArgumentException('non-nullable wizard cannot be null');
        }
        $this->container['wizard'] = $wizard;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        if (is_null($unique_id)) {
            throw new \InvalidArgumentException('non-nullable unique_id cannot be null');
        }
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets installed_at
     *
     * @return string|null
     */
    public function getInstalledAt()
    {
        return $this->container['installed_at'];
    }

    /**
     * Sets installed_at
     *
     * @param string|null $installed_at installed_at
     *
     * @return self
     */
    public function setInstalledAt($installed_at)
    {
        if (is_null($installed_at)) {
            throw new \InvalidArgumentException('non-nullable installed_at cannot be null');
        }
        $this->container['installed_at'] = $installed_at;

        return $this;
    }

    /**
     * Gets deployment_fingerprint_hash
     *
     * @return string|null
     */
    public function getDeploymentFingerprintHash()
    {
        return $this->container['deployment_fingerprint_hash'];
    }

    /**
     * Sets deployment_fingerprint_hash
     *
     * @param string|null $deployment_fingerprint_hash deployment_fingerprint_hash
     *
     * @return self
     */
    public function setDeploymentFingerprintHash($deployment_fingerprint_hash)
    {
        if (is_null($deployment_fingerprint_hash)) {
            throw new \InvalidArgumentException('non-nullable deployment_fingerprint_hash cannot be null');
        }
        $this->container['deployment_fingerprint_hash'] = $deployment_fingerprint_hash;

        return $this;
    }

    /**
     * Gets deployment_fingerprint_verified
     *
     * @return bool|null
     */
    public function getDeploymentFingerprintVerified()
    {
        return $this->container['deployment_fingerprint_verified'];
    }

    /**
     * Sets deployment_fingerprint_verified
     *
     * @param bool|null $deployment_fingerprint_verified deployment_fingerprint_verified
     *
     * @return self
     */
    public function setDeploymentFingerprintVerified($deployment_fingerprint_verified)
    {
        if (is_null($deployment_fingerprint_verified)) {
            throw new \InvalidArgumentException('non-nullable deployment_fingerprint_verified cannot be null');
        }
        $this->container['deployment_fingerprint_verified'] = $deployment_fingerprint_verified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets total_users
     *
     * @return int|null
     */
    public function getTotalUsers()
    {
        return $this->container['total_users'];
    }

    /**
     * Sets total_users
     *
     * @param int|null $total_users total_users
     *
     * @return self
     */
    public function setTotalUsers($total_users)
    {
        if (is_null($total_users)) {
            throw new \InvalidArgumentException('non-nullable total_users cannot be null');
        }
        $this->container['total_users'] = $total_users;

        return $this;
    }

    /**
     * Gets active_users
     *
     * @return int|null
     */
    public function getActiveUsers()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     *
     * @param int|null $active_users active_users
     *
     * @return self
     */
    public function setActiveUsers($active_users)
    {
        if (is_null($active_users)) {
            throw new \InvalidArgumentException('non-nullable active_users cannot be null');
        }
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets active_guests
     *
     * @return int|null
     */
    public function getActiveGuests()
    {
        return $this->container['active_guests'];
    }

    /**
     * Sets active_guests
     *
     * @param int|null $active_guests active_guests
     *
     * @return self
     */
    public function setActiveGuests($active_guests)
    {
        if (is_null($active_guests)) {
            throw new \InvalidArgumentException('non-nullable active_guests cannot be null');
        }
        $this->container['active_guests'] = $active_guests;

        return $this;
    }

    /**
     * Gets non_active_users
     *
     * @return int|null
     */
    public function getNonActiveUsers()
    {
        return $this->container['non_active_users'];
    }

    /**
     * Sets non_active_users
     *
     * @param int|null $non_active_users non_active_users
     *
     * @return self
     */
    public function setNonActiveUsers($non_active_users)
    {
        if (is_null($non_active_users)) {
            throw new \InvalidArgumentException('non-nullable non_active_users cannot be null');
        }
        $this->container['non_active_users'] = $non_active_users;

        return $this;
    }

    /**
     * Gets app_users
     *
     * @return int|null
     */
    public function getAppUsers()
    {
        return $this->container['app_users'];
    }

    /**
     * Sets app_users
     *
     * @param int|null $app_users app_users
     *
     * @return self
     */
    public function setAppUsers($app_users)
    {
        if (is_null($app_users)) {
            throw new \InvalidArgumentException('non-nullable app_users cannot be null');
        }
        $this->container['app_users'] = $app_users;

        return $this;
    }

    /**
     * Gets online_users
     *
     * @return int|null
     */
    public function getOnlineUsers()
    {
        return $this->container['online_users'];
    }

    /**
     * Sets online_users
     *
     * @param int|null $online_users online_users
     *
     * @return self
     */
    public function setOnlineUsers($online_users)
    {
        if (is_null($online_users)) {
            throw new \InvalidArgumentException('non-nullable online_users cannot be null');
        }
        $this->container['online_users'] = $online_users;

        return $this;
    }

    /**
     * Gets away_users
     *
     * @return int|null
     */
    public function getAwayUsers()
    {
        return $this->container['away_users'];
    }

    /**
     * Sets away_users
     *
     * @param int|null $away_users away_users
     *
     * @return self
     */
    public function setAwayUsers($away_users)
    {
        if (is_null($away_users)) {
            throw new \InvalidArgumentException('non-nullable away_users cannot be null');
        }
        $this->container['away_users'] = $away_users;

        return $this;
    }

    /**
     * Gets busy_users
     *
     * @return int|null
     */
    public function getBusyUsers()
    {
        return $this->container['busy_users'];
    }

    /**
     * Sets busy_users
     *
     * @param int|null $busy_users busy_users
     *
     * @return self
     */
    public function setBusyUsers($busy_users)
    {
        if (is_null($busy_users)) {
            throw new \InvalidArgumentException('non-nullable busy_users cannot be null');
        }
        $this->container['busy_users'] = $busy_users;

        return $this;
    }

    /**
     * Gets total_connected_users
     *
     * @return int|null
     */
    public function getTotalConnectedUsers()
    {
        return $this->container['total_connected_users'];
    }

    /**
     * Sets total_connected_users
     *
     * @param int|null $total_connected_users total_connected_users
     *
     * @return self
     */
    public function setTotalConnectedUsers($total_connected_users)
    {
        if (is_null($total_connected_users)) {
            throw new \InvalidArgumentException('non-nullable total_connected_users cannot be null');
        }
        $this->container['total_connected_users'] = $total_connected_users;

        return $this;
    }

    /**
     * Gets offline_users
     *
     * @return int|null
     */
    public function getOfflineUsers()
    {
        return $this->container['offline_users'];
    }

    /**
     * Sets offline_users
     *
     * @param int|null $offline_users offline_users
     *
     * @return self
     */
    public function setOfflineUsers($offline_users)
    {
        if (is_null($offline_users)) {
            throw new \InvalidArgumentException('non-nullable offline_users cannot be null');
        }
        $this->container['offline_users'] = $offline_users;

        return $this;
    }

    /**
     * Gets user_languages
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages|null
     */
    public function getUserLanguages()
    {
        return $this->container['user_languages'];
    }

    /**
     * Sets user_languages
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages|null $user_languages user_languages
     *
     * @return self
     */
    public function setUserLanguages($user_languages)
    {
        if (is_null($user_languages)) {
            throw new \InvalidArgumentException('non-nullable user_languages cannot be null');
        }
        $this->container['user_languages'] = $user_languages;

        return $this;
    }

    /**
     * Gets total_rooms
     *
     * @return int|null
     */
    public function getTotalRooms()
    {
        return $this->container['total_rooms'];
    }

    /**
     * Sets total_rooms
     *
     * @param int|null $total_rooms total_rooms
     *
     * @return self
     */
    public function setTotalRooms($total_rooms)
    {
        if (is_null($total_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_rooms cannot be null');
        }
        $this->container['total_rooms'] = $total_rooms;

        return $this;
    }

    /**
     * Gets total_channels
     *
     * @return int|null
     */
    public function getTotalChannels()
    {
        return $this->container['total_channels'];
    }

    /**
     * Sets total_channels
     *
     * @param int|null $total_channels total_channels
     *
     * @return self
     */
    public function setTotalChannels($total_channels)
    {
        if (is_null($total_channels)) {
            throw new \InvalidArgumentException('non-nullable total_channels cannot be null');
        }
        $this->container['total_channels'] = $total_channels;

        return $this;
    }

    /**
     * Gets total_private_groups
     *
     * @return int|null
     */
    public function getTotalPrivateGroups()
    {
        return $this->container['total_private_groups'];
    }

    /**
     * Sets total_private_groups
     *
     * @param int|null $total_private_groups total_private_groups
     *
     * @return self
     */
    public function setTotalPrivateGroups($total_private_groups)
    {
        if (is_null($total_private_groups)) {
            throw new \InvalidArgumentException('non-nullable total_private_groups cannot be null');
        }
        $this->container['total_private_groups'] = $total_private_groups;

        return $this;
    }

    /**
     * Gets total_direct
     *
     * @return int|null
     */
    public function getTotalDirect()
    {
        return $this->container['total_direct'];
    }

    /**
     * Sets total_direct
     *
     * @param int|null $total_direct total_direct
     *
     * @return self
     */
    public function setTotalDirect($total_direct)
    {
        if (is_null($total_direct)) {
            throw new \InvalidArgumentException('non-nullable total_direct cannot be null');
        }
        $this->container['total_direct'] = $total_direct;

        return $this;
    }

    /**
     * Gets total_livechat
     *
     * @return int|null
     */
    public function getTotalLivechat()
    {
        return $this->container['total_livechat'];
    }

    /**
     * Sets total_livechat
     *
     * @param int|null $total_livechat total_livechat
     *
     * @return self
     */
    public function setTotalLivechat($total_livechat)
    {
        if (is_null($total_livechat)) {
            throw new \InvalidArgumentException('non-nullable total_livechat cannot be null');
        }
        $this->container['total_livechat'] = $total_livechat;

        return $this;
    }

    /**
     * Gets total_discussions
     *
     * @return int|null
     */
    public function getTotalDiscussions()
    {
        return $this->container['total_discussions'];
    }

    /**
     * Sets total_discussions
     *
     * @param int|null $total_discussions total_discussions
     *
     * @return self
     */
    public function setTotalDiscussions($total_discussions)
    {
        if (is_null($total_discussions)) {
            throw new \InvalidArgumentException('non-nullable total_discussions cannot be null');
        }
        $this->container['total_discussions'] = $total_discussions;

        return $this;
    }

    /**
     * Gets total_threads
     *
     * @return int|null
     */
    public function getTotalThreads()
    {
        return $this->container['total_threads'];
    }

    /**
     * Sets total_threads
     *
     * @param int|null $total_threads total_threads
     *
     * @return self
     */
    public function setTotalThreads($total_threads)
    {
        if (is_null($total_threads)) {
            throw new \InvalidArgumentException('non-nullable total_threads cannot be null');
        }
        $this->container['total_threads'] = $total_threads;

        return $this;
    }

    /**
     * Gets total_livechat_visitors
     *
     * @return int|null
     */
    public function getTotalLivechatVisitors()
    {
        return $this->container['total_livechat_visitors'];
    }

    /**
     * Sets total_livechat_visitors
     *
     * @param int|null $total_livechat_visitors total_livechat_visitors
     *
     * @return self
     */
    public function setTotalLivechatVisitors($total_livechat_visitors)
    {
        if (is_null($total_livechat_visitors)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_visitors cannot be null');
        }
        $this->container['total_livechat_visitors'] = $total_livechat_visitors;

        return $this;
    }

    /**
     * Gets total_livechat_agents
     *
     * @return int|null
     */
    public function getTotalLivechatAgents()
    {
        return $this->container['total_livechat_agents'];
    }

    /**
     * Sets total_livechat_agents
     *
     * @param int|null $total_livechat_agents total_livechat_agents
     *
     * @return self
     */
    public function setTotalLivechatAgents($total_livechat_agents)
    {
        if (is_null($total_livechat_agents)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_agents cannot be null');
        }
        $this->container['total_livechat_agents'] = $total_livechat_agents;

        return $this;
    }

    /**
     * Gets total_livechat_managers
     *
     * @return int|null
     */
    public function getTotalLivechatManagers()
    {
        return $this->container['total_livechat_managers'];
    }

    /**
     * Sets total_livechat_managers
     *
     * @param int|null $total_livechat_managers total_livechat_managers
     *
     * @return self
     */
    public function setTotalLivechatManagers($total_livechat_managers)
    {
        if (is_null($total_livechat_managers)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_managers cannot be null');
        }
        $this->container['total_livechat_managers'] = $total_livechat_managers;

        return $this;
    }

    /**
     * Gets livechat_enabled
     *
     * @return bool|null
     */
    public function getLivechatEnabled()
    {
        return $this->container['livechat_enabled'];
    }

    /**
     * Sets livechat_enabled
     *
     * @param bool|null $livechat_enabled livechat_enabled
     *
     * @return self
     */
    public function setLivechatEnabled($livechat_enabled)
    {
        if (is_null($livechat_enabled)) {
            throw new \InvalidArgumentException('non-nullable livechat_enabled cannot be null');
        }
        $this->container['livechat_enabled'] = $livechat_enabled;

        return $this;
    }

    /**
     * Gets is_department_removal_enabled
     *
     * @return bool|null
     */
    public function getIsDepartmentRemovalEnabled()
    {
        return $this->container['is_department_removal_enabled'];
    }

    /**
     * Sets is_department_removal_enabled
     *
     * @param bool|null $is_department_removal_enabled is_department_removal_enabled
     *
     * @return self
     */
    public function setIsDepartmentRemovalEnabled($is_department_removal_enabled)
    {
        if (is_null($is_department_removal_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_department_removal_enabled cannot be null');
        }
        $this->container['is_department_removal_enabled'] = $is_department_removal_enabled;

        return $this;
    }

    /**
     * Gets total_triggers
     *
     * @return int|null
     */
    public function getTotalTriggers()
    {
        return $this->container['total_triggers'];
    }

    /**
     * Sets total_triggers
     *
     * @param int|null $total_triggers total_triggers
     *
     * @return self
     */
    public function setTotalTriggers($total_triggers)
    {
        if (is_null($total_triggers)) {
            throw new \InvalidArgumentException('non-nullable total_triggers cannot be null');
        }
        $this->container['total_triggers'] = $total_triggers;

        return $this;
    }

    /**
     * Gets archived_departments
     *
     * @return int|null
     */
    public function getArchivedDepartments()
    {
        return $this->container['archived_departments'];
    }

    /**
     * Sets archived_departments
     *
     * @param int|null $archived_departments archived_departments
     *
     * @return self
     */
    public function setArchivedDepartments($archived_departments)
    {
        if (is_null($archived_departments)) {
            throw new \InvalidArgumentException('non-nullable archived_departments cannot be null');
        }
        $this->container['archived_departments'] = $archived_departments;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return int|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param int|null $departments departments
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            throw new \InvalidArgumentException('non-nullable departments cannot be null');
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets total_custom_fields
     *
     * @return int|null
     */
    public function getTotalCustomFields()
    {
        return $this->container['total_custom_fields'];
    }

    /**
     * Sets total_custom_fields
     *
     * @param int|null $total_custom_fields total_custom_fields
     *
     * @return self
     */
    public function setTotalCustomFields($total_custom_fields)
    {
        if (is_null($total_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable total_custom_fields cannot be null');
        }
        $this->container['total_custom_fields'] = $total_custom_fields;

        return $this;
    }

    /**
     * Gets omnichannel_sources
     *
     * @return object[]|null
     */
    public function getOmnichannelSources()
    {
        return $this->container['omnichannel_sources'];
    }

    /**
     * Sets omnichannel_sources
     *
     * @param object[]|null $omnichannel_sources omnichannel_sources
     *
     * @return self
     */
    public function setOmnichannelSources($omnichannel_sources)
    {
        if (is_null($omnichannel_sources)) {
            throw new \InvalidArgumentException('non-nullable omnichannel_sources cannot be null');
        }
        $this->container['omnichannel_sources'] = $omnichannel_sources;

        return $this;
    }

    /**
     * Gets total_livechat_public_custom_fields
     *
     * @return int|null
     */
    public function getTotalLivechatPublicCustomFields()
    {
        return $this->container['total_livechat_public_custom_fields'];
    }

    /**
     * Sets total_livechat_public_custom_fields
     *
     * @param int|null $total_livechat_public_custom_fields total_livechat_public_custom_fields
     *
     * @return self
     */
    public function setTotalLivechatPublicCustomFields($total_livechat_public_custom_fields)
    {
        if (is_null($total_livechat_public_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_public_custom_fields cannot be null');
        }
        $this->container['total_livechat_public_custom_fields'] = $total_livechat_public_custom_fields;

        return $this;
    }

    /**
     * Gets livechat_automatic_forwarding_unanswered_chats
     *
     * @return bool|null
     */
    public function getLivechatAutomaticForwardingUnansweredChats()
    {
        return $this->container['livechat_automatic_forwarding_unanswered_chats'];
    }

    /**
     * Sets livechat_automatic_forwarding_unanswered_chats
     *
     * @param bool|null $livechat_automatic_forwarding_unanswered_chats livechat_automatic_forwarding_unanswered_chats
     *
     * @return self
     */
    public function setLivechatAutomaticForwardingUnansweredChats($livechat_automatic_forwarding_unanswered_chats)
    {
        if (is_null($livechat_automatic_forwarding_unanswered_chats)) {
            throw new \InvalidArgumentException('non-nullable livechat_automatic_forwarding_unanswered_chats cannot be null');
        }
        $this->container['livechat_automatic_forwarding_unanswered_chats'] = $livechat_automatic_forwarding_unanswered_chats;

        return $this;
    }

    /**
     * Gets routing_algorithm
     *
     * @return string|null
     */
    public function getRoutingAlgorithm()
    {
        return $this->container['routing_algorithm'];
    }

    /**
     * Sets routing_algorithm
     *
     * @param string|null $routing_algorithm routing_algorithm
     *
     * @return self
     */
    public function setRoutingAlgorithm($routing_algorithm)
    {
        if (is_null($routing_algorithm)) {
            throw new \InvalidArgumentException('non-nullable routing_algorithm cannot be null');
        }
        $this->container['routing_algorithm'] = $routing_algorithm;

        return $this;
    }

    /**
     * Gets on_hold_enabled
     *
     * @return bool|null
     */
    public function getOnHoldEnabled()
    {
        return $this->container['on_hold_enabled'];
    }

    /**
     * Sets on_hold_enabled
     *
     * @param bool|null $on_hold_enabled on_hold_enabled
     *
     * @return self
     */
    public function setOnHoldEnabled($on_hold_enabled)
    {
        if (is_null($on_hold_enabled)) {
            throw new \InvalidArgumentException('non-nullable on_hold_enabled cannot be null');
        }
        $this->container['on_hold_enabled'] = $on_hold_enabled;

        return $this;
    }

    /**
     * Gets last_chatted_agent_preferred
     *
     * @return bool|null
     */
    public function getLastChattedAgentPreferred()
    {
        return $this->container['last_chatted_agent_preferred'];
    }

    /**
     * Sets last_chatted_agent_preferred
     *
     * @param bool|null $last_chatted_agent_preferred last_chatted_agent_preferred
     *
     * @return self
     */
    public function setLastChattedAgentPreferred($last_chatted_agent_preferred)
    {
        if (is_null($last_chatted_agent_preferred)) {
            throw new \InvalidArgumentException('non-nullable last_chatted_agent_preferred cannot be null');
        }
        $this->container['last_chatted_agent_preferred'] = $last_chatted_agent_preferred;

        return $this;
    }

    /**
     * Gets assign_new_conversations_to_contact_manager
     *
     * @return bool|null
     */
    public function getAssignNewConversationsToContactManager()
    {
        return $this->container['assign_new_conversations_to_contact_manager'];
    }

    /**
     * Sets assign_new_conversations_to_contact_manager
     *
     * @param bool|null $assign_new_conversations_to_contact_manager assign_new_conversations_to_contact_manager
     *
     * @return self
     */
    public function setAssignNewConversationsToContactManager($assign_new_conversations_to_contact_manager)
    {
        if (is_null($assign_new_conversations_to_contact_manager)) {
            throw new \InvalidArgumentException('non-nullable assign_new_conversations_to_contact_manager cannot be null');
        }
        $this->container['assign_new_conversations_to_contact_manager'] = $assign_new_conversations_to_contact_manager;

        return $this;
    }

    /**
     * Gets visitor_abandonment
     *
     * @return string|null
     */
    public function getVisitorAbandonment()
    {
        return $this->container['visitor_abandonment'];
    }

    /**
     * Sets visitor_abandonment
     *
     * @param string|null $visitor_abandonment visitor_abandonment
     *
     * @return self
     */
    public function setVisitorAbandonment($visitor_abandonment)
    {
        if (is_null($visitor_abandonment)) {
            throw new \InvalidArgumentException('non-nullable visitor_abandonment cannot be null');
        }
        $this->container['visitor_abandonment'] = $visitor_abandonment;

        return $this;
    }

    /**
     * Gets voip_enabled
     *
     * @return bool|null
     */
    public function getVoipEnabled()
    {
        return $this->container['voip_enabled'];
    }

    /**
     * Sets voip_enabled
     *
     * @param bool|null $voip_enabled voip_enabled
     *
     * @return self
     */
    public function setVoipEnabled($voip_enabled)
    {
        if (is_null($voip_enabled)) {
            throw new \InvalidArgumentException('non-nullable voip_enabled cannot be null');
        }
        $this->container['voip_enabled'] = $voip_enabled;

        return $this;
    }

    /**
     * Gets email_inboxes
     *
     * @return int|null
     */
    public function getEmailInboxes()
    {
        return $this->container['email_inboxes'];
    }

    /**
     * Sets email_inboxes
     *
     * @param int|null $email_inboxes email_inboxes
     *
     * @return self
     */
    public function setEmailInboxes($email_inboxes)
    {
        if (is_null($email_inboxes)) {
            throw new \InvalidArgumentException('non-nullable email_inboxes cannot be null');
        }
        $this->container['email_inboxes'] = $email_inboxes;

        return $this;
    }

    /**
     * Gets business_hours
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours|null
     */
    public function getBusinessHours()
    {
        return $this->container['business_hours'];
    }

    /**
     * Sets business_hours
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours|null $business_hours business_hours
     *
     * @return self
     */
    public function setBusinessHours($business_hours)
    {
        if (is_null($business_hours)) {
            throw new \InvalidArgumentException('non-nullable business_hours cannot be null');
        }
        $this->container['business_hours'] = $business_hours;

        return $this;
    }

    /**
     * Gets voip_calls
     *
     * @return int|null
     */
    public function getVoipCalls()
    {
        return $this->container['voip_calls'];
    }

    /**
     * Sets voip_calls
     *
     * @param int|null $voip_calls voip_calls
     *
     * @return self
     */
    public function setVoipCalls($voip_calls)
    {
        if (is_null($voip_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_calls cannot be null');
        }
        $this->container['voip_calls'] = $voip_calls;

        return $this;
    }

    /**
     * Gets voip_extensions
     *
     * @return int|null
     */
    public function getVoipExtensions()
    {
        return $this->container['voip_extensions'];
    }

    /**
     * Sets voip_extensions
     *
     * @param int|null $voip_extensions voip_extensions
     *
     * @return self
     */
    public function setVoipExtensions($voip_extensions)
    {
        if (is_null($voip_extensions)) {
            throw new \InvalidArgumentException('non-nullable voip_extensions cannot be null');
        }
        $this->container['voip_extensions'] = $voip_extensions;

        return $this;
    }

    /**
     * Gets chats_on_hold
     *
     * @return int|null
     */
    public function getChatsOnHold()
    {
        return $this->container['chats_on_hold'];
    }

    /**
     * Sets chats_on_hold
     *
     * @param int|null $chats_on_hold chats_on_hold
     *
     * @return self
     */
    public function setChatsOnHold($chats_on_hold)
    {
        if (is_null($chats_on_hold)) {
            throw new \InvalidArgumentException('non-nullable chats_on_hold cannot be null');
        }
        $this->container['chats_on_hold'] = $chats_on_hold;

        return $this;
    }

    /**
     * Gets voip_successful_calls
     *
     * @return int|null
     */
    public function getVoipSuccessfulCalls()
    {
        return $this->container['voip_successful_calls'];
    }

    /**
     * Sets voip_successful_calls
     *
     * @param int|null $voip_successful_calls voip_successful_calls
     *
     * @return self
     */
    public function setVoipSuccessfulCalls($voip_successful_calls)
    {
        if (is_null($voip_successful_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_successful_calls cannot be null');
        }
        $this->container['voip_successful_calls'] = $voip_successful_calls;

        return $this;
    }

    /**
     * Gets voip_error_calls
     *
     * @return int|null
     */
    public function getVoipErrorCalls()
    {
        return $this->container['voip_error_calls'];
    }

    /**
     * Sets voip_error_calls
     *
     * @param int|null $voip_error_calls voip_error_calls
     *
     * @return self
     */
    public function setVoipErrorCalls($voip_error_calls)
    {
        if (is_null($voip_error_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_error_calls cannot be null');
        }
        $this->container['voip_error_calls'] = $voip_error_calls;

        return $this;
    }

    /**
     * Gets voip_on_hold_calls
     *
     * @return int|null
     */
    public function getVoipOnHoldCalls()
    {
        return $this->container['voip_on_hold_calls'];
    }

    /**
     * Sets voip_on_hold_calls
     *
     * @param int|null $voip_on_hold_calls voip_on_hold_calls
     *
     * @return self
     */
    public function setVoipOnHoldCalls($voip_on_hold_calls)
    {
        if (is_null($voip_on_hold_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_on_hold_calls cannot be null');
        }
        $this->container['voip_on_hold_calls'] = $voip_on_hold_calls;

        return $this;
    }

    /**
     * Gets omnichannel_contacts_by_source
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null
     */
    public function getOmnichannelContactsBySource()
    {
        return $this->container['omnichannel_contacts_by_source'];
    }

    /**
     * Sets omnichannel_contacts_by_source
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null $omnichannel_contacts_by_source omnichannel_contacts_by_source
     *
     * @return self
     */
    public function setOmnichannelContactsBySource($omnichannel_contacts_by_source)
    {
        if (is_null($omnichannel_contacts_by_source)) {
            throw new \InvalidArgumentException('non-nullable omnichannel_contacts_by_source cannot be null');
        }
        $this->container['omnichannel_contacts_by_source'] = $omnichannel_contacts_by_source;

        return $this;
    }

    /**
     * Gets unique_contacts_of_last_week
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null
     */
    public function getUniqueContactsOfLastWeek()
    {
        return $this->container['unique_contacts_of_last_week'];
    }

    /**
     * Sets unique_contacts_of_last_week
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null $unique_contacts_of_last_week unique_contacts_of_last_week
     *
     * @return self
     */
    public function setUniqueContactsOfLastWeek($unique_contacts_of_last_week)
    {
        if (is_null($unique_contacts_of_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_contacts_of_last_week cannot be null');
        }
        $this->container['unique_contacts_of_last_week'] = $unique_contacts_of_last_week;

        return $this;
    }

    /**
     * Gets unique_contacts_of_last_month
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null
     */
    public function getUniqueContactsOfLastMonth()
    {
        return $this->container['unique_contacts_of_last_month'];
    }

    /**
     * Sets unique_contacts_of_last_month
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null $unique_contacts_of_last_month unique_contacts_of_last_month
     *
     * @return self
     */
    public function setUniqueContactsOfLastMonth($unique_contacts_of_last_month)
    {
        if (is_null($unique_contacts_of_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_contacts_of_last_month cannot be null');
        }
        $this->container['unique_contacts_of_last_month'] = $unique_contacts_of_last_month;

        return $this;
    }

    /**
     * Gets unique_contacts_of_yesterday
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null
     */
    public function getUniqueContactsOfYesterday()
    {
        return $this->container['unique_contacts_of_yesterday'];
    }

    /**
     * Sets unique_contacts_of_yesterday
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOmnichannelContactsBySource|null $unique_contacts_of_yesterday unique_contacts_of_yesterday
     *
     * @return self
     */
    public function setUniqueContactsOfYesterday($unique_contacts_of_yesterday)
    {
        if (is_null($unique_contacts_of_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_contacts_of_yesterday cannot be null');
        }
        $this->container['unique_contacts_of_yesterday'] = $unique_contacts_of_yesterday;

        return $this;
    }

    /**
     * Gets total_channel_messages
     *
     * @return int|null
     */
    public function getTotalChannelMessages()
    {
        return $this->container['total_channel_messages'];
    }

    /**
     * Sets total_channel_messages
     *
     * @param int|null $total_channel_messages total_channel_messages
     *
     * @return self
     */
    public function setTotalChannelMessages($total_channel_messages)
    {
        if (is_null($total_channel_messages)) {
            throw new \InvalidArgumentException('non-nullable total_channel_messages cannot be null');
        }
        $this->container['total_channel_messages'] = $total_channel_messages;

        return $this;
    }

    /**
     * Gets total_private_group_messages
     *
     * @return int|null
     */
    public function getTotalPrivateGroupMessages()
    {
        return $this->container['total_private_group_messages'];
    }

    /**
     * Sets total_private_group_messages
     *
     * @param int|null $total_private_group_messages total_private_group_messages
     *
     * @return self
     */
    public function setTotalPrivateGroupMessages($total_private_group_messages)
    {
        if (is_null($total_private_group_messages)) {
            throw new \InvalidArgumentException('non-nullable total_private_group_messages cannot be null');
        }
        $this->container['total_private_group_messages'] = $total_private_group_messages;

        return $this;
    }

    /**
     * Gets total_discussions_messages
     *
     * @return int|null
     */
    public function getTotalDiscussionsMessages()
    {
        return $this->container['total_discussions_messages'];
    }

    /**
     * Sets total_discussions_messages
     *
     * @param int|null $total_discussions_messages total_discussions_messages
     *
     * @return self
     */
    public function setTotalDiscussionsMessages($total_discussions_messages)
    {
        if (is_null($total_discussions_messages)) {
            throw new \InvalidArgumentException('non-nullable total_discussions_messages cannot be null');
        }
        $this->container['total_discussions_messages'] = $total_discussions_messages;

        return $this;
    }

    /**
     * Gets total_direct_messages
     *
     * @return int|null
     */
    public function getTotalDirectMessages()
    {
        return $this->container['total_direct_messages'];
    }

    /**
     * Sets total_direct_messages
     *
     * @param int|null $total_direct_messages total_direct_messages
     *
     * @return self
     */
    public function setTotalDirectMessages($total_direct_messages)
    {
        if (is_null($total_direct_messages)) {
            throw new \InvalidArgumentException('non-nullable total_direct_messages cannot be null');
        }
        $this->container['total_direct_messages'] = $total_direct_messages;

        return $this;
    }

    /**
     * Gets total_livechat_messages
     *
     * @return int|null
     */
    public function getTotalLivechatMessages()
    {
        return $this->container['total_livechat_messages'];
    }

    /**
     * Sets total_livechat_messages
     *
     * @param int|null $total_livechat_messages total_livechat_messages
     *
     * @return self
     */
    public function setTotalLivechatMessages($total_livechat_messages)
    {
        if (is_null($total_livechat_messages)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_messages cannot be null');
        }
        $this->container['total_livechat_messages'] = $total_livechat_messages;

        return $this;
    }

    /**
     * Gets total_messages
     *
     * @return int|null
     */
    public function getTotalMessages()
    {
        return $this->container['total_messages'];
    }

    /**
     * Sets total_messages
     *
     * @param int|null $total_messages total_messages
     *
     * @return self
     */
    public function setTotalMessages($total_messages)
    {
        if (is_null($total_messages)) {
            throw new \InvalidArgumentException('non-nullable total_messages cannot be null');
        }
        $this->container['total_messages'] = $total_messages;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return string|null
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param string|null $last_login last_login
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        if (is_null($last_login)) {
            throw new \InvalidArgumentException('non-nullable last_login cannot be null');
        }
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets last_message_sent_at
     *
     * @return string|null
     */
    public function getLastMessageSentAt()
    {
        return $this->container['last_message_sent_at'];
    }

    /**
     * Sets last_message_sent_at
     *
     * @param string|null $last_message_sent_at last_message_sent_at
     *
     * @return self
     */
    public function setLastMessageSentAt($last_message_sent_at)
    {
        if (is_null($last_message_sent_at)) {
            throw new \InvalidArgumentException('non-nullable last_message_sent_at cannot be null');
        }
        $this->container['last_message_sent_at'] = $last_message_sent_at;

        return $this;
    }

    /**
     * Gets federated_servers
     *
     * @return int|null
     */
    public function getFederatedServers()
    {
        return $this->container['federated_servers'];
    }

    /**
     * Sets federated_servers
     *
     * @param int|null $federated_servers federated_servers
     *
     * @return self
     */
    public function setFederatedServers($federated_servers)
    {
        if (is_null($federated_servers)) {
            throw new \InvalidArgumentException('non-nullable federated_servers cannot be null');
        }
        $this->container['federated_servers'] = $federated_servers;

        return $this;
    }

    /**
     * Gets federated_users
     *
     * @return int|null
     */
    public function getFederatedUsers()
    {
        return $this->container['federated_users'];
    }

    /**
     * Sets federated_users
     *
     * @param int|null $federated_users federated_users
     *
     * @return self
     */
    public function setFederatedUsers($federated_users)
    {
        if (is_null($federated_users)) {
            throw new \InvalidArgumentException('non-nullable federated_users cannot be null');
        }
        $this->container['federated_users'] = $federated_users;

        return $this;
    }

    /**
     * Gets last_seen_subscription
     *
     * @return string|null
     */
    public function getLastSeenSubscription()
    {
        return $this->container['last_seen_subscription'];
    }

    /**
     * Sets last_seen_subscription
     *
     * @param string|null $last_seen_subscription last_seen_subscription
     *
     * @return self
     */
    public function setLastSeenSubscription($last_seen_subscription)
    {
        if (is_null($last_seen_subscription)) {
            throw new \InvalidArgumentException('non-nullable last_seen_subscription cannot be null');
        }
        $this->container['last_seen_subscription'] = $last_seen_subscription;

        return $this;
    }

    /**
     * Gets os
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOs|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseOs|null $os os
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets process
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess|null
     */
    public function getProcess()
    {
        return $this->container['process'];
    }

    /**
     * Sets process
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess|null $process process
     *
     * @return self
     */
    public function setProcess($process)
    {
        if (is_null($process)) {
            throw new \InvalidArgumentException('non-nullable process cannot be null');
        }
        $this->container['process'] = $process;

        return $this;
    }

    /**
     * Gets deploy
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy|null
     */
    public function getDeploy()
    {
        return $this->container['deploy'];
    }

    /**
     * Sets deploy
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy|null $deploy deploy
     *
     * @return self
     */
    public function setDeploy($deploy)
    {
        if (is_null($deploy)) {
            throw new \InvalidArgumentException('non-nullable deploy cannot be null');
        }
        $this->container['deploy'] = $deploy;

        return $this;
    }

    /**
     * Gets read_receipts_enabled
     *
     * @return bool|null
     */
    public function getReadReceiptsEnabled()
    {
        return $this->container['read_receipts_enabled'];
    }

    /**
     * Sets read_receipts_enabled
     *
     * @param bool|null $read_receipts_enabled read_receipts_enabled
     *
     * @return self
     */
    public function setReadReceiptsEnabled($read_receipts_enabled)
    {
        if (is_null($read_receipts_enabled)) {
            throw new \InvalidArgumentException('non-nullable read_receipts_enabled cannot be null');
        }
        $this->container['read_receipts_enabled'] = $read_receipts_enabled;

        return $this;
    }

    /**
     * Gets read_receipts_detailed
     *
     * @return bool|null
     */
    public function getReadReceiptsDetailed()
    {
        return $this->container['read_receipts_detailed'];
    }

    /**
     * Sets read_receipts_detailed
     *
     * @param bool|null $read_receipts_detailed read_receipts_detailed
     *
     * @return self
     */
    public function setReadReceiptsDetailed($read_receipts_detailed)
    {
        if (is_null($read_receipts_detailed)) {
            throw new \InvalidArgumentException('non-nullable read_receipts_detailed cannot be null');
        }
        $this->container['read_receipts_detailed'] = $read_receipts_detailed;

        return $this;
    }

    /**
     * Gets enterprise_ready
     *
     * @return bool|null
     */
    public function getEnterpriseReady()
    {
        return $this->container['enterprise_ready'];
    }

    /**
     * Sets enterprise_ready
     *
     * @param bool|null $enterprise_ready enterprise_ready
     *
     * @return self
     */
    public function setEnterpriseReady($enterprise_ready)
    {
        if (is_null($enterprise_ready)) {
            throw new \InvalidArgumentException('non-nullable enterprise_ready cannot be null');
        }
        $this->container['enterprise_ready'] = $enterprise_ready;

        return $this;
    }

    /**
     * Gets uploads_total
     *
     * @return int|null
     */
    public function getUploadsTotal()
    {
        return $this->container['uploads_total'];
    }

    /**
     * Sets uploads_total
     *
     * @param int|null $uploads_total uploads_total
     *
     * @return self
     */
    public function setUploadsTotal($uploads_total)
    {
        if (is_null($uploads_total)) {
            throw new \InvalidArgumentException('non-nullable uploads_total cannot be null');
        }
        $this->container['uploads_total'] = $uploads_total;

        return $this;
    }

    /**
     * Gets migration
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMigration|null
     */
    public function getMigration()
    {
        return $this->container['migration'];
    }

    /**
     * Sets migration
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMigration|null $migration migration
     *
     * @return self
     */
    public function setMigration($migration)
    {
        if (is_null($migration)) {
            throw new \InvalidArgumentException('non-nullable migration cannot be null');
        }
        $this->container['migration'] = $migration;

        return $this;
    }

    /**
     * Gets uploads_total_size
     *
     * @return int|null
     */
    public function getUploadsTotalSize()
    {
        return $this->container['uploads_total_size'];
    }

    /**
     * Sets uploads_total_size
     *
     * @param int|null $uploads_total_size uploads_total_size
     *
     * @return self
     */
    public function setUploadsTotalSize($uploads_total_size)
    {
        if (is_null($uploads_total_size)) {
            throw new \InvalidArgumentException('non-nullable uploads_total_size cannot be null');
        }
        $this->container['uploads_total_size'] = $uploads_total_size;

        return $this;
    }

    /**
     * Gets instance_count
     *
     * @return int|null
     */
    public function getInstanceCount()
    {
        return $this->container['instance_count'];
    }

    /**
     * Sets instance_count
     *
     * @param int|null $instance_count instance_count
     *
     * @return self
     */
    public function setInstanceCount($instance_count)
    {
        if (is_null($instance_count)) {
            throw new \InvalidArgumentException('non-nullable instance_count cannot be null');
        }
        $this->container['instance_count'] = $instance_count;

        return $this;
    }

    /**
     * Gets ms_enabled
     *
     * @return bool|null
     */
    public function getMsEnabled()
    {
        return $this->container['ms_enabled'];
    }

    /**
     * Sets ms_enabled
     *
     * @param bool|null $ms_enabled ms_enabled
     *
     * @return self
     */
    public function setMsEnabled($ms_enabled)
    {
        if (is_null($ms_enabled)) {
            throw new \InvalidArgumentException('non-nullable ms_enabled cannot be null');
        }
        $this->container['ms_enabled'] = $ms_enabled;

        return $this;
    }

    /**
     * Gets oplog_enabled
     *
     * @return bool|null
     */
    public function getOplogEnabled()
    {
        return $this->container['oplog_enabled'];
    }

    /**
     * Sets oplog_enabled
     *
     * @param bool|null $oplog_enabled oplog_enabled
     *
     * @return self
     */
    public function setOplogEnabled($oplog_enabled)
    {
        if (is_null($oplog_enabled)) {
            throw new \InvalidArgumentException('non-nullable oplog_enabled cannot be null');
        }
        $this->container['oplog_enabled'] = $oplog_enabled;

        return $this;
    }

    /**
     * Gets mongo_version
     *
     * @return string|null
     */
    public function getMongoVersion()
    {
        return $this->container['mongo_version'];
    }

    /**
     * Sets mongo_version
     *
     * @param string|null $mongo_version mongo_version
     *
     * @return self
     */
    public function setMongoVersion($mongo_version)
    {
        if (is_null($mongo_version)) {
            throw new \InvalidArgumentException('non-nullable mongo_version cannot be null');
        }
        $this->container['mongo_version'] = $mongo_version;

        return $this;
    }

    /**
     * Gets mongo_storage_engine
     *
     * @return string|null
     */
    public function getMongoStorageEngine()
    {
        return $this->container['mongo_storage_engine'];
    }

    /**
     * Sets mongo_storage_engine
     *
     * @param string|null $mongo_storage_engine mongo_storage_engine
     *
     * @return self
     */
    public function setMongoStorageEngine($mongo_storage_engine)
    {
        if (is_null($mongo_storage_engine)) {
            throw new \InvalidArgumentException('non-nullable mongo_storage_engine cannot be null');
        }
        $this->container['mongo_storage_engine'] = $mongo_storage_engine;

        return $this;
    }

    /**
     * Gets apps
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseApps|null
     */
    public function getApps()
    {
        return $this->container['apps'];
    }

    /**
     * Sets apps
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseApps|null $apps apps
     *
     * @return self
     */
    public function setApps($apps)
    {
        if (is_null($apps)) {
            throw new \InvalidArgumentException('non-nullable apps cannot be null');
        }
        $this->container['apps'] = $apps;

        return $this;
    }

    /**
     * Gets unique_users_of_yesterday
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null
     */
    public function getUniqueUsersOfYesterday()
    {
        return $this->container['unique_users_of_yesterday'];
    }

    /**
     * Sets unique_users_of_yesterday
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null $unique_users_of_yesterday unique_users_of_yesterday
     *
     * @return self
     */
    public function setUniqueUsersOfYesterday($unique_users_of_yesterday)
    {
        if (is_null($unique_users_of_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_yesterday cannot be null');
        }
        $this->container['unique_users_of_yesterday'] = $unique_users_of_yesterday;

        return $this;
    }

    /**
     * Gets unique_devices_of_yesterday
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null
     */
    public function getUniqueDevicesOfYesterday()
    {
        return $this->container['unique_devices_of_yesterday'];
    }

    /**
     * Sets unique_devices_of_yesterday
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null $unique_devices_of_yesterday unique_devices_of_yesterday
     *
     * @return self
     */
    public function setUniqueDevicesOfYesterday($unique_devices_of_yesterday)
    {
        if (is_null($unique_devices_of_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_yesterday cannot be null');
        }
        $this->container['unique_devices_of_yesterday'] = $unique_devices_of_yesterday;

        return $this;
    }

    /**
     * Gets unique_users_of_last_week
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek|null
     */
    public function getUniqueUsersOfLastWeek()
    {
        return $this->container['unique_users_of_last_week'];
    }

    /**
     * Sets unique_users_of_last_week
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek|null $unique_users_of_last_week unique_users_of_last_week
     *
     * @return self
     */
    public function setUniqueUsersOfLastWeek($unique_users_of_last_week)
    {
        if (is_null($unique_users_of_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_last_week cannot be null');
        }
        $this->container['unique_users_of_last_week'] = $unique_users_of_last_week;

        return $this;
    }

    /**
     * Gets unique_osof_yesterday
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null
     */
    public function getUniqueOsofYesterday()
    {
        return $this->container['unique_osof_yesterday'];
    }

    /**
     * Sets unique_osof_yesterday
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfYesterday|null $unique_osof_yesterday unique_osof_yesterday
     *
     * @return self
     */
    public function setUniqueOsofYesterday($unique_osof_yesterday)
    {
        if (is_null($unique_osof_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_yesterday cannot be null');
        }
        $this->container['unique_osof_yesterday'] = $unique_osof_yesterday;

        return $this;
    }

    /**
     * Gets unique_devices_of_last_month
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth|null
     */
    public function getUniqueDevicesOfLastMonth()
    {
        return $this->container['unique_devices_of_last_month'];
    }

    /**
     * Sets unique_devices_of_last_month
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth|null $unique_devices_of_last_month unique_devices_of_last_month
     *
     * @return self
     */
    public function setUniqueDevicesOfLastMonth($unique_devices_of_last_month)
    {
        if (is_null($unique_devices_of_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_last_month cannot be null');
        }
        $this->container['unique_devices_of_last_month'] = $unique_devices_of_last_month;

        return $this;
    }

    /**
     * Gets unique_osof_last_week
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek|null
     */
    public function getUniqueOsofLastWeek()
    {
        return $this->container['unique_osof_last_week'];
    }

    /**
     * Sets unique_osof_last_week
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek|null $unique_osof_last_week unique_osof_last_week
     *
     * @return self
     */
    public function setUniqueOsofLastWeek($unique_osof_last_week)
    {
        if (is_null($unique_osof_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_last_week cannot be null');
        }
        $this->container['unique_osof_last_week'] = $unique_osof_last_week;

        return $this;
    }

    /**
     * Gets unique_devices_of_last_week
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth|null
     */
    public function getUniqueDevicesOfLastWeek()
    {
        return $this->container['unique_devices_of_last_week'];
    }

    /**
     * Sets unique_devices_of_last_week
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueDevicesOfLastMonth|null $unique_devices_of_last_week unique_devices_of_last_week
     *
     * @return self
     */
    public function setUniqueDevicesOfLastWeek($unique_devices_of_last_week)
    {
        if (is_null($unique_devices_of_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_last_week cannot be null');
        }
        $this->container['unique_devices_of_last_week'] = $unique_devices_of_last_week;

        return $this;
    }

    /**
     * Gets unique_users_of_last_month
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek|null
     */
    public function getUniqueUsersOfLastMonth()
    {
        return $this->container['unique_users_of_last_month'];
    }

    /**
     * Sets unique_users_of_last_month
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueUsersOfLastWeek|null $unique_users_of_last_month unique_users_of_last_month
     *
     * @return self
     */
    public function setUniqueUsersOfLastMonth($unique_users_of_last_month)
    {
        if (is_null($unique_users_of_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_last_month cannot be null');
        }
        $this->container['unique_users_of_last_month'] = $unique_users_of_last_month;

        return $this;
    }

    /**
     * Gets unique_osof_last_month
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek|null
     */
    public function getUniqueOsofLastMonth()
    {
        return $this->container['unique_osof_last_month'];
    }

    /**
     * Sets unique_osof_last_month
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseUniqueOSOfLastWeek|null $unique_osof_last_month unique_osof_last_month
     *
     * @return self
     */
    public function setUniqueOsofLastMonth($unique_osof_last_month)
    {
        if (is_null($unique_osof_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_last_month cannot be null');
        }
        $this->container['unique_osof_last_month'] = $unique_osof_last_month;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseServices|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseServices|null $services services
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter|null
     */
    public function getImporter()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter|null $importer importer
     *
     * @return self
     */
    public function setImporter($importer)
    {
        if (is_null($importer)) {
            throw new \InvalidArgumentException('non-nullable importer cannot be null');
        }
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets video_conf
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseVideoConf|null
     */
    public function getVideoConf()
    {
        return $this->container['video_conf'];
    }

    /**
     * Sets video_conf
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseVideoConf|null $video_conf video_conf
     *
     * @return self
     */
    public function setVideoConf($video_conf)
    {
        if (is_null($video_conf)) {
            throw new \InvalidArgumentException('non-nullable video_conf cannot be null');
        }
        $this->container['video_conf'] = $video_conf;

        return $this;
    }

    /**
     * Gets dashboard_count
     *
     * @return int|null
     */
    public function getDashboardCount()
    {
        return $this->container['dashboard_count'];
    }

    /**
     * Sets dashboard_count
     *
     * @param int|null $dashboard_count dashboard_count
     *
     * @return self
     */
    public function setDashboardCount($dashboard_count)
    {
        if (is_null($dashboard_count)) {
            throw new \InvalidArgumentException('non-nullable dashboard_count cannot be null');
        }
        $this->container['dashboard_count'] = $dashboard_count;

        return $this;
    }

    /**
     * Gets message_audit_apply
     *
     * @return int|null
     */
    public function getMessageAuditApply()
    {
        return $this->container['message_audit_apply'];
    }

    /**
     * Sets message_audit_apply
     *
     * @param int|null $message_audit_apply message_audit_apply
     *
     * @return self
     */
    public function setMessageAuditApply($message_audit_apply)
    {
        if (is_null($message_audit_apply)) {
            throw new \InvalidArgumentException('non-nullable message_audit_apply cannot be null');
        }
        $this->container['message_audit_apply'] = $message_audit_apply;

        return $this;
    }

    /**
     * Gets message_audit_load
     *
     * @return int|null
     */
    public function getMessageAuditLoad()
    {
        return $this->container['message_audit_load'];
    }

    /**
     * Sets message_audit_load
     *
     * @param int|null $message_audit_load message_audit_load
     *
     * @return self
     */
    public function setMessageAuditLoad($message_audit_load)
    {
        if (is_null($message_audit_load)) {
            throw new \InvalidArgumentException('non-nullable message_audit_load cannot be null');
        }
        $this->container['message_audit_load'] = $message_audit_load;

        return $this;
    }

    /**
     * Gets join_jitsi_button
     *
     * @return int|null
     */
    public function getJoinJitsiButton()
    {
        return $this->container['join_jitsi_button'];
    }

    /**
     * Sets join_jitsi_button
     *
     * @param int|null $join_jitsi_button join_jitsi_button
     *
     * @return self
     */
    public function setJoinJitsiButton($join_jitsi_button)
    {
        if (is_null($join_jitsi_button)) {
            throw new \InvalidArgumentException('non-nullable join_jitsi_button cannot be null');
        }
        $this->container['join_jitsi_button'] = $join_jitsi_button;

        return $this;
    }

    /**
     * Gets slash_commands_jitsi
     *
     * @return int|null
     */
    public function getSlashCommandsJitsi()
    {
        return $this->container['slash_commands_jitsi'];
    }

    /**
     * Sets slash_commands_jitsi
     *
     * @param int|null $slash_commands_jitsi slash_commands_jitsi
     *
     * @return self
     */
    public function setSlashCommandsJitsi($slash_commands_jitsi)
    {
        if (is_null($slash_commands_jitsi)) {
            throw new \InvalidArgumentException('non-nullable slash_commands_jitsi cannot be null');
        }
        $this->container['slash_commands_jitsi'] = $slash_commands_jitsi;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseSettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets push_queue
     *
     * @return int|null
     */
    public function getPushQueue()
    {
        return $this->container['push_queue'];
    }

    /**
     * Sets push_queue
     *
     * @param int|null $push_queue push_queue
     *
     * @return self
     */
    public function setPushQueue($push_queue)
    {
        if (is_null($push_queue)) {
            throw new \InvalidArgumentException('non-nullable push_queue cannot be null');
        }
        $this->container['push_queue'] = $push_queue;

        return $this;
    }

    /**
     * Gets total_otr_rooms
     *
     * @return int|null
     */
    public function getTotalOtrRooms()
    {
        return $this->container['total_otr_rooms'];
    }

    /**
     * Sets total_otr_rooms
     *
     * @param int|null $total_otr_rooms total_otr_rooms
     *
     * @return self
     */
    public function setTotalOtrRooms($total_otr_rooms)
    {
        if (is_null($total_otr_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_otr_rooms cannot be null');
        }
        $this->container['total_otr_rooms'] = $total_otr_rooms;

        return $this;
    }

    /**
     * Gets total_otr
     *
     * @return int|null
     */
    public function getTotalOtr()
    {
        return $this->container['total_otr'];
    }

    /**
     * Sets total_otr
     *
     * @param int|null $total_otr total_otr
     *
     * @return self
     */
    public function setTotalOtr($total_otr)
    {
        if (is_null($total_otr)) {
            throw new \InvalidArgumentException('non-nullable total_otr cannot be null');
        }
        $this->container['total_otr'] = $total_otr;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations|null
     */
    public function getIntegrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations|null $integrations integrations
     *
     * @return self
     */
    public function setIntegrations($integrations)
    {
        if (is_null($integrations)) {
            throw new \InvalidArgumentException('non-nullable integrations cannot be null');
        }
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets total_broadcast_rooms
     *
     * @return int|null
     */
    public function getTotalBroadcastRooms()
    {
        return $this->container['total_broadcast_rooms'];
    }

    /**
     * Sets total_broadcast_rooms
     *
     * @param int|null $total_broadcast_rooms total_broadcast_rooms
     *
     * @return self
     */
    public function setTotalBroadcastRooms($total_broadcast_rooms)
    {
        if (is_null($total_broadcast_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_broadcast_rooms cannot be null');
        }
        $this->container['total_broadcast_rooms'] = $total_broadcast_rooms;

        return $this;
    }

    /**
     * Gets enterprise
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseEnterprise|null
     */
    public function getEnterprise()
    {
        return $this->container['enterprise'];
    }

    /**
     * Sets enterprise
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseEnterprise|null $enterprise enterprise
     *
     * @return self
     */
    public function setEnterprise($enterprise)
    {
        if (is_null($enterprise)) {
            throw new \InvalidArgumentException('non-nullable enterprise cannot be null');
        }
        $this->container['enterprise'] = $enterprise;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams|null
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams|null $teams teams
     *
     * @return self
     */
    public function setTeams($teams)
    {
        if (is_null($teams)) {
            throw new \InvalidArgumentException('non-nullable teams cannot be null');
        }
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets total_rooms_with_active_livestream
     *
     * @return int|null
     */
    public function getTotalRoomsWithActiveLivestream()
    {
        return $this->container['total_rooms_with_active_livestream'];
    }

    /**
     * Sets total_rooms_with_active_livestream
     *
     * @param int|null $total_rooms_with_active_livestream total_rooms_with_active_livestream
     *
     * @return self
     */
    public function setTotalRoomsWithActiveLivestream($total_rooms_with_active_livestream)
    {
        if (is_null($total_rooms_with_active_livestream)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_active_livestream cannot be null');
        }
        $this->container['total_rooms_with_active_livestream'] = $total_rooms_with_active_livestream;

        return $this;
    }

    /**
     * Gets total_triggered_emails
     *
     * @return int|null
     */
    public function getTotalTriggeredEmails()
    {
        return $this->container['total_triggered_emails'];
    }

    /**
     * Sets total_triggered_emails
     *
     * @param int|null $total_triggered_emails total_triggered_emails
     *
     * @return self
     */
    public function setTotalTriggeredEmails($total_triggered_emails)
    {
        if (is_null($total_triggered_emails)) {
            throw new \InvalidArgumentException('non-nullable total_triggered_emails cannot be null');
        }
        $this->container['total_triggered_emails'] = $total_triggered_emails;

        return $this;
    }

    /**
     * Gets total_rooms_with_starred
     *
     * @return int|null
     */
    public function getTotalRoomsWithStarred()
    {
        return $this->container['total_rooms_with_starred'];
    }

    /**
     * Sets total_rooms_with_starred
     *
     * @param int|null $total_rooms_with_starred total_rooms_with_starred
     *
     * @return self
     */
    public function setTotalRoomsWithStarred($total_rooms_with_starred)
    {
        if (is_null($total_rooms_with_starred)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_starred cannot be null');
        }
        $this->container['total_rooms_with_starred'] = $total_rooms_with_starred;

        return $this;
    }

    /**
     * Gets total_rooms_with_pinned
     *
     * @return int|null
     */
    public function getTotalRoomsWithPinned()
    {
        return $this->container['total_rooms_with_pinned'];
    }

    /**
     * Sets total_rooms_with_pinned
     *
     * @param int|null $total_rooms_with_pinned total_rooms_with_pinned
     *
     * @return self
     */
    public function setTotalRoomsWithPinned($total_rooms_with_pinned)
    {
        if (is_null($total_rooms_with_pinned)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_pinned cannot be null');
        }
        $this->container['total_rooms_with_pinned'] = $total_rooms_with_pinned;

        return $this;
    }

    /**
     * Gets total_user_totp
     *
     * @return int|null
     */
    public function getTotalUserTotp()
    {
        return $this->container['total_user_totp'];
    }

    /**
     * Sets total_user_totp
     *
     * @param int|null $total_user_totp total_user_totp
     *
     * @return self
     */
    public function setTotalUserTotp($total_user_totp)
    {
        if (is_null($total_user_totp)) {
            throw new \InvalidArgumentException('non-nullable total_user_totp cannot be null');
        }
        $this->container['total_user_totp'] = $total_user_totp;

        return $this;
    }

    /**
     * Gets total_user_email2fa
     *
     * @return int|null
     */
    public function getTotalUserEmail2fa()
    {
        return $this->container['total_user_email2fa'];
    }

    /**
     * Sets total_user_email2fa
     *
     * @param int|null $total_user_email2fa total_user_email2fa
     *
     * @return self
     */
    public function setTotalUserEmail2fa($total_user_email2fa)
    {
        if (is_null($total_user_email2fa)) {
            throw new \InvalidArgumentException('non-nullable total_user_email2fa cannot be null');
        }
        $this->container['total_user_email2fa'] = $total_user_email2fa;

        return $this;
    }

    /**
     * Gets total_pinned
     *
     * @return int|null
     */
    public function getTotalPinned()
    {
        return $this->container['total_pinned'];
    }

    /**
     * Sets total_pinned
     *
     * @param int|null $total_pinned total_pinned
     *
     * @return self
     */
    public function setTotalPinned($total_pinned)
    {
        if (is_null($total_pinned)) {
            throw new \InvalidArgumentException('non-nullable total_pinned cannot be null');
        }
        $this->container['total_pinned'] = $total_pinned;

        return $this;
    }

    /**
     * Gets total_starred
     *
     * @return int|null
     */
    public function getTotalStarred()
    {
        return $this->container['total_starred'];
    }

    /**
     * Sets total_starred
     *
     * @param int|null $total_starred total_starred
     *
     * @return self
     */
    public function setTotalStarred($total_starred)
    {
        if (is_null($total_starred)) {
            throw new \InvalidArgumentException('non-nullable total_starred cannot be null');
        }
        $this->container['total_starred'] = $total_starred;

        return $this;
    }

    /**
     * Gets total_link_invitation
     *
     * @return int|null
     */
    public function getTotalLinkInvitation()
    {
        return $this->container['total_link_invitation'];
    }

    /**
     * Sets total_link_invitation
     *
     * @param int|null $total_link_invitation total_link_invitation
     *
     * @return self
     */
    public function setTotalLinkInvitation($total_link_invitation)
    {
        if (is_null($total_link_invitation)) {
            throw new \InvalidArgumentException('non-nullable total_link_invitation cannot be null');
        }
        $this->container['total_link_invitation'] = $total_link_invitation;

        return $this;
    }

    /**
     * Gets total_link_invitation_uses
     *
     * @return int|null
     */
    public function getTotalLinkInvitationUses()
    {
        return $this->container['total_link_invitation_uses'];
    }

    /**
     * Sets total_link_invitation_uses
     *
     * @param int|null $total_link_invitation_uses total_link_invitation_uses
     *
     * @return self
     */
    public function setTotalLinkInvitationUses($total_link_invitation_uses)
    {
        if (is_null($total_link_invitation_uses)) {
            throw new \InvalidArgumentException('non-nullable total_link_invitation_uses cannot be null');
        }
        $this->container['total_link_invitation_uses'] = $total_link_invitation_uses;

        return $this;
    }

    /**
     * Gets total_email_invitation
     *
     * @return int|null
     */
    public function getTotalEmailInvitation()
    {
        return $this->container['total_email_invitation'];
    }

    /**
     * Sets total_email_invitation
     *
     * @param int|null $total_email_invitation total_email_invitation
     *
     * @return self
     */
    public function setTotalEmailInvitation($total_email_invitation)
    {
        if (is_null($total_email_invitation)) {
            throw new \InvalidArgumentException('non-nullable total_email_invitation cannot be null');
        }
        $this->container['total_email_invitation'] = $total_email_invitation;

        return $this;
    }

    /**
     * Gets total_e2_e_rooms
     *
     * @return int|null
     */
    public function getTotalE2ERooms()
    {
        return $this->container['total_e2_e_rooms'];
    }

    /**
     * Sets total_e2_e_rooms
     *
     * @param int|null $total_e2_e_rooms total_e2_e_rooms
     *
     * @return self
     */
    public function setTotalE2ERooms($total_e2_e_rooms)
    {
        if (is_null($total_e2_e_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_e2_e_rooms cannot be null');
        }
        $this->container['total_e2_e_rooms'] = $total_e2_e_rooms;

        return $this;
    }

    /**
     * Gets logo_change
     *
     * @return bool|null
     */
    public function getLogoChange()
    {
        return $this->container['logo_change'];
    }

    /**
     * Sets logo_change
     *
     * @param bool|null $logo_change logo_change
     *
     * @return self
     */
    public function setLogoChange($logo_change)
    {
        if (is_null($logo_change)) {
            throw new \InvalidArgumentException('non-nullable logo_change cannot be null');
        }
        $this->container['logo_change'] = $logo_change;

        return $this;
    }

    /**
     * Gets show_home_button
     *
     * @return bool|null
     */
    public function getShowHomeButton()
    {
        return $this->container['show_home_button'];
    }

    /**
     * Sets show_home_button
     *
     * @param bool|null $show_home_button show_home_button
     *
     * @return self
     */
    public function setShowHomeButton($show_home_button)
    {
        if (is_null($show_home_button)) {
            throw new \InvalidArgumentException('non-nullable show_home_button cannot be null');
        }
        $this->container['show_home_button'] = $show_home_button;

        return $this;
    }

    /**
     * Gets total_encrypted_messages
     *
     * @return int|null
     */
    public function getTotalEncryptedMessages()
    {
        return $this->container['total_encrypted_messages'];
    }

    /**
     * Sets total_encrypted_messages
     *
     * @param int|null $total_encrypted_messages total_encrypted_messages
     *
     * @return self
     */
    public function setTotalEncryptedMessages($total_encrypted_messages)
    {
        if (is_null($total_encrypted_messages)) {
            throw new \InvalidArgumentException('non-nullable total_encrypted_messages cannot be null');
        }
        $this->container['total_encrypted_messages'] = $total_encrypted_messages;

        return $this;
    }

    /**
     * Gets total_manually_added_users
     *
     * @return int|null
     */
    public function getTotalManuallyAddedUsers()
    {
        return $this->container['total_manually_added_users'];
    }

    /**
     * Sets total_manually_added_users
     *
     * @param int|null $total_manually_added_users total_manually_added_users
     *
     * @return self
     */
    public function setTotalManuallyAddedUsers($total_manually_added_users)
    {
        if (is_null($total_manually_added_users)) {
            throw new \InvalidArgumentException('non-nullable total_manually_added_users cannot be null');
        }
        $this->container['total_manually_added_users'] = $total_manually_added_users;

        return $this;
    }

    /**
     * Gets total_subscription_roles
     *
     * @return int|null
     */
    public function getTotalSubscriptionRoles()
    {
        return $this->container['total_subscription_roles'];
    }

    /**
     * Sets total_subscription_roles
     *
     * @param int|null $total_subscription_roles total_subscription_roles
     *
     * @return self
     */
    public function setTotalSubscriptionRoles($total_subscription_roles)
    {
        if (is_null($total_subscription_roles)) {
            throw new \InvalidArgumentException('non-nullable total_subscription_roles cannot be null');
        }
        $this->container['total_subscription_roles'] = $total_subscription_roles;

        return $this;
    }

    /**
     * Gets total_user_roles
     *
     * @return int|null
     */
    public function getTotalUserRoles()
    {
        return $this->container['total_user_roles'];
    }

    /**
     * Sets total_user_roles
     *
     * @param int|null $total_user_roles total_user_roles
     *
     * @return self
     */
    public function setTotalUserRoles($total_user_roles)
    {
        if (is_null($total_user_roles)) {
            throw new \InvalidArgumentException('non-nullable total_user_roles cannot be null');
        }
        $this->container['total_user_roles'] = $total_user_roles;

        return $this;
    }

    /**
     * Gets total_custom_roles
     *
     * @return int|null
     */
    public function getTotalCustomRoles()
    {
        return $this->container['total_custom_roles'];
    }

    /**
     * Sets total_custom_roles
     *
     * @param int|null $total_custom_roles total_custom_roles
     *
     * @return self
     */
    public function setTotalCustomRoles($total_custom_roles)
    {
        if (is_null($total_custom_roles)) {
            throw new \InvalidArgumentException('non-nullable total_custom_roles cannot be null');
        }
        $this->container['total_custom_roles'] = $total_custom_roles;

        return $this;
    }

    /**
     * Gets total_web_rtc_calls
     *
     * @return int|null
     */
    public function getTotalWebRtcCalls()
    {
        return $this->container['total_web_rtc_calls'];
    }

    /**
     * Sets total_web_rtc_calls
     *
     * @param int|null $total_web_rtc_calls total_web_rtc_calls
     *
     * @return self
     */
    public function setTotalWebRtcCalls($total_web_rtc_calls)
    {
        if (is_null($total_web_rtc_calls)) {
            throw new \InvalidArgumentException('non-nullable total_web_rtc_calls cannot be null');
        }
        $this->container['total_web_rtc_calls'] = $total_web_rtc_calls;

        return $this;
    }

    /**
     * Gets uncaught_exceptions_count
     *
     * @return int|null
     */
    public function getUncaughtExceptionsCount()
    {
        return $this->container['uncaught_exceptions_count'];
    }

    /**
     * Sets uncaught_exceptions_count
     *
     * @param int|null $uncaught_exceptions_count uncaught_exceptions_count
     *
     * @return self
     */
    public function setUncaughtExceptionsCount($uncaught_exceptions_count)
    {
        if (is_null($uncaught_exceptions_count)) {
            throw new \InvalidArgumentException('non-nullable uncaught_exceptions_count cannot be null');
        }
        $this->container['uncaught_exceptions_count'] = $uncaught_exceptions_count;

        return $this;
    }

    /**
     * Gets push
     *
     * @return int|null
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param int|null $push push
     *
     * @return self
     */
    public function setPush($push)
    {
        if (is_null($push)) {
            throw new \InvalidArgumentException('non-nullable push cannot be null');
        }
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets push_secured
     *
     * @return bool|null
     */
    public function getPushSecured()
    {
        return $this->container['push_secured'];
    }

    /**
     * Sets push_secured
     *
     * @param bool|null $push_secured push_secured
     *
     * @return self
     */
    public function setPushSecured($push_secured)
    {
        if (is_null($push_secured)) {
            throw new \InvalidArgumentException('non-nullable push_secured cannot be null');
        }
        $this->container['push_secured'] = $push_secured;

        return $this;
    }

    /**
     * Gets home_title_changed
     *
     * @return bool|null
     */
    public function getHomeTitleChanged()
    {
        return $this->container['home_title_changed'];
    }

    /**
     * Sets home_title_changed
     *
     * @param bool|null $home_title_changed home_title_changed
     *
     * @return self
     */
    public function setHomeTitleChanged($home_title_changed)
    {
        if (is_null($home_title_changed)) {
            throw new \InvalidArgumentException('non-nullable home_title_changed cannot be null');
        }
        $this->container['home_title_changed'] = $home_title_changed;

        return $this;
    }

    /**
     * Gets home_body_changed
     *
     * @return bool|null
     */
    public function getHomeBodyChanged()
    {
        return $this->container['home_body_changed'];
    }

    /**
     * Sets home_body_changed
     *
     * @param bool|null $home_body_changed home_body_changed
     *
     * @return self
     */
    public function setHomeBodyChanged($home_body_changed)
    {
        if (is_null($home_body_changed)) {
            throw new \InvalidArgumentException('non-nullable home_body_changed cannot be null');
        }
        $this->container['home_body_changed'] = $home_body_changed;

        return $this;
    }

    /**
     * Gets custom_css_changed
     *
     * @return bool|null
     */
    public function getCustomCssChanged()
    {
        return $this->container['custom_css_changed'];
    }

    /**
     * Sets custom_css_changed
     *
     * @param bool|null $custom_css_changed custom_css_changed
     *
     * @return self
     */
    public function setCustomCssChanged($custom_css_changed)
    {
        if (is_null($custom_css_changed)) {
            throw new \InvalidArgumentException('non-nullable custom_css_changed cannot be null');
        }
        $this->container['custom_css_changed'] = $custom_css_changed;

        return $this;
    }

    /**
     * Gets on_logout_custom_script_changed
     *
     * @return bool|null
     */
    public function getOnLogoutCustomScriptChanged()
    {
        return $this->container['on_logout_custom_script_changed'];
    }

    /**
     * Sets on_logout_custom_script_changed
     *
     * @param bool|null $on_logout_custom_script_changed on_logout_custom_script_changed
     *
     * @return self
     */
    public function setOnLogoutCustomScriptChanged($on_logout_custom_script_changed)
    {
        if (is_null($on_logout_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable on_logout_custom_script_changed cannot be null');
        }
        $this->container['on_logout_custom_script_changed'] = $on_logout_custom_script_changed;

        return $this;
    }

    /**
     * Gets logged_out_custom_script_changed
     *
     * @return bool|null
     */
    public function getLoggedOutCustomScriptChanged()
    {
        return $this->container['logged_out_custom_script_changed'];
    }

    /**
     * Sets logged_out_custom_script_changed
     *
     * @param bool|null $logged_out_custom_script_changed logged_out_custom_script_changed
     *
     * @return self
     */
    public function setLoggedOutCustomScriptChanged($logged_out_custom_script_changed)
    {
        if (is_null($logged_out_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable logged_out_custom_script_changed cannot be null');
        }
        $this->container['logged_out_custom_script_changed'] = $logged_out_custom_script_changed;

        return $this;
    }

    /**
     * Gets logged_in_custom_script_changed
     *
     * @return bool|null
     */
    public function getLoggedInCustomScriptChanged()
    {
        return $this->container['logged_in_custom_script_changed'];
    }

    /**
     * Sets logged_in_custom_script_changed
     *
     * @param bool|null $logged_in_custom_script_changed logged_in_custom_script_changed
     *
     * @return self
     */
    public function setLoggedInCustomScriptChanged($logged_in_custom_script_changed)
    {
        if (is_null($logged_in_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable logged_in_custom_script_changed cannot be null');
        }
        $this->container['logged_in_custom_script_changed'] = $logged_in_custom_script_changed;

        return $this;
    }

    /**
     * Gets daily_peak_connections
     *
     * @return int|null
     */
    public function getDailyPeakConnections()
    {
        return $this->container['daily_peak_connections'];
    }

    /**
     * Sets daily_peak_connections
     *
     * @param int|null $daily_peak_connections daily_peak_connections
     *
     * @return self
     */
    public function setDailyPeakConnections($daily_peak_connections)
    {
        if (is_null($daily_peak_connections)) {
            throw new \InvalidArgumentException('non-nullable daily_peak_connections cannot be null');
        }
        $this->container['daily_peak_connections'] = $daily_peak_connections;

        return $this;
    }

    /**
     * Gets max_monthly_peak_connections
     *
     * @return int|null
     */
    public function getMaxMonthlyPeakConnections()
    {
        return $this->container['max_monthly_peak_connections'];
    }

    /**
     * Sets max_monthly_peak_connections
     *
     * @param int|null $max_monthly_peak_connections max_monthly_peak_connections
     *
     * @return self
     */
    public function setMaxMonthlyPeakConnections($max_monthly_peak_connections)
    {
        if (is_null($max_monthly_peak_connections)) {
            throw new \InvalidArgumentException('non-nullable max_monthly_peak_connections cannot be null');
        }
        $this->container['max_monthly_peak_connections'] = $max_monthly_peak_connections;

        return $this;
    }

    /**
     * Gets matrix_federation
     *
     * @return \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMatrixFederation|null
     */
    public function getMatrixFederation()
    {
        return $this->container['matrix_federation'];
    }

    /**
     * Sets matrix_federation
     *
     * @param \WebMIRocketChatApiClientStatisticsApi\Model\GetApiV1Statistics200ResponseMatrixFederation|null $matrix_federation matrix_federation
     *
     * @return self
     */
    public function setMatrixFederation($matrix_federation)
    {
        if (is_null($matrix_federation)) {
            throw new \InvalidArgumentException('non-nullable matrix_federation cannot be null');
        }
        $this->container['matrix_federation'] = $matrix_federation;

        return $this;
    }

    /**
     * Gets web_rtc_enabled
     *
     * @return bool|null
     */
    public function getWebRtcEnabled()
    {
        return $this->container['web_rtc_enabled'];
    }

    /**
     * Sets web_rtc_enabled
     *
     * @param bool|null $web_rtc_enabled web_rtc_enabled
     *
     * @return self
     */
    public function setWebRtcEnabled($web_rtc_enabled)
    {
        if (is_null($web_rtc_enabled)) {
            throw new \InvalidArgumentException('non-nullable web_rtc_enabled cannot be null');
        }
        $this->container['web_rtc_enabled'] = $web_rtc_enabled;

        return $this;
    }

    /**
     * Gets web_rtc_enabled_for_omnichannel
     *
     * @return bool|null
     */
    public function getWebRtcEnabledForOmnichannel()
    {
        return $this->container['web_rtc_enabled_for_omnichannel'];
    }

    /**
     * Sets web_rtc_enabled_for_omnichannel
     *
     * @param bool|null $web_rtc_enabled_for_omnichannel web_rtc_enabled_for_omnichannel
     *
     * @return self
     */
    public function setWebRtcEnabledForOmnichannel($web_rtc_enabled_for_omnichannel)
    {
        if (is_null($web_rtc_enabled_for_omnichannel)) {
            throw new \InvalidArgumentException('non-nullable web_rtc_enabled_for_omnichannel cannot be null');
        }
        $this->container['web_rtc_enabled_for_omnichannel'] = $web_rtc_enabled_for_omnichannel;

        return $this;
    }

    /**
     * Gets omnichannel_web_rtc_calls
     *
     * @return int|null
     */
    public function getOmnichannelWebRtcCalls()
    {
        return $this->container['omnichannel_web_rtc_calls'];
    }

    /**
     * Sets omnichannel_web_rtc_calls
     *
     * @param int|null $omnichannel_web_rtc_calls omnichannel_web_rtc_calls
     *
     * @return self
     */
    public function setOmnichannelWebRtcCalls($omnichannel_web_rtc_calls)
    {
        if (is_null($omnichannel_web_rtc_calls)) {
            throw new \InvalidArgumentException('non-nullable omnichannel_web_rtc_calls cannot be null');
        }
        $this->container['omnichannel_web_rtc_calls'] = $omnichannel_web_rtc_calls;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string|null $_updated_at _updated_at
     *
     * @return self
     */
    public function setUpdatedAt($_updated_at)
    {
        if (is_null($_updated_at)) {
            throw new \InvalidArgumentException('non-nullable _updated_at cannot be null');
        }
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets stats_token
     *
     * @return string|null
     */
    public function getStatsToken()
    {
        return $this->container['stats_token'];
    }

    /**
     * Sets stats_token
     *
     * @param string|null $stats_token stats_token
     *
     * @return self
     */
    public function setStatsToken($stats_token)
    {
        if (is_null($stats_token)) {
            throw new \InvalidArgumentException('non-nullable stats_token cannot be null');
        }
        $this->container['stats_token'] = $stats_token;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


