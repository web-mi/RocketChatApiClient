<?php
/**
 * GetApiV1StatisticsList200ResponseStatisticsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\StatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Statistics
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\StatisticsApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\StatisticsApi\ObjectSerializer;

/**
 * GetApiV1StatisticsList200ResponseStatisticsInner Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\StatisticsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1StatisticsList200ResponseStatisticsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_statistics_list_200_response_statistics_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'wizard' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard',
        'unique_id' => 'string',
        'installed_at' => 'string',
        'version' => 'string',
        'total_users' => 'int',
        'active_users' => 'int',
        'active_guests' => 'int',
        'non_active_users' => 'int',
        'app_users' => 'int',
        'online_users' => 'int',
        'away_users' => 'int',
        'busy_users' => 'int',
        'total_connected_users' => 'int',
        'offline_users' => 'int',
        'total_rooms' => 'int',
        'user_languages' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages',
        'total_channels' => 'int',
        'total_private_groups' => 'int',
        'total_direct' => 'int',
        'total_livechat' => 'int',
        'total_discussions' => 'int',
        'total_threads' => 'int',
        'total_livechat_visitors' => 'int',
        'total_livechat_agents' => 'int',
        'voip_enabled' => 'bool',
        'omnichannel_sources' => 'object[]',
        'business_hours' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours',
        'chats_on_hold' => 'int',
        'departments' => 'int',
        'email_inboxes' => 'int',
        'voip_calls' => 'int',
        'voip_extensions' => 'int',
        'voip_error_calls' => 'int',
        'voip_successful_calls' => 'int',
        'total_channel_messages' => 'int',
        'voip_on_hold_calls' => 'int',
        'total_private_group_messages' => 'int',
        'total_direct_messages' => 'int',
        'total_livechat_messages' => 'int',
        'total_messages' => 'int',
        'federated_servers' => 'int',
        'federated_users' => 'int',
        'os' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerOs',
        'process' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess',
        'deploy' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy',
        'read_receipts_enabled' => 'bool',
        'read_receipts_detailed' => 'bool',
        'enterprise_ready' => 'bool',
        'uploads_total' => 'int',
        'uploads_total_size' => 'int',
        'migration' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerMigration',
        'instance_count' => 'int',
        'ms_enabled' => 'bool',
        'oplog_enabled' => 'bool',
        'mongo_version' => 'string',
        'mongo_storage_engine' => 'string',
        'apps' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerApps',
        'unique_users_of_yesterday' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_devices_of_last_week' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_osof_last_week' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_devices_of_last_month' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_osof_yesterday' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_osof_last_month' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_devices_of_yesterday' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_users_of_last_week' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'unique_users_of_last_month' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday',
        'services' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerServices',
        'importer' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter',
        'video_conf' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerVideoConf',
        'dashboard_count' => 'int',
        'message_audit_apply' => 'int',
        'message_audit_load' => 'int',
        'settings' => 'object',
        'integrations' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations',
        'push_queue' => 'int',
        'enterprise' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerEnterprise',
        'total_otr_rooms' => 'int',
        'total_otr' => 'int',
        'total_broadcast_rooms' => 'int',
        'teams' => '\WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams',
        'total_rooms_with_active_livestream' => 'int',
        'total_triggered_emails' => 'int',
        'total_rooms_with_starred' => 'int',
        'total_rooms_with_pinned' => 'int',
        'total_user_totp' => 'int',
        'total_user_email2fa' => 'int',
        'total_pinned' => 'int',
        'total_starred' => 'int',
        'total_link_invitation' => 'int',
        'total_link_invitation_uses' => 'int',
        'total_email_invitation' => 'int',
        'total_e2_e_rooms' => 'int',
        'logo_change' => 'bool',
        'show_home_button' => 'bool',
        'total_encrypted_messages' => 'int',
        'total_manually_added_users' => 'int',
        'total_subscription_roles' => 'int',
        'total_user_roles' => 'int',
        'total_web_rtc_calls' => 'int',
        'matrix_bridge_enabled' => 'bool',
        'uncaught_exceptions_count' => 'int',
        'home_title_changed' => 'bool',
        'home_body_changed' => 'bool',
        'custom_css_changed' => 'bool',
        'on_logout_custom_script_changed' => 'bool',
        'logged_out_custom_script_changed' => 'bool',
        'logged_in_custom_script_changed' => 'bool',
        'created_at' => 'string',
        '_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'wizard' => null,
        'unique_id' => null,
        'installed_at' => null,
        'version' => null,
        'total_users' => null,
        'active_users' => null,
        'active_guests' => null,
        'non_active_users' => null,
        'app_users' => null,
        'online_users' => null,
        'away_users' => null,
        'busy_users' => null,
        'total_connected_users' => null,
        'offline_users' => null,
        'total_rooms' => null,
        'user_languages' => null,
        'total_channels' => null,
        'total_private_groups' => null,
        'total_direct' => null,
        'total_livechat' => null,
        'total_discussions' => null,
        'total_threads' => null,
        'total_livechat_visitors' => null,
        'total_livechat_agents' => null,
        'voip_enabled' => null,
        'omnichannel_sources' => null,
        'business_hours' => null,
        'chats_on_hold' => null,
        'departments' => null,
        'email_inboxes' => null,
        'voip_calls' => null,
        'voip_extensions' => null,
        'voip_error_calls' => null,
        'voip_successful_calls' => null,
        'total_channel_messages' => null,
        'voip_on_hold_calls' => null,
        'total_private_group_messages' => null,
        'total_direct_messages' => null,
        'total_livechat_messages' => null,
        'total_messages' => null,
        'federated_servers' => null,
        'federated_users' => null,
        'os' => null,
        'process' => null,
        'deploy' => null,
        'read_receipts_enabled' => null,
        'read_receipts_detailed' => null,
        'enterprise_ready' => null,
        'uploads_total' => null,
        'uploads_total_size' => null,
        'migration' => null,
        'instance_count' => null,
        'ms_enabled' => null,
        'oplog_enabled' => null,
        'mongo_version' => null,
        'mongo_storage_engine' => null,
        'apps' => null,
        'unique_users_of_yesterday' => null,
        'unique_devices_of_last_week' => null,
        'unique_osof_last_week' => null,
        'unique_devices_of_last_month' => null,
        'unique_osof_yesterday' => null,
        'unique_osof_last_month' => null,
        'unique_devices_of_yesterday' => null,
        'unique_users_of_last_week' => null,
        'unique_users_of_last_month' => null,
        'services' => null,
        'importer' => null,
        'video_conf' => null,
        'dashboard_count' => null,
        'message_audit_apply' => null,
        'message_audit_load' => null,
        'settings' => null,
        'integrations' => null,
        'push_queue' => null,
        'enterprise' => null,
        'total_otr_rooms' => null,
        'total_otr' => null,
        'total_broadcast_rooms' => null,
        'teams' => null,
        'total_rooms_with_active_livestream' => null,
        'total_triggered_emails' => null,
        'total_rooms_with_starred' => null,
        'total_rooms_with_pinned' => null,
        'total_user_totp' => null,
        'total_user_email2fa' => null,
        'total_pinned' => null,
        'total_starred' => null,
        'total_link_invitation' => null,
        'total_link_invitation_uses' => null,
        'total_email_invitation' => null,
        'total_e2_e_rooms' => null,
        'logo_change' => null,
        'show_home_button' => null,
        'total_encrypted_messages' => null,
        'total_manually_added_users' => null,
        'total_subscription_roles' => null,
        'total_user_roles' => null,
        'total_web_rtc_calls' => null,
        'matrix_bridge_enabled' => null,
        'uncaught_exceptions_count' => null,
        'home_title_changed' => null,
        'home_body_changed' => null,
        'custom_css_changed' => null,
        'on_logout_custom_script_changed' => null,
        'logged_out_custom_script_changed' => null,
        'logged_in_custom_script_changed' => null,
        'created_at' => null,
        '_updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'wizard' => false,
        'unique_id' => false,
        'installed_at' => false,
        'version' => false,
        'total_users' => false,
        'active_users' => false,
        'active_guests' => false,
        'non_active_users' => false,
        'app_users' => false,
        'online_users' => false,
        'away_users' => false,
        'busy_users' => false,
        'total_connected_users' => false,
        'offline_users' => false,
        'total_rooms' => false,
        'user_languages' => false,
        'total_channels' => false,
        'total_private_groups' => false,
        'total_direct' => false,
        'total_livechat' => false,
        'total_discussions' => false,
        'total_threads' => false,
        'total_livechat_visitors' => false,
        'total_livechat_agents' => false,
        'voip_enabled' => false,
        'omnichannel_sources' => false,
        'business_hours' => false,
        'chats_on_hold' => false,
        'departments' => false,
        'email_inboxes' => false,
        'voip_calls' => false,
        'voip_extensions' => false,
        'voip_error_calls' => false,
        'voip_successful_calls' => false,
        'total_channel_messages' => false,
        'voip_on_hold_calls' => false,
        'total_private_group_messages' => false,
        'total_direct_messages' => false,
        'total_livechat_messages' => false,
        'total_messages' => false,
        'federated_servers' => false,
        'federated_users' => false,
        'os' => false,
        'process' => false,
        'deploy' => false,
        'read_receipts_enabled' => false,
        'read_receipts_detailed' => false,
        'enterprise_ready' => false,
        'uploads_total' => false,
        'uploads_total_size' => false,
        'migration' => false,
        'instance_count' => false,
        'ms_enabled' => false,
        'oplog_enabled' => false,
        'mongo_version' => false,
        'mongo_storage_engine' => false,
        'apps' => false,
        'unique_users_of_yesterday' => false,
        'unique_devices_of_last_week' => false,
        'unique_osof_last_week' => false,
        'unique_devices_of_last_month' => false,
        'unique_osof_yesterday' => false,
        'unique_osof_last_month' => false,
        'unique_devices_of_yesterday' => false,
        'unique_users_of_last_week' => false,
        'unique_users_of_last_month' => false,
        'services' => false,
        'importer' => false,
        'video_conf' => false,
        'dashboard_count' => false,
        'message_audit_apply' => false,
        'message_audit_load' => false,
        'settings' => false,
        'integrations' => false,
        'push_queue' => false,
        'enterprise' => false,
        'total_otr_rooms' => false,
        'total_otr' => false,
        'total_broadcast_rooms' => false,
        'teams' => false,
        'total_rooms_with_active_livestream' => false,
        'total_triggered_emails' => false,
        'total_rooms_with_starred' => false,
        'total_rooms_with_pinned' => false,
        'total_user_totp' => false,
        'total_user_email2fa' => false,
        'total_pinned' => false,
        'total_starred' => false,
        'total_link_invitation' => false,
        'total_link_invitation_uses' => false,
        'total_email_invitation' => false,
        'total_e2_e_rooms' => false,
        'logo_change' => false,
        'show_home_button' => false,
        'total_encrypted_messages' => false,
        'total_manually_added_users' => false,
        'total_subscription_roles' => false,
        'total_user_roles' => false,
        'total_web_rtc_calls' => false,
        'matrix_bridge_enabled' => false,
        'uncaught_exceptions_count' => false,
        'home_title_changed' => false,
        'home_body_changed' => false,
        'custom_css_changed' => false,
        'on_logout_custom_script_changed' => false,
        'logged_out_custom_script_changed' => false,
        'logged_in_custom_script_changed' => false,
        'created_at' => false,
        '_updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'wizard' => 'wizard',
        'unique_id' => 'uniqueId',
        'installed_at' => 'installedAt',
        'version' => 'version',
        'total_users' => 'totalUsers',
        'active_users' => 'activeUsers',
        'active_guests' => 'activeGuests',
        'non_active_users' => 'nonActiveUsers',
        'app_users' => 'appUsers',
        'online_users' => 'onlineUsers',
        'away_users' => 'awayUsers',
        'busy_users' => 'busyUsers',
        'total_connected_users' => 'totalConnectedUsers',
        'offline_users' => 'offlineUsers',
        'total_rooms' => 'totalRooms',
        'user_languages' => 'userLanguages',
        'total_channels' => 'totalChannels',
        'total_private_groups' => 'totalPrivateGroups',
        'total_direct' => 'totalDirect',
        'total_livechat' => 'totalLivechat',
        'total_discussions' => 'totalDiscussions',
        'total_threads' => 'totalThreads',
        'total_livechat_visitors' => 'totalLivechatVisitors',
        'total_livechat_agents' => 'totalLivechatAgents',
        'voip_enabled' => 'voipEnabled',
        'omnichannel_sources' => 'omnichannelSources',
        'business_hours' => 'BusinessHours',
        'chats_on_hold' => 'chatsOnHold',
        'departments' => 'departments',
        'email_inboxes' => 'emailInboxes',
        'voip_calls' => 'voipCalls',
        'voip_extensions' => 'voipExtensions',
        'voip_error_calls' => 'voipErrorCalls',
        'voip_successful_calls' => 'voipSuccessfulCalls',
        'total_channel_messages' => 'totalChannelMessages',
        'voip_on_hold_calls' => 'voipOnHoldCalls',
        'total_private_group_messages' => 'totalPrivateGroupMessages',
        'total_direct_messages' => 'totalDirectMessages',
        'total_livechat_messages' => 'totalLivechatMessages',
        'total_messages' => 'totalMessages',
        'federated_servers' => 'federatedServers',
        'federated_users' => 'federatedUsers',
        'os' => 'os',
        'process' => 'process',
        'deploy' => 'deploy',
        'read_receipts_enabled' => 'readReceiptsEnabled',
        'read_receipts_detailed' => 'readReceiptsDetailed',
        'enterprise_ready' => 'enterpriseReady',
        'uploads_total' => 'uploadsTotal',
        'uploads_total_size' => 'uploadsTotalSize',
        'migration' => 'migration',
        'instance_count' => 'instanceCount',
        'ms_enabled' => 'msEnabled',
        'oplog_enabled' => 'oplogEnabled',
        'mongo_version' => 'mongoVersion',
        'mongo_storage_engine' => 'mongoStorageEngine',
        'apps' => 'apps',
        'unique_users_of_yesterday' => 'uniqueUsersOfYesterday',
        'unique_devices_of_last_week' => 'uniqueDevicesOfLastWeek',
        'unique_osof_last_week' => 'uniqueOSOfLastWeek',
        'unique_devices_of_last_month' => 'uniqueDevicesOfLastMonth',
        'unique_osof_yesterday' => 'uniqueOSOfYesterday',
        'unique_osof_last_month' => 'uniqueOSOfLastMonth',
        'unique_devices_of_yesterday' => 'uniqueDevicesOfYesterday',
        'unique_users_of_last_week' => 'uniqueUsersOfLastWeek',
        'unique_users_of_last_month' => 'uniqueUsersOfLastMonth',
        'services' => 'services',
        'importer' => 'importer',
        'video_conf' => 'videoConf',
        'dashboard_count' => 'dashboardCount',
        'message_audit_apply' => 'messageAuditApply',
        'message_audit_load' => 'messageAuditLoad',
        'settings' => 'settings',
        'integrations' => 'integrations',
        'push_queue' => 'pushQueue',
        'enterprise' => 'enterprise',
        'total_otr_rooms' => 'totalOTRRooms',
        'total_otr' => 'totalOTR',
        'total_broadcast_rooms' => 'totalBroadcastRooms',
        'teams' => 'teams',
        'total_rooms_with_active_livestream' => 'totalRoomsWithActiveLivestream',
        'total_triggered_emails' => 'totalTriggeredEmails',
        'total_rooms_with_starred' => 'totalRoomsWithStarred',
        'total_rooms_with_pinned' => 'totalRoomsWithPinned',
        'total_user_totp' => 'totalUserTOTP',
        'total_user_email2fa' => 'totalUserEmail2fa',
        'total_pinned' => 'totalPinned',
        'total_starred' => 'totalStarred',
        'total_link_invitation' => 'totalLinkInvitation',
        'total_link_invitation_uses' => 'totalLinkInvitationUses',
        'total_email_invitation' => 'totalEmailInvitation',
        'total_e2_e_rooms' => 'totalE2ERooms',
        'logo_change' => 'logoChange',
        'show_home_button' => 'showHomeButton',
        'total_encrypted_messages' => 'totalEncryptedMessages',
        'total_manually_added_users' => 'totalManuallyAddedUsers',
        'total_subscription_roles' => 'totalSubscriptionRoles',
        'total_user_roles' => 'totalUserRoles',
        'total_web_rtc_calls' => 'totalWebRTCCalls',
        'matrix_bridge_enabled' => 'matrixBridgeEnabled',
        'uncaught_exceptions_count' => 'uncaughtExceptionsCount',
        'home_title_changed' => 'homeTitleChanged',
        'home_body_changed' => 'homeBodyChanged',
        'custom_css_changed' => 'customCSSChanged',
        'on_logout_custom_script_changed' => 'onLogoutCustomScriptChanged',
        'logged_out_custom_script_changed' => 'loggedOutCustomScriptChanged',
        'logged_in_custom_script_changed' => 'loggedInCustomScriptChanged',
        'created_at' => 'createdAt',
        '_updated_at' => '_updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'set__id',
        'wizard' => 'set_wizard',
        'unique_id' => 'set_unique_id',
        'installed_at' => 'set_installed_at',
        'version' => 'set_version',
        'total_users' => 'set_total_users',
        'active_users' => 'set_active_users',
        'active_guests' => 'set_active_guests',
        'non_active_users' => 'set_non_active_users',
        'app_users' => 'set_app_users',
        'online_users' => 'set_online_users',
        'away_users' => 'set_away_users',
        'busy_users' => 'set_busy_users',
        'total_connected_users' => 'set_total_connected_users',
        'offline_users' => 'set_offline_users',
        'total_rooms' => 'set_total_rooms',
        'user_languages' => 'set_user_languages',
        'total_channels' => 'set_total_channels',
        'total_private_groups' => 'set_total_private_groups',
        'total_direct' => 'set_total_direct',
        'total_livechat' => 'set_total_livechat',
        'total_discussions' => 'set_total_discussions',
        'total_threads' => 'set_total_threads',
        'total_livechat_visitors' => 'set_total_livechat_visitors',
        'total_livechat_agents' => 'set_total_livechat_agents',
        'voip_enabled' => 'set_voip_enabled',
        'omnichannel_sources' => 'set_omnichannel_sources',
        'business_hours' => 'set_business_hours',
        'chats_on_hold' => 'set_chats_on_hold',
        'departments' => 'set_departments',
        'email_inboxes' => 'set_email_inboxes',
        'voip_calls' => 'set_voip_calls',
        'voip_extensions' => 'set_voip_extensions',
        'voip_error_calls' => 'set_voip_error_calls',
        'voip_successful_calls' => 'set_voip_successful_calls',
        'total_channel_messages' => 'set_total_channel_messages',
        'voip_on_hold_calls' => 'set_voip_on_hold_calls',
        'total_private_group_messages' => 'set_total_private_group_messages',
        'total_direct_messages' => 'set_total_direct_messages',
        'total_livechat_messages' => 'set_total_livechat_messages',
        'total_messages' => 'set_total_messages',
        'federated_servers' => 'set_federated_servers',
        'federated_users' => 'set_federated_users',
        'os' => 'set_os',
        'process' => 'set_process',
        'deploy' => 'set_deploy',
        'read_receipts_enabled' => 'set_read_receipts_enabled',
        'read_receipts_detailed' => 'set_read_receipts_detailed',
        'enterprise_ready' => 'set_enterprise_ready',
        'uploads_total' => 'set_uploads_total',
        'uploads_total_size' => 'set_uploads_total_size',
        'migration' => 'set_migration',
        'instance_count' => 'set_instance_count',
        'ms_enabled' => 'set_ms_enabled',
        'oplog_enabled' => 'set_oplog_enabled',
        'mongo_version' => 'set_mongo_version',
        'mongo_storage_engine' => 'set_mongo_storage_engine',
        'apps' => 'set_apps',
        'unique_users_of_yesterday' => 'set_unique_users_of_yesterday',
        'unique_devices_of_last_week' => 'set_unique_devices_of_last_week',
        'unique_osof_last_week' => 'set_unique_osof_last_week',
        'unique_devices_of_last_month' => 'set_unique_devices_of_last_month',
        'unique_osof_yesterday' => 'set_unique_osof_yesterday',
        'unique_osof_last_month' => 'set_unique_osof_last_month',
        'unique_devices_of_yesterday' => 'set_unique_devices_of_yesterday',
        'unique_users_of_last_week' => 'set_unique_users_of_last_week',
        'unique_users_of_last_month' => 'set_unique_users_of_last_month',
        'services' => 'set_services',
        'importer' => 'set_importer',
        'video_conf' => 'set_video_conf',
        'dashboard_count' => 'set_dashboard_count',
        'message_audit_apply' => 'set_message_audit_apply',
        'message_audit_load' => 'set_message_audit_load',
        'settings' => 'set_settings',
        'integrations' => 'set_integrations',
        'push_queue' => 'set_push_queue',
        'enterprise' => 'set_enterprise',
        'total_otr_rooms' => 'set_total_otr_rooms',
        'total_otr' => 'set_total_otr',
        'total_broadcast_rooms' => 'set_total_broadcast_rooms',
        'teams' => 'set_teams',
        'total_rooms_with_active_livestream' => 'set_total_rooms_with_active_livestream',
        'total_triggered_emails' => 'set_total_triggered_emails',
        'total_rooms_with_starred' => 'set_total_rooms_with_starred',
        'total_rooms_with_pinned' => 'set_total_rooms_with_pinned',
        'total_user_totp' => 'set_total_user_totp',
        'total_user_email2fa' => 'set_total_user_email2fa',
        'total_pinned' => 'set_total_pinned',
        'total_starred' => 'set_total_starred',
        'total_link_invitation' => 'set_total_link_invitation',
        'total_link_invitation_uses' => 'set_total_link_invitation_uses',
        'total_email_invitation' => 'set_total_email_invitation',
        'total_e2_e_rooms' => 'set_total_e2_e_rooms',
        'logo_change' => 'set_logo_change',
        'show_home_button' => 'set_show_home_button',
        'total_encrypted_messages' => 'set_total_encrypted_messages',
        'total_manually_added_users' => 'set_total_manually_added_users',
        'total_subscription_roles' => 'set_total_subscription_roles',
        'total_user_roles' => 'set_total_user_roles',
        'total_web_rtc_calls' => 'set_total_web_rtc_calls',
        'matrix_bridge_enabled' => 'set_matrix_bridge_enabled',
        'uncaught_exceptions_count' => 'set_uncaught_exceptions_count',
        'home_title_changed' => 'set_home_title_changed',
        'home_body_changed' => 'set_home_body_changed',
        'custom_css_changed' => 'set_custom_css_changed',
        'on_logout_custom_script_changed' => 'set_on_logout_custom_script_changed',
        'logged_out_custom_script_changed' => 'set_logged_out_custom_script_changed',
        'logged_in_custom_script_changed' => 'set_logged_in_custom_script_changed',
        'created_at' => 'set_created_at',
        '_updated_at' => 'set__updated_at'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'get__id',
        'wizard' => 'get_wizard',
        'unique_id' => 'get_unique_id',
        'installed_at' => 'get_installed_at',
        'version' => 'get_version',
        'total_users' => 'get_total_users',
        'active_users' => 'get_active_users',
        'active_guests' => 'get_active_guests',
        'non_active_users' => 'get_non_active_users',
        'app_users' => 'get_app_users',
        'online_users' => 'get_online_users',
        'away_users' => 'get_away_users',
        'busy_users' => 'get_busy_users',
        'total_connected_users' => 'get_total_connected_users',
        'offline_users' => 'get_offline_users',
        'total_rooms' => 'get_total_rooms',
        'user_languages' => 'get_user_languages',
        'total_channels' => 'get_total_channels',
        'total_private_groups' => 'get_total_private_groups',
        'total_direct' => 'get_total_direct',
        'total_livechat' => 'get_total_livechat',
        'total_discussions' => 'get_total_discussions',
        'total_threads' => 'get_total_threads',
        'total_livechat_visitors' => 'get_total_livechat_visitors',
        'total_livechat_agents' => 'get_total_livechat_agents',
        'voip_enabled' => 'get_voip_enabled',
        'omnichannel_sources' => 'get_omnichannel_sources',
        'business_hours' => 'get_business_hours',
        'chats_on_hold' => 'get_chats_on_hold',
        'departments' => 'get_departments',
        'email_inboxes' => 'get_email_inboxes',
        'voip_calls' => 'get_voip_calls',
        'voip_extensions' => 'get_voip_extensions',
        'voip_error_calls' => 'get_voip_error_calls',
        'voip_successful_calls' => 'get_voip_successful_calls',
        'total_channel_messages' => 'get_total_channel_messages',
        'voip_on_hold_calls' => 'get_voip_on_hold_calls',
        'total_private_group_messages' => 'get_total_private_group_messages',
        'total_direct_messages' => 'get_total_direct_messages',
        'total_livechat_messages' => 'get_total_livechat_messages',
        'total_messages' => 'get_total_messages',
        'federated_servers' => 'get_federated_servers',
        'federated_users' => 'get_federated_users',
        'os' => 'get_os',
        'process' => 'get_process',
        'deploy' => 'get_deploy',
        'read_receipts_enabled' => 'get_read_receipts_enabled',
        'read_receipts_detailed' => 'get_read_receipts_detailed',
        'enterprise_ready' => 'get_enterprise_ready',
        'uploads_total' => 'get_uploads_total',
        'uploads_total_size' => 'get_uploads_total_size',
        'migration' => 'get_migration',
        'instance_count' => 'get_instance_count',
        'ms_enabled' => 'get_ms_enabled',
        'oplog_enabled' => 'get_oplog_enabled',
        'mongo_version' => 'get_mongo_version',
        'mongo_storage_engine' => 'get_mongo_storage_engine',
        'apps' => 'get_apps',
        'unique_users_of_yesterday' => 'get_unique_users_of_yesterday',
        'unique_devices_of_last_week' => 'get_unique_devices_of_last_week',
        'unique_osof_last_week' => 'get_unique_osof_last_week',
        'unique_devices_of_last_month' => 'get_unique_devices_of_last_month',
        'unique_osof_yesterday' => 'get_unique_osof_yesterday',
        'unique_osof_last_month' => 'get_unique_osof_last_month',
        'unique_devices_of_yesterday' => 'get_unique_devices_of_yesterday',
        'unique_users_of_last_week' => 'get_unique_users_of_last_week',
        'unique_users_of_last_month' => 'get_unique_users_of_last_month',
        'services' => 'get_services',
        'importer' => 'get_importer',
        'video_conf' => 'get_video_conf',
        'dashboard_count' => 'get_dashboard_count',
        'message_audit_apply' => 'get_message_audit_apply',
        'message_audit_load' => 'get_message_audit_load',
        'settings' => 'get_settings',
        'integrations' => 'get_integrations',
        'push_queue' => 'get_push_queue',
        'enterprise' => 'get_enterprise',
        'total_otr_rooms' => 'get_total_otr_rooms',
        'total_otr' => 'get_total_otr',
        'total_broadcast_rooms' => 'get_total_broadcast_rooms',
        'teams' => 'get_teams',
        'total_rooms_with_active_livestream' => 'get_total_rooms_with_active_livestream',
        'total_triggered_emails' => 'get_total_triggered_emails',
        'total_rooms_with_starred' => 'get_total_rooms_with_starred',
        'total_rooms_with_pinned' => 'get_total_rooms_with_pinned',
        'total_user_totp' => 'get_total_user_totp',
        'total_user_email2fa' => 'get_total_user_email2fa',
        'total_pinned' => 'get_total_pinned',
        'total_starred' => 'get_total_starred',
        'total_link_invitation' => 'get_total_link_invitation',
        'total_link_invitation_uses' => 'get_total_link_invitation_uses',
        'total_email_invitation' => 'get_total_email_invitation',
        'total_e2_e_rooms' => 'get_total_e2_e_rooms',
        'logo_change' => 'get_logo_change',
        'show_home_button' => 'get_show_home_button',
        'total_encrypted_messages' => 'get_total_encrypted_messages',
        'total_manually_added_users' => 'get_total_manually_added_users',
        'total_subscription_roles' => 'get_total_subscription_roles',
        'total_user_roles' => 'get_total_user_roles',
        'total_web_rtc_calls' => 'get_total_web_rtc_calls',
        'matrix_bridge_enabled' => 'get_matrix_bridge_enabled',
        'uncaught_exceptions_count' => 'get_uncaught_exceptions_count',
        'home_title_changed' => 'get_home_title_changed',
        'home_body_changed' => 'get_home_body_changed',
        'custom_css_changed' => 'get_custom_css_changed',
        'on_logout_custom_script_changed' => 'get_on_logout_custom_script_changed',
        'logged_out_custom_script_changed' => 'get_logged_out_custom_script_changed',
        'logged_in_custom_script_changed' => 'get_logged_in_custom_script_changed',
        'created_at' => 'get_created_at',
        '_updated_at' => 'get__updated_at'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('wizard', $data ?? [], null);
        $this->setIfExists('unique_id', $data ?? [], null);
        $this->setIfExists('installed_at', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('total_users', $data ?? [], null);
        $this->setIfExists('active_users', $data ?? [], null);
        $this->setIfExists('active_guests', $data ?? [], null);
        $this->setIfExists('non_active_users', $data ?? [], null);
        $this->setIfExists('app_users', $data ?? [], null);
        $this->setIfExists('online_users', $data ?? [], null);
        $this->setIfExists('away_users', $data ?? [], null);
        $this->setIfExists('busy_users', $data ?? [], null);
        $this->setIfExists('total_connected_users', $data ?? [], null);
        $this->setIfExists('offline_users', $data ?? [], null);
        $this->setIfExists('total_rooms', $data ?? [], null);
        $this->setIfExists('user_languages', $data ?? [], null);
        $this->setIfExists('total_channels', $data ?? [], null);
        $this->setIfExists('total_private_groups', $data ?? [], null);
        $this->setIfExists('total_direct', $data ?? [], null);
        $this->setIfExists('total_livechat', $data ?? [], null);
        $this->setIfExists('total_discussions', $data ?? [], null);
        $this->setIfExists('total_threads', $data ?? [], null);
        $this->setIfExists('total_livechat_visitors', $data ?? [], null);
        $this->setIfExists('total_livechat_agents', $data ?? [], null);
        $this->setIfExists('voip_enabled', $data ?? [], null);
        $this->setIfExists('omnichannel_sources', $data ?? [], null);
        $this->setIfExists('business_hours', $data ?? [], null);
        $this->setIfExists('chats_on_hold', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('email_inboxes', $data ?? [], null);
        $this->setIfExists('voip_calls', $data ?? [], null);
        $this->setIfExists('voip_extensions', $data ?? [], null);
        $this->setIfExists('voip_error_calls', $data ?? [], null);
        $this->setIfExists('voip_successful_calls', $data ?? [], null);
        $this->setIfExists('total_channel_messages', $data ?? [], null);
        $this->setIfExists('voip_on_hold_calls', $data ?? [], null);
        $this->setIfExists('total_private_group_messages', $data ?? [], null);
        $this->setIfExists('total_direct_messages', $data ?? [], null);
        $this->setIfExists('total_livechat_messages', $data ?? [], null);
        $this->setIfExists('total_messages', $data ?? [], null);
        $this->setIfExists('federated_servers', $data ?? [], null);
        $this->setIfExists('federated_users', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('process', $data ?? [], null);
        $this->setIfExists('deploy', $data ?? [], null);
        $this->setIfExists('read_receipts_enabled', $data ?? [], null);
        $this->setIfExists('read_receipts_detailed', $data ?? [], null);
        $this->setIfExists('enterprise_ready', $data ?? [], null);
        $this->setIfExists('uploads_total', $data ?? [], null);
        $this->setIfExists('uploads_total_size', $data ?? [], null);
        $this->setIfExists('migration', $data ?? [], null);
        $this->setIfExists('instance_count', $data ?? [], null);
        $this->setIfExists('ms_enabled', $data ?? [], null);
        $this->setIfExists('oplog_enabled', $data ?? [], null);
        $this->setIfExists('mongo_version', $data ?? [], null);
        $this->setIfExists('mongo_storage_engine', $data ?? [], null);
        $this->setIfExists('apps', $data ?? [], null);
        $this->setIfExists('unique_users_of_yesterday', $data ?? [], null);
        $this->setIfExists('unique_devices_of_last_week', $data ?? [], null);
        $this->setIfExists('unique_osof_last_week', $data ?? [], null);
        $this->setIfExists('unique_devices_of_last_month', $data ?? [], null);
        $this->setIfExists('unique_osof_yesterday', $data ?? [], null);
        $this->setIfExists('unique_osof_last_month', $data ?? [], null);
        $this->setIfExists('unique_devices_of_yesterday', $data ?? [], null);
        $this->setIfExists('unique_users_of_last_week', $data ?? [], null);
        $this->setIfExists('unique_users_of_last_month', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('importer', $data ?? [], null);
        $this->setIfExists('video_conf', $data ?? [], null);
        $this->setIfExists('dashboard_count', $data ?? [], null);
        $this->setIfExists('message_audit_apply', $data ?? [], null);
        $this->setIfExists('message_audit_load', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('integrations', $data ?? [], null);
        $this->setIfExists('push_queue', $data ?? [], null);
        $this->setIfExists('enterprise', $data ?? [], null);
        $this->setIfExists('total_otr_rooms', $data ?? [], null);
        $this->setIfExists('total_otr', $data ?? [], null);
        $this->setIfExists('total_broadcast_rooms', $data ?? [], null);
        $this->setIfExists('teams', $data ?? [], null);
        $this->setIfExists('total_rooms_with_active_livestream', $data ?? [], null);
        $this->setIfExists('total_triggered_emails', $data ?? [], null);
        $this->setIfExists('total_rooms_with_starred', $data ?? [], null);
        $this->setIfExists('total_rooms_with_pinned', $data ?? [], null);
        $this->setIfExists('total_user_totp', $data ?? [], null);
        $this->setIfExists('total_user_email2fa', $data ?? [], null);
        $this->setIfExists('total_pinned', $data ?? [], null);
        $this->setIfExists('total_starred', $data ?? [], null);
        $this->setIfExists('total_link_invitation', $data ?? [], null);
        $this->setIfExists('total_link_invitation_uses', $data ?? [], null);
        $this->setIfExists('total_email_invitation', $data ?? [], null);
        $this->setIfExists('total_e2_e_rooms', $data ?? [], null);
        $this->setIfExists('logo_change', $data ?? [], null);
        $this->setIfExists('show_home_button', $data ?? [], null);
        $this->setIfExists('total_encrypted_messages', $data ?? [], null);
        $this->setIfExists('total_manually_added_users', $data ?? [], null);
        $this->setIfExists('total_subscription_roles', $data ?? [], null);
        $this->setIfExists('total_user_roles', $data ?? [], null);
        $this->setIfExists('total_web_rtc_calls', $data ?? [], null);
        $this->setIfExists('matrix_bridge_enabled', $data ?? [], null);
        $this->setIfExists('uncaught_exceptions_count', $data ?? [], null);
        $this->setIfExists('home_title_changed', $data ?? [], null);
        $this->setIfExists('home_body_changed', $data ?? [], null);
        $this->setIfExists('custom_css_changed', $data ?? [], null);
        $this->setIfExists('on_logout_custom_script_changed', $data ?? [], null);
        $this->setIfExists('logged_out_custom_script_changed', $data ?? [], null);
        $this->setIfExists('logged_in_custom_script_changed', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('_updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function get__id()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function set__id($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets wizard
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard|null
     */
    public function get_wizard()
    {
        return $this->container['wizard'];
    }

    /**
     * Sets wizard
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerWizard|null $wizard wizard
     *
     * @return self
     */
    public function set_wizard($wizard)
    {
        if (is_null($wizard)) {
            throw new \InvalidArgumentException('non-nullable wizard cannot be null');
        }
        $this->container['wizard'] = $wizard;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string|null
     */
    public function get_unique_id()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string|null $unique_id unique_id
     *
     * @return self
     */
    public function set_unique_id($unique_id)
    {
        if (is_null($unique_id)) {
            throw new \InvalidArgumentException('non-nullable unique_id cannot be null');
        }
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets installed_at
     *
     * @return string|null
     */
    public function get_installed_at()
    {
        return $this->container['installed_at'];
    }

    /**
     * Sets installed_at
     *
     * @param string|null $installed_at installed_at
     *
     * @return self
     */
    public function set_installed_at($installed_at)
    {
        if (is_null($installed_at)) {
            throw new \InvalidArgumentException('non-nullable installed_at cannot be null');
        }
        $this->container['installed_at'] = $installed_at;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function get_version()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function set_version($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets total_users
     *
     * @return int|null
     */
    public function get_total_users()
    {
        return $this->container['total_users'];
    }

    /**
     * Sets total_users
     *
     * @param int|null $total_users total_users
     *
     * @return self
     */
    public function set_total_users($total_users)
    {
        if (is_null($total_users)) {
            throw new \InvalidArgumentException('non-nullable total_users cannot be null');
        }
        $this->container['total_users'] = $total_users;

        return $this;
    }

    /**
     * Gets active_users
     *
     * @return int|null
     */
    public function get_active_users()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     *
     * @param int|null $active_users active_users
     *
     * @return self
     */
    public function set_active_users($active_users)
    {
        if (is_null($active_users)) {
            throw new \InvalidArgumentException('non-nullable active_users cannot be null');
        }
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets active_guests
     *
     * @return int|null
     */
    public function get_active_guests()
    {
        return $this->container['active_guests'];
    }

    /**
     * Sets active_guests
     *
     * @param int|null $active_guests active_guests
     *
     * @return self
     */
    public function set_active_guests($active_guests)
    {
        if (is_null($active_guests)) {
            throw new \InvalidArgumentException('non-nullable active_guests cannot be null');
        }
        $this->container['active_guests'] = $active_guests;

        return $this;
    }

    /**
     * Gets non_active_users
     *
     * @return int|null
     */
    public function get_non_active_users()
    {
        return $this->container['non_active_users'];
    }

    /**
     * Sets non_active_users
     *
     * @param int|null $non_active_users non_active_users
     *
     * @return self
     */
    public function set_non_active_users($non_active_users)
    {
        if (is_null($non_active_users)) {
            throw new \InvalidArgumentException('non-nullable non_active_users cannot be null');
        }
        $this->container['non_active_users'] = $non_active_users;

        return $this;
    }

    /**
     * Gets app_users
     *
     * @return int|null
     */
    public function get_app_users()
    {
        return $this->container['app_users'];
    }

    /**
     * Sets app_users
     *
     * @param int|null $app_users app_users
     *
     * @return self
     */
    public function set_app_users($app_users)
    {
        if (is_null($app_users)) {
            throw new \InvalidArgumentException('non-nullable app_users cannot be null');
        }
        $this->container['app_users'] = $app_users;

        return $this;
    }

    /**
     * Gets online_users
     *
     * @return int|null
     */
    public function get_online_users()
    {
        return $this->container['online_users'];
    }

    /**
     * Sets online_users
     *
     * @param int|null $online_users online_users
     *
     * @return self
     */
    public function set_online_users($online_users)
    {
        if (is_null($online_users)) {
            throw new \InvalidArgumentException('non-nullable online_users cannot be null');
        }
        $this->container['online_users'] = $online_users;

        return $this;
    }

    /**
     * Gets away_users
     *
     * @return int|null
     */
    public function get_away_users()
    {
        return $this->container['away_users'];
    }

    /**
     * Sets away_users
     *
     * @param int|null $away_users away_users
     *
     * @return self
     */
    public function set_away_users($away_users)
    {
        if (is_null($away_users)) {
            throw new \InvalidArgumentException('non-nullable away_users cannot be null');
        }
        $this->container['away_users'] = $away_users;

        return $this;
    }

    /**
     * Gets busy_users
     *
     * @return int|null
     */
    public function get_busy_users()
    {
        return $this->container['busy_users'];
    }

    /**
     * Sets busy_users
     *
     * @param int|null $busy_users busy_users
     *
     * @return self
     */
    public function set_busy_users($busy_users)
    {
        if (is_null($busy_users)) {
            throw new \InvalidArgumentException('non-nullable busy_users cannot be null');
        }
        $this->container['busy_users'] = $busy_users;

        return $this;
    }

    /**
     * Gets total_connected_users
     *
     * @return int|null
     */
    public function get_total_connected_users()
    {
        return $this->container['total_connected_users'];
    }

    /**
     * Sets total_connected_users
     *
     * @param int|null $total_connected_users total_connected_users
     *
     * @return self
     */
    public function set_total_connected_users($total_connected_users)
    {
        if (is_null($total_connected_users)) {
            throw new \InvalidArgumentException('non-nullable total_connected_users cannot be null');
        }
        $this->container['total_connected_users'] = $total_connected_users;

        return $this;
    }

    /**
     * Gets offline_users
     *
     * @return int|null
     */
    public function get_offline_users()
    {
        return $this->container['offline_users'];
    }

    /**
     * Sets offline_users
     *
     * @param int|null $offline_users offline_users
     *
     * @return self
     */
    public function set_offline_users($offline_users)
    {
        if (is_null($offline_users)) {
            throw new \InvalidArgumentException('non-nullable offline_users cannot be null');
        }
        $this->container['offline_users'] = $offline_users;

        return $this;
    }

    /**
     * Gets total_rooms
     *
     * @return int|null
     */
    public function get_total_rooms()
    {
        return $this->container['total_rooms'];
    }

    /**
     * Sets total_rooms
     *
     * @param int|null $total_rooms total_rooms
     *
     * @return self
     */
    public function set_total_rooms($total_rooms)
    {
        if (is_null($total_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_rooms cannot be null');
        }
        $this->container['total_rooms'] = $total_rooms;

        return $this;
    }

    /**
     * Gets user_languages
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages|null
     */
    public function get_user_languages()
    {
        return $this->container['user_languages'];
    }

    /**
     * Sets user_languages
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUserLanguages|null $user_languages user_languages
     *
     * @return self
     */
    public function set_user_languages($user_languages)
    {
        if (is_null($user_languages)) {
            throw new \InvalidArgumentException('non-nullable user_languages cannot be null');
        }
        $this->container['user_languages'] = $user_languages;

        return $this;
    }

    /**
     * Gets total_channels
     *
     * @return int|null
     */
    public function get_total_channels()
    {
        return $this->container['total_channels'];
    }

    /**
     * Sets total_channels
     *
     * @param int|null $total_channels total_channels
     *
     * @return self
     */
    public function set_total_channels($total_channels)
    {
        if (is_null($total_channels)) {
            throw new \InvalidArgumentException('non-nullable total_channels cannot be null');
        }
        $this->container['total_channels'] = $total_channels;

        return $this;
    }

    /**
     * Gets total_private_groups
     *
     * @return int|null
     */
    public function get_total_private_groups()
    {
        return $this->container['total_private_groups'];
    }

    /**
     * Sets total_private_groups
     *
     * @param int|null $total_private_groups total_private_groups
     *
     * @return self
     */
    public function set_total_private_groups($total_private_groups)
    {
        if (is_null($total_private_groups)) {
            throw new \InvalidArgumentException('non-nullable total_private_groups cannot be null');
        }
        $this->container['total_private_groups'] = $total_private_groups;

        return $this;
    }

    /**
     * Gets total_direct
     *
     * @return int|null
     */
    public function get_total_direct()
    {
        return $this->container['total_direct'];
    }

    /**
     * Sets total_direct
     *
     * @param int|null $total_direct total_direct
     *
     * @return self
     */
    public function set_total_direct($total_direct)
    {
        if (is_null($total_direct)) {
            throw new \InvalidArgumentException('non-nullable total_direct cannot be null');
        }
        $this->container['total_direct'] = $total_direct;

        return $this;
    }

    /**
     * Gets total_livechat
     *
     * @return int|null
     */
    public function get_total_livechat()
    {
        return $this->container['total_livechat'];
    }

    /**
     * Sets total_livechat
     *
     * @param int|null $total_livechat total_livechat
     *
     * @return self
     */
    public function set_total_livechat($total_livechat)
    {
        if (is_null($total_livechat)) {
            throw new \InvalidArgumentException('non-nullable total_livechat cannot be null');
        }
        $this->container['total_livechat'] = $total_livechat;

        return $this;
    }

    /**
     * Gets total_discussions
     *
     * @return int|null
     */
    public function get_total_discussions()
    {
        return $this->container['total_discussions'];
    }

    /**
     * Sets total_discussions
     *
     * @param int|null $total_discussions total_discussions
     *
     * @return self
     */
    public function set_total_discussions($total_discussions)
    {
        if (is_null($total_discussions)) {
            throw new \InvalidArgumentException('non-nullable total_discussions cannot be null');
        }
        $this->container['total_discussions'] = $total_discussions;

        return $this;
    }

    /**
     * Gets total_threads
     *
     * @return int|null
     */
    public function get_total_threads()
    {
        return $this->container['total_threads'];
    }

    /**
     * Sets total_threads
     *
     * @param int|null $total_threads total_threads
     *
     * @return self
     */
    public function set_total_threads($total_threads)
    {
        if (is_null($total_threads)) {
            throw new \InvalidArgumentException('non-nullable total_threads cannot be null');
        }
        $this->container['total_threads'] = $total_threads;

        return $this;
    }

    /**
     * Gets total_livechat_visitors
     *
     * @return int|null
     */
    public function get_total_livechat_visitors()
    {
        return $this->container['total_livechat_visitors'];
    }

    /**
     * Sets total_livechat_visitors
     *
     * @param int|null $total_livechat_visitors total_livechat_visitors
     *
     * @return self
     */
    public function set_total_livechat_visitors($total_livechat_visitors)
    {
        if (is_null($total_livechat_visitors)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_visitors cannot be null');
        }
        $this->container['total_livechat_visitors'] = $total_livechat_visitors;

        return $this;
    }

    /**
     * Gets total_livechat_agents
     *
     * @return int|null
     */
    public function get_total_livechat_agents()
    {
        return $this->container['total_livechat_agents'];
    }

    /**
     * Sets total_livechat_agents
     *
     * @param int|null $total_livechat_agents total_livechat_agents
     *
     * @return self
     */
    public function set_total_livechat_agents($total_livechat_agents)
    {
        if (is_null($total_livechat_agents)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_agents cannot be null');
        }
        $this->container['total_livechat_agents'] = $total_livechat_agents;

        return $this;
    }

    /**
     * Gets voip_enabled
     *
     * @return bool|null
     */
    public function get_voip_enabled()
    {
        return $this->container['voip_enabled'];
    }

    /**
     * Sets voip_enabled
     *
     * @param bool|null $voip_enabled voip_enabled
     *
     * @return self
     */
    public function set_voip_enabled($voip_enabled)
    {
        if (is_null($voip_enabled)) {
            throw new \InvalidArgumentException('non-nullable voip_enabled cannot be null');
        }
        $this->container['voip_enabled'] = $voip_enabled;

        return $this;
    }

    /**
     * Gets omnichannel_sources
     *
     * @return object[]|null
     */
    public function get_omnichannel_sources()
    {
        return $this->container['omnichannel_sources'];
    }

    /**
     * Sets omnichannel_sources
     *
     * @param object[]|null $omnichannel_sources omnichannel_sources
     *
     * @return self
     */
    public function set_omnichannel_sources($omnichannel_sources)
    {
        if (is_null($omnichannel_sources)) {
            throw new \InvalidArgumentException('non-nullable omnichannel_sources cannot be null');
        }
        $this->container['omnichannel_sources'] = $omnichannel_sources;

        return $this;
    }

    /**
     * Gets business_hours
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours|null
     */
    public function get_business_hours()
    {
        return $this->container['business_hours'];
    }

    /**
     * Sets business_hours
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerBusinessHours|null $business_hours business_hours
     *
     * @return self
     */
    public function set_business_hours($business_hours)
    {
        if (is_null($business_hours)) {
            throw new \InvalidArgumentException('non-nullable business_hours cannot be null');
        }
        $this->container['business_hours'] = $business_hours;

        return $this;
    }

    /**
     * Gets chats_on_hold
     *
     * @return int|null
     */
    public function get_chats_on_hold()
    {
        return $this->container['chats_on_hold'];
    }

    /**
     * Sets chats_on_hold
     *
     * @param int|null $chats_on_hold chats_on_hold
     *
     * @return self
     */
    public function set_chats_on_hold($chats_on_hold)
    {
        if (is_null($chats_on_hold)) {
            throw new \InvalidArgumentException('non-nullable chats_on_hold cannot be null');
        }
        $this->container['chats_on_hold'] = $chats_on_hold;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return int|null
     */
    public function get_departments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param int|null $departments departments
     *
     * @return self
     */
    public function set_departments($departments)
    {
        if (is_null($departments)) {
            throw new \InvalidArgumentException('non-nullable departments cannot be null');
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets email_inboxes
     *
     * @return int|null
     */
    public function get_email_inboxes()
    {
        return $this->container['email_inboxes'];
    }

    /**
     * Sets email_inboxes
     *
     * @param int|null $email_inboxes email_inboxes
     *
     * @return self
     */
    public function set_email_inboxes($email_inboxes)
    {
        if (is_null($email_inboxes)) {
            throw new \InvalidArgumentException('non-nullable email_inboxes cannot be null');
        }
        $this->container['email_inboxes'] = $email_inboxes;

        return $this;
    }

    /**
     * Gets voip_calls
     *
     * @return int|null
     */
    public function get_voip_calls()
    {
        return $this->container['voip_calls'];
    }

    /**
     * Sets voip_calls
     *
     * @param int|null $voip_calls voip_calls
     *
     * @return self
     */
    public function set_voip_calls($voip_calls)
    {
        if (is_null($voip_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_calls cannot be null');
        }
        $this->container['voip_calls'] = $voip_calls;

        return $this;
    }

    /**
     * Gets voip_extensions
     *
     * @return int|null
     */
    public function get_voip_extensions()
    {
        return $this->container['voip_extensions'];
    }

    /**
     * Sets voip_extensions
     *
     * @param int|null $voip_extensions voip_extensions
     *
     * @return self
     */
    public function set_voip_extensions($voip_extensions)
    {
        if (is_null($voip_extensions)) {
            throw new \InvalidArgumentException('non-nullable voip_extensions cannot be null');
        }
        $this->container['voip_extensions'] = $voip_extensions;

        return $this;
    }

    /**
     * Gets voip_error_calls
     *
     * @return int|null
     */
    public function get_voip_error_calls()
    {
        return $this->container['voip_error_calls'];
    }

    /**
     * Sets voip_error_calls
     *
     * @param int|null $voip_error_calls voip_error_calls
     *
     * @return self
     */
    public function set_voip_error_calls($voip_error_calls)
    {
        if (is_null($voip_error_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_error_calls cannot be null');
        }
        $this->container['voip_error_calls'] = $voip_error_calls;

        return $this;
    }

    /**
     * Gets voip_successful_calls
     *
     * @return int|null
     */
    public function get_voip_successful_calls()
    {
        return $this->container['voip_successful_calls'];
    }

    /**
     * Sets voip_successful_calls
     *
     * @param int|null $voip_successful_calls voip_successful_calls
     *
     * @return self
     */
    public function set_voip_successful_calls($voip_successful_calls)
    {
        if (is_null($voip_successful_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_successful_calls cannot be null');
        }
        $this->container['voip_successful_calls'] = $voip_successful_calls;

        return $this;
    }

    /**
     * Gets total_channel_messages
     *
     * @return int|null
     */
    public function get_total_channel_messages()
    {
        return $this->container['total_channel_messages'];
    }

    /**
     * Sets total_channel_messages
     *
     * @param int|null $total_channel_messages total_channel_messages
     *
     * @return self
     */
    public function set_total_channel_messages($total_channel_messages)
    {
        if (is_null($total_channel_messages)) {
            throw new \InvalidArgumentException('non-nullable total_channel_messages cannot be null');
        }
        $this->container['total_channel_messages'] = $total_channel_messages;

        return $this;
    }

    /**
     * Gets voip_on_hold_calls
     *
     * @return int|null
     */
    public function get_voip_on_hold_calls()
    {
        return $this->container['voip_on_hold_calls'];
    }

    /**
     * Sets voip_on_hold_calls
     *
     * @param int|null $voip_on_hold_calls voip_on_hold_calls
     *
     * @return self
     */
    public function set_voip_on_hold_calls($voip_on_hold_calls)
    {
        if (is_null($voip_on_hold_calls)) {
            throw new \InvalidArgumentException('non-nullable voip_on_hold_calls cannot be null');
        }
        $this->container['voip_on_hold_calls'] = $voip_on_hold_calls;

        return $this;
    }

    /**
     * Gets total_private_group_messages
     *
     * @return int|null
     */
    public function get_total_private_group_messages()
    {
        return $this->container['total_private_group_messages'];
    }

    /**
     * Sets total_private_group_messages
     *
     * @param int|null $total_private_group_messages total_private_group_messages
     *
     * @return self
     */
    public function set_total_private_group_messages($total_private_group_messages)
    {
        if (is_null($total_private_group_messages)) {
            throw new \InvalidArgumentException('non-nullable total_private_group_messages cannot be null');
        }
        $this->container['total_private_group_messages'] = $total_private_group_messages;

        return $this;
    }

    /**
     * Gets total_direct_messages
     *
     * @return int|null
     */
    public function get_total_direct_messages()
    {
        return $this->container['total_direct_messages'];
    }

    /**
     * Sets total_direct_messages
     *
     * @param int|null $total_direct_messages total_direct_messages
     *
     * @return self
     */
    public function set_total_direct_messages($total_direct_messages)
    {
        if (is_null($total_direct_messages)) {
            throw new \InvalidArgumentException('non-nullable total_direct_messages cannot be null');
        }
        $this->container['total_direct_messages'] = $total_direct_messages;

        return $this;
    }

    /**
     * Gets total_livechat_messages
     *
     * @return int|null
     */
    public function get_total_livechat_messages()
    {
        return $this->container['total_livechat_messages'];
    }

    /**
     * Sets total_livechat_messages
     *
     * @param int|null $total_livechat_messages total_livechat_messages
     *
     * @return self
     */
    public function set_total_livechat_messages($total_livechat_messages)
    {
        if (is_null($total_livechat_messages)) {
            throw new \InvalidArgumentException('non-nullable total_livechat_messages cannot be null');
        }
        $this->container['total_livechat_messages'] = $total_livechat_messages;

        return $this;
    }

    /**
     * Gets total_messages
     *
     * @return int|null
     */
    public function get_total_messages()
    {
        return $this->container['total_messages'];
    }

    /**
     * Sets total_messages
     *
     * @param int|null $total_messages total_messages
     *
     * @return self
     */
    public function set_total_messages($total_messages)
    {
        if (is_null($total_messages)) {
            throw new \InvalidArgumentException('non-nullable total_messages cannot be null');
        }
        $this->container['total_messages'] = $total_messages;

        return $this;
    }

    /**
     * Gets federated_servers
     *
     * @return int|null
     */
    public function get_federated_servers()
    {
        return $this->container['federated_servers'];
    }

    /**
     * Sets federated_servers
     *
     * @param int|null $federated_servers federated_servers
     *
     * @return self
     */
    public function set_federated_servers($federated_servers)
    {
        if (is_null($federated_servers)) {
            throw new \InvalidArgumentException('non-nullable federated_servers cannot be null');
        }
        $this->container['federated_servers'] = $federated_servers;

        return $this;
    }

    /**
     * Gets federated_users
     *
     * @return int|null
     */
    public function get_federated_users()
    {
        return $this->container['federated_users'];
    }

    /**
     * Sets federated_users
     *
     * @param int|null $federated_users federated_users
     *
     * @return self
     */
    public function set_federated_users($federated_users)
    {
        if (is_null($federated_users)) {
            throw new \InvalidArgumentException('non-nullable federated_users cannot be null');
        }
        $this->container['federated_users'] = $federated_users;

        return $this;
    }

    /**
     * Gets os
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerOs|null
     */
    public function get_os()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerOs|null $os os
     *
     * @return self
     */
    public function set_os($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets process
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess|null
     */
    public function get_process()
    {
        return $this->container['process'];
    }

    /**
     * Sets process
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerProcess|null $process process
     *
     * @return self
     */
    public function set_process($process)
    {
        if (is_null($process)) {
            throw new \InvalidArgumentException('non-nullable process cannot be null');
        }
        $this->container['process'] = $process;

        return $this;
    }

    /**
     * Gets deploy
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy|null
     */
    public function get_deploy()
    {
        return $this->container['deploy'];
    }

    /**
     * Sets deploy
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerDeploy|null $deploy deploy
     *
     * @return self
     */
    public function set_deploy($deploy)
    {
        if (is_null($deploy)) {
            throw new \InvalidArgumentException('non-nullable deploy cannot be null');
        }
        $this->container['deploy'] = $deploy;

        return $this;
    }

    /**
     * Gets read_receipts_enabled
     *
     * @return bool|null
     */
    public function get_read_receipts_enabled()
    {
        return $this->container['read_receipts_enabled'];
    }

    /**
     * Sets read_receipts_enabled
     *
     * @param bool|null $read_receipts_enabled read_receipts_enabled
     *
     * @return self
     */
    public function set_read_receipts_enabled($read_receipts_enabled)
    {
        if (is_null($read_receipts_enabled)) {
            throw new \InvalidArgumentException('non-nullable read_receipts_enabled cannot be null');
        }
        $this->container['read_receipts_enabled'] = $read_receipts_enabled;

        return $this;
    }

    /**
     * Gets read_receipts_detailed
     *
     * @return bool|null
     */
    public function get_read_receipts_detailed()
    {
        return $this->container['read_receipts_detailed'];
    }

    /**
     * Sets read_receipts_detailed
     *
     * @param bool|null $read_receipts_detailed read_receipts_detailed
     *
     * @return self
     */
    public function set_read_receipts_detailed($read_receipts_detailed)
    {
        if (is_null($read_receipts_detailed)) {
            throw new \InvalidArgumentException('non-nullable read_receipts_detailed cannot be null');
        }
        $this->container['read_receipts_detailed'] = $read_receipts_detailed;

        return $this;
    }

    /**
     * Gets enterprise_ready
     *
     * @return bool|null
     */
    public function get_enterprise_ready()
    {
        return $this->container['enterprise_ready'];
    }

    /**
     * Sets enterprise_ready
     *
     * @param bool|null $enterprise_ready enterprise_ready
     *
     * @return self
     */
    public function set_enterprise_ready($enterprise_ready)
    {
        if (is_null($enterprise_ready)) {
            throw new \InvalidArgumentException('non-nullable enterprise_ready cannot be null');
        }
        $this->container['enterprise_ready'] = $enterprise_ready;

        return $this;
    }

    /**
     * Gets uploads_total
     *
     * @return int|null
     */
    public function get_uploads_total()
    {
        return $this->container['uploads_total'];
    }

    /**
     * Sets uploads_total
     *
     * @param int|null $uploads_total uploads_total
     *
     * @return self
     */
    public function set_uploads_total($uploads_total)
    {
        if (is_null($uploads_total)) {
            throw new \InvalidArgumentException('non-nullable uploads_total cannot be null');
        }
        $this->container['uploads_total'] = $uploads_total;

        return $this;
    }

    /**
     * Gets uploads_total_size
     *
     * @return int|null
     */
    public function get_uploads_total_size()
    {
        return $this->container['uploads_total_size'];
    }

    /**
     * Sets uploads_total_size
     *
     * @param int|null $uploads_total_size uploads_total_size
     *
     * @return self
     */
    public function set_uploads_total_size($uploads_total_size)
    {
        if (is_null($uploads_total_size)) {
            throw new \InvalidArgumentException('non-nullable uploads_total_size cannot be null');
        }
        $this->container['uploads_total_size'] = $uploads_total_size;

        return $this;
    }

    /**
     * Gets migration
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerMigration|null
     */
    public function get_migration()
    {
        return $this->container['migration'];
    }

    /**
     * Sets migration
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerMigration|null $migration migration
     *
     * @return self
     */
    public function set_migration($migration)
    {
        if (is_null($migration)) {
            throw new \InvalidArgumentException('non-nullable migration cannot be null');
        }
        $this->container['migration'] = $migration;

        return $this;
    }

    /**
     * Gets instance_count
     *
     * @return int|null
     */
    public function get_instance_count()
    {
        return $this->container['instance_count'];
    }

    /**
     * Sets instance_count
     *
     * @param int|null $instance_count instance_count
     *
     * @return self
     */
    public function set_instance_count($instance_count)
    {
        if (is_null($instance_count)) {
            throw new \InvalidArgumentException('non-nullable instance_count cannot be null');
        }
        $this->container['instance_count'] = $instance_count;

        return $this;
    }

    /**
     * Gets ms_enabled
     *
     * @return bool|null
     */
    public function get_ms_enabled()
    {
        return $this->container['ms_enabled'];
    }

    /**
     * Sets ms_enabled
     *
     * @param bool|null $ms_enabled ms_enabled
     *
     * @return self
     */
    public function set_ms_enabled($ms_enabled)
    {
        if (is_null($ms_enabled)) {
            throw new \InvalidArgumentException('non-nullable ms_enabled cannot be null');
        }
        $this->container['ms_enabled'] = $ms_enabled;

        return $this;
    }

    /**
     * Gets oplog_enabled
     *
     * @return bool|null
     */
    public function get_oplog_enabled()
    {
        return $this->container['oplog_enabled'];
    }

    /**
     * Sets oplog_enabled
     *
     * @param bool|null $oplog_enabled oplog_enabled
     *
     * @return self
     */
    public function set_oplog_enabled($oplog_enabled)
    {
        if (is_null($oplog_enabled)) {
            throw new \InvalidArgumentException('non-nullable oplog_enabled cannot be null');
        }
        $this->container['oplog_enabled'] = $oplog_enabled;

        return $this;
    }

    /**
     * Gets mongo_version
     *
     * @return string|null
     */
    public function get_mongo_version()
    {
        return $this->container['mongo_version'];
    }

    /**
     * Sets mongo_version
     *
     * @param string|null $mongo_version mongo_version
     *
     * @return self
     */
    public function set_mongo_version($mongo_version)
    {
        if (is_null($mongo_version)) {
            throw new \InvalidArgumentException('non-nullable mongo_version cannot be null');
        }
        $this->container['mongo_version'] = $mongo_version;

        return $this;
    }

    /**
     * Gets mongo_storage_engine
     *
     * @return string|null
     */
    public function get_mongo_storage_engine()
    {
        return $this->container['mongo_storage_engine'];
    }

    /**
     * Sets mongo_storage_engine
     *
     * @param string|null $mongo_storage_engine mongo_storage_engine
     *
     * @return self
     */
    public function set_mongo_storage_engine($mongo_storage_engine)
    {
        if (is_null($mongo_storage_engine)) {
            throw new \InvalidArgumentException('non-nullable mongo_storage_engine cannot be null');
        }
        $this->container['mongo_storage_engine'] = $mongo_storage_engine;

        return $this;
    }

    /**
     * Gets apps
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerApps|null
     */
    public function get_apps()
    {
        return $this->container['apps'];
    }

    /**
     * Sets apps
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerApps|null $apps apps
     *
     * @return self
     */
    public function set_apps($apps)
    {
        if (is_null($apps)) {
            throw new \InvalidArgumentException('non-nullable apps cannot be null');
        }
        $this->container['apps'] = $apps;

        return $this;
    }

    /**
     * Gets unique_users_of_yesterday
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_users_of_yesterday()
    {
        return $this->container['unique_users_of_yesterday'];
    }

    /**
     * Sets unique_users_of_yesterday
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_users_of_yesterday unique_users_of_yesterday
     *
     * @return self
     */
    public function set_unique_users_of_yesterday($unique_users_of_yesterday)
    {
        if (is_null($unique_users_of_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_yesterday cannot be null');
        }
        $this->container['unique_users_of_yesterday'] = $unique_users_of_yesterday;

        return $this;
    }

    /**
     * Gets unique_devices_of_last_week
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_devices_of_last_week()
    {
        return $this->container['unique_devices_of_last_week'];
    }

    /**
     * Sets unique_devices_of_last_week
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_devices_of_last_week unique_devices_of_last_week
     *
     * @return self
     */
    public function set_unique_devices_of_last_week($unique_devices_of_last_week)
    {
        if (is_null($unique_devices_of_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_last_week cannot be null');
        }
        $this->container['unique_devices_of_last_week'] = $unique_devices_of_last_week;

        return $this;
    }

    /**
     * Gets unique_osof_last_week
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_osof_last_week()
    {
        return $this->container['unique_osof_last_week'];
    }

    /**
     * Sets unique_osof_last_week
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_osof_last_week unique_osof_last_week
     *
     * @return self
     */
    public function set_unique_osof_last_week($unique_osof_last_week)
    {
        if (is_null($unique_osof_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_last_week cannot be null');
        }
        $this->container['unique_osof_last_week'] = $unique_osof_last_week;

        return $this;
    }

    /**
     * Gets unique_devices_of_last_month
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_devices_of_last_month()
    {
        return $this->container['unique_devices_of_last_month'];
    }

    /**
     * Sets unique_devices_of_last_month
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_devices_of_last_month unique_devices_of_last_month
     *
     * @return self
     */
    public function set_unique_devices_of_last_month($unique_devices_of_last_month)
    {
        if (is_null($unique_devices_of_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_last_month cannot be null');
        }
        $this->container['unique_devices_of_last_month'] = $unique_devices_of_last_month;

        return $this;
    }

    /**
     * Gets unique_osof_yesterday
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_osof_yesterday()
    {
        return $this->container['unique_osof_yesterday'];
    }

    /**
     * Sets unique_osof_yesterday
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_osof_yesterday unique_osof_yesterday
     *
     * @return self
     */
    public function set_unique_osof_yesterday($unique_osof_yesterday)
    {
        if (is_null($unique_osof_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_yesterday cannot be null');
        }
        $this->container['unique_osof_yesterday'] = $unique_osof_yesterday;

        return $this;
    }

    /**
     * Gets unique_osof_last_month
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_osof_last_month()
    {
        return $this->container['unique_osof_last_month'];
    }

    /**
     * Sets unique_osof_last_month
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_osof_last_month unique_osof_last_month
     *
     * @return self
     */
    public function set_unique_osof_last_month($unique_osof_last_month)
    {
        if (is_null($unique_osof_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_osof_last_month cannot be null');
        }
        $this->container['unique_osof_last_month'] = $unique_osof_last_month;

        return $this;
    }

    /**
     * Gets unique_devices_of_yesterday
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_devices_of_yesterday()
    {
        return $this->container['unique_devices_of_yesterday'];
    }

    /**
     * Sets unique_devices_of_yesterday
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_devices_of_yesterday unique_devices_of_yesterday
     *
     * @return self
     */
    public function set_unique_devices_of_yesterday($unique_devices_of_yesterday)
    {
        if (is_null($unique_devices_of_yesterday)) {
            throw new \InvalidArgumentException('non-nullable unique_devices_of_yesterday cannot be null');
        }
        $this->container['unique_devices_of_yesterday'] = $unique_devices_of_yesterday;

        return $this;
    }

    /**
     * Gets unique_users_of_last_week
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_users_of_last_week()
    {
        return $this->container['unique_users_of_last_week'];
    }

    /**
     * Sets unique_users_of_last_week
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_users_of_last_week unique_users_of_last_week
     *
     * @return self
     */
    public function set_unique_users_of_last_week($unique_users_of_last_week)
    {
        if (is_null($unique_users_of_last_week)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_last_week cannot be null');
        }
        $this->container['unique_users_of_last_week'] = $unique_users_of_last_week;

        return $this;
    }

    /**
     * Gets unique_users_of_last_month
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null
     */
    public function get_unique_users_of_last_month()
    {
        return $this->container['unique_users_of_last_month'];
    }

    /**
     * Sets unique_users_of_last_month
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerUniqueUsersOfYesterday|null $unique_users_of_last_month unique_users_of_last_month
     *
     * @return self
     */
    public function set_unique_users_of_last_month($unique_users_of_last_month)
    {
        if (is_null($unique_users_of_last_month)) {
            throw new \InvalidArgumentException('non-nullable unique_users_of_last_month cannot be null');
        }
        $this->container['unique_users_of_last_month'] = $unique_users_of_last_month;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerServices|null
     */
    public function get_services()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerServices|null $services services
     *
     * @return self
     */
    public function set_services($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter|null
     */
    public function get_importer()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerImporter|null $importer importer
     *
     * @return self
     */
    public function set_importer($importer)
    {
        if (is_null($importer)) {
            throw new \InvalidArgumentException('non-nullable importer cannot be null');
        }
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets video_conf
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerVideoConf|null
     */
    public function get_video_conf()
    {
        return $this->container['video_conf'];
    }

    /**
     * Sets video_conf
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerVideoConf|null $video_conf video_conf
     *
     * @return self
     */
    public function set_video_conf($video_conf)
    {
        if (is_null($video_conf)) {
            throw new \InvalidArgumentException('non-nullable video_conf cannot be null');
        }
        $this->container['video_conf'] = $video_conf;

        return $this;
    }

    /**
     * Gets dashboard_count
     *
     * @return int|null
     */
    public function get_dashboard_count()
    {
        return $this->container['dashboard_count'];
    }

    /**
     * Sets dashboard_count
     *
     * @param int|null $dashboard_count dashboard_count
     *
     * @return self
     */
    public function set_dashboard_count($dashboard_count)
    {
        if (is_null($dashboard_count)) {
            throw new \InvalidArgumentException('non-nullable dashboard_count cannot be null');
        }
        $this->container['dashboard_count'] = $dashboard_count;

        return $this;
    }

    /**
     * Gets message_audit_apply
     *
     * @return int|null
     */
    public function get_message_audit_apply()
    {
        return $this->container['message_audit_apply'];
    }

    /**
     * Sets message_audit_apply
     *
     * @param int|null $message_audit_apply message_audit_apply
     *
     * @return self
     */
    public function set_message_audit_apply($message_audit_apply)
    {
        if (is_null($message_audit_apply)) {
            throw new \InvalidArgumentException('non-nullable message_audit_apply cannot be null');
        }
        $this->container['message_audit_apply'] = $message_audit_apply;

        return $this;
    }

    /**
     * Gets message_audit_load
     *
     * @return int|null
     */
    public function get_message_audit_load()
    {
        return $this->container['message_audit_load'];
    }

    /**
     * Sets message_audit_load
     *
     * @param int|null $message_audit_load message_audit_load
     *
     * @return self
     */
    public function set_message_audit_load($message_audit_load)
    {
        if (is_null($message_audit_load)) {
            throw new \InvalidArgumentException('non-nullable message_audit_load cannot be null');
        }
        $this->container['message_audit_load'] = $message_audit_load;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return object|null
     */
    public function get_settings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param object|null $settings settings
     *
     * @return self
     */
    public function set_settings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations|null
     */
    public function get_integrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerIntegrations|null $integrations integrations
     *
     * @return self
     */
    public function set_integrations($integrations)
    {
        if (is_null($integrations)) {
            throw new \InvalidArgumentException('non-nullable integrations cannot be null');
        }
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets push_queue
     *
     * @return int|null
     */
    public function get_push_queue()
    {
        return $this->container['push_queue'];
    }

    /**
     * Sets push_queue
     *
     * @param int|null $push_queue push_queue
     *
     * @return self
     */
    public function set_push_queue($push_queue)
    {
        if (is_null($push_queue)) {
            throw new \InvalidArgumentException('non-nullable push_queue cannot be null');
        }
        $this->container['push_queue'] = $push_queue;

        return $this;
    }

    /**
     * Gets enterprise
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerEnterprise|null
     */
    public function get_enterprise()
    {
        return $this->container['enterprise'];
    }

    /**
     * Sets enterprise
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerEnterprise|null $enterprise enterprise
     *
     * @return self
     */
    public function set_enterprise($enterprise)
    {
        if (is_null($enterprise)) {
            throw new \InvalidArgumentException('non-nullable enterprise cannot be null');
        }
        $this->container['enterprise'] = $enterprise;

        return $this;
    }

    /**
     * Gets total_otr_rooms
     *
     * @return int|null
     */
    public function get_total_otr_rooms()
    {
        return $this->container['total_otr_rooms'];
    }

    /**
     * Sets total_otr_rooms
     *
     * @param int|null $total_otr_rooms total_otr_rooms
     *
     * @return self
     */
    public function set_total_otr_rooms($total_otr_rooms)
    {
        if (is_null($total_otr_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_otr_rooms cannot be null');
        }
        $this->container['total_otr_rooms'] = $total_otr_rooms;

        return $this;
    }

    /**
     * Gets total_otr
     *
     * @return int|null
     */
    public function get_total_otr()
    {
        return $this->container['total_otr'];
    }

    /**
     * Sets total_otr
     *
     * @param int|null $total_otr total_otr
     *
     * @return self
     */
    public function set_total_otr($total_otr)
    {
        if (is_null($total_otr)) {
            throw new \InvalidArgumentException('non-nullable total_otr cannot be null');
        }
        $this->container['total_otr'] = $total_otr;

        return $this;
    }

    /**
     * Gets total_broadcast_rooms
     *
     * @return int|null
     */
    public function get_total_broadcast_rooms()
    {
        return $this->container['total_broadcast_rooms'];
    }

    /**
     * Sets total_broadcast_rooms
     *
     * @param int|null $total_broadcast_rooms total_broadcast_rooms
     *
     * @return self
     */
    public function set_total_broadcast_rooms($total_broadcast_rooms)
    {
        if (is_null($total_broadcast_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_broadcast_rooms cannot be null');
        }
        $this->container['total_broadcast_rooms'] = $total_broadcast_rooms;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams|null
     */
    public function get_teams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \WebMI\RocketChatApiClient\StatisticsApi\Model\GetApiV1StatisticsList200ResponseStatisticsInnerTeams|null $teams teams
     *
     * @return self
     */
    public function set_teams($teams)
    {
        if (is_null($teams)) {
            throw new \InvalidArgumentException('non-nullable teams cannot be null');
        }
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets total_rooms_with_active_livestream
     *
     * @return int|null
     */
    public function get_total_rooms_with_active_livestream()
    {
        return $this->container['total_rooms_with_active_livestream'];
    }

    /**
     * Sets total_rooms_with_active_livestream
     *
     * @param int|null $total_rooms_with_active_livestream total_rooms_with_active_livestream
     *
     * @return self
     */
    public function set_total_rooms_with_active_livestream($total_rooms_with_active_livestream)
    {
        if (is_null($total_rooms_with_active_livestream)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_active_livestream cannot be null');
        }
        $this->container['total_rooms_with_active_livestream'] = $total_rooms_with_active_livestream;

        return $this;
    }

    /**
     * Gets total_triggered_emails
     *
     * @return int|null
     */
    public function get_total_triggered_emails()
    {
        return $this->container['total_triggered_emails'];
    }

    /**
     * Sets total_triggered_emails
     *
     * @param int|null $total_triggered_emails total_triggered_emails
     *
     * @return self
     */
    public function set_total_triggered_emails($total_triggered_emails)
    {
        if (is_null($total_triggered_emails)) {
            throw new \InvalidArgumentException('non-nullable total_triggered_emails cannot be null');
        }
        $this->container['total_triggered_emails'] = $total_triggered_emails;

        return $this;
    }

    /**
     * Gets total_rooms_with_starred
     *
     * @return int|null
     */
    public function get_total_rooms_with_starred()
    {
        return $this->container['total_rooms_with_starred'];
    }

    /**
     * Sets total_rooms_with_starred
     *
     * @param int|null $total_rooms_with_starred total_rooms_with_starred
     *
     * @return self
     */
    public function set_total_rooms_with_starred($total_rooms_with_starred)
    {
        if (is_null($total_rooms_with_starred)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_starred cannot be null');
        }
        $this->container['total_rooms_with_starred'] = $total_rooms_with_starred;

        return $this;
    }

    /**
     * Gets total_rooms_with_pinned
     *
     * @return int|null
     */
    public function get_total_rooms_with_pinned()
    {
        return $this->container['total_rooms_with_pinned'];
    }

    /**
     * Sets total_rooms_with_pinned
     *
     * @param int|null $total_rooms_with_pinned total_rooms_with_pinned
     *
     * @return self
     */
    public function set_total_rooms_with_pinned($total_rooms_with_pinned)
    {
        if (is_null($total_rooms_with_pinned)) {
            throw new \InvalidArgumentException('non-nullable total_rooms_with_pinned cannot be null');
        }
        $this->container['total_rooms_with_pinned'] = $total_rooms_with_pinned;

        return $this;
    }

    /**
     * Gets total_user_totp
     *
     * @return int|null
     */
    public function get_total_user_totp()
    {
        return $this->container['total_user_totp'];
    }

    /**
     * Sets total_user_totp
     *
     * @param int|null $total_user_totp total_user_totp
     *
     * @return self
     */
    public function set_total_user_totp($total_user_totp)
    {
        if (is_null($total_user_totp)) {
            throw new \InvalidArgumentException('non-nullable total_user_totp cannot be null');
        }
        $this->container['total_user_totp'] = $total_user_totp;

        return $this;
    }

    /**
     * Gets total_user_email2fa
     *
     * @return int|null
     */
    public function get_total_user_email2fa()
    {
        return $this->container['total_user_email2fa'];
    }

    /**
     * Sets total_user_email2fa
     *
     * @param int|null $total_user_email2fa total_user_email2fa
     *
     * @return self
     */
    public function set_total_user_email2fa($total_user_email2fa)
    {
        if (is_null($total_user_email2fa)) {
            throw new \InvalidArgumentException('non-nullable total_user_email2fa cannot be null');
        }
        $this->container['total_user_email2fa'] = $total_user_email2fa;

        return $this;
    }

    /**
     * Gets total_pinned
     *
     * @return int|null
     */
    public function get_total_pinned()
    {
        return $this->container['total_pinned'];
    }

    /**
     * Sets total_pinned
     *
     * @param int|null $total_pinned total_pinned
     *
     * @return self
     */
    public function set_total_pinned($total_pinned)
    {
        if (is_null($total_pinned)) {
            throw new \InvalidArgumentException('non-nullable total_pinned cannot be null');
        }
        $this->container['total_pinned'] = $total_pinned;

        return $this;
    }

    /**
     * Gets total_starred
     *
     * @return int|null
     */
    public function get_total_starred()
    {
        return $this->container['total_starred'];
    }

    /**
     * Sets total_starred
     *
     * @param int|null $total_starred total_starred
     *
     * @return self
     */
    public function set_total_starred($total_starred)
    {
        if (is_null($total_starred)) {
            throw new \InvalidArgumentException('non-nullable total_starred cannot be null');
        }
        $this->container['total_starred'] = $total_starred;

        return $this;
    }

    /**
     * Gets total_link_invitation
     *
     * @return int|null
     */
    public function get_total_link_invitation()
    {
        return $this->container['total_link_invitation'];
    }

    /**
     * Sets total_link_invitation
     *
     * @param int|null $total_link_invitation total_link_invitation
     *
     * @return self
     */
    public function set_total_link_invitation($total_link_invitation)
    {
        if (is_null($total_link_invitation)) {
            throw new \InvalidArgumentException('non-nullable total_link_invitation cannot be null');
        }
        $this->container['total_link_invitation'] = $total_link_invitation;

        return $this;
    }

    /**
     * Gets total_link_invitation_uses
     *
     * @return int|null
     */
    public function get_total_link_invitation_uses()
    {
        return $this->container['total_link_invitation_uses'];
    }

    /**
     * Sets total_link_invitation_uses
     *
     * @param int|null $total_link_invitation_uses total_link_invitation_uses
     *
     * @return self
     */
    public function set_total_link_invitation_uses($total_link_invitation_uses)
    {
        if (is_null($total_link_invitation_uses)) {
            throw new \InvalidArgumentException('non-nullable total_link_invitation_uses cannot be null');
        }
        $this->container['total_link_invitation_uses'] = $total_link_invitation_uses;

        return $this;
    }

    /**
     * Gets total_email_invitation
     *
     * @return int|null
     */
    public function get_total_email_invitation()
    {
        return $this->container['total_email_invitation'];
    }

    /**
     * Sets total_email_invitation
     *
     * @param int|null $total_email_invitation total_email_invitation
     *
     * @return self
     */
    public function set_total_email_invitation($total_email_invitation)
    {
        if (is_null($total_email_invitation)) {
            throw new \InvalidArgumentException('non-nullable total_email_invitation cannot be null');
        }
        $this->container['total_email_invitation'] = $total_email_invitation;

        return $this;
    }

    /**
     * Gets total_e2_e_rooms
     *
     * @return int|null
     */
    public function get_total_e2_e_rooms()
    {
        return $this->container['total_e2_e_rooms'];
    }

    /**
     * Sets total_e2_e_rooms
     *
     * @param int|null $total_e2_e_rooms total_e2_e_rooms
     *
     * @return self
     */
    public function set_total_e2_e_rooms($total_e2_e_rooms)
    {
        if (is_null($total_e2_e_rooms)) {
            throw new \InvalidArgumentException('non-nullable total_e2_e_rooms cannot be null');
        }
        $this->container['total_e2_e_rooms'] = $total_e2_e_rooms;

        return $this;
    }

    /**
     * Gets logo_change
     *
     * @return bool|null
     */
    public function get_logo_change()
    {
        return $this->container['logo_change'];
    }

    /**
     * Sets logo_change
     *
     * @param bool|null $logo_change logo_change
     *
     * @return self
     */
    public function set_logo_change($logo_change)
    {
        if (is_null($logo_change)) {
            throw new \InvalidArgumentException('non-nullable logo_change cannot be null');
        }
        $this->container['logo_change'] = $logo_change;

        return $this;
    }

    /**
     * Gets show_home_button
     *
     * @return bool|null
     */
    public function get_show_home_button()
    {
        return $this->container['show_home_button'];
    }

    /**
     * Sets show_home_button
     *
     * @param bool|null $show_home_button show_home_button
     *
     * @return self
     */
    public function set_show_home_button($show_home_button)
    {
        if (is_null($show_home_button)) {
            throw new \InvalidArgumentException('non-nullable show_home_button cannot be null');
        }
        $this->container['show_home_button'] = $show_home_button;

        return $this;
    }

    /**
     * Gets total_encrypted_messages
     *
     * @return int|null
     */
    public function get_total_encrypted_messages()
    {
        return $this->container['total_encrypted_messages'];
    }

    /**
     * Sets total_encrypted_messages
     *
     * @param int|null $total_encrypted_messages total_encrypted_messages
     *
     * @return self
     */
    public function set_total_encrypted_messages($total_encrypted_messages)
    {
        if (is_null($total_encrypted_messages)) {
            throw new \InvalidArgumentException('non-nullable total_encrypted_messages cannot be null');
        }
        $this->container['total_encrypted_messages'] = $total_encrypted_messages;

        return $this;
    }

    /**
     * Gets total_manually_added_users
     *
     * @return int|null
     */
    public function get_total_manually_added_users()
    {
        return $this->container['total_manually_added_users'];
    }

    /**
     * Sets total_manually_added_users
     *
     * @param int|null $total_manually_added_users total_manually_added_users
     *
     * @return self
     */
    public function set_total_manually_added_users($total_manually_added_users)
    {
        if (is_null($total_manually_added_users)) {
            throw new \InvalidArgumentException('non-nullable total_manually_added_users cannot be null');
        }
        $this->container['total_manually_added_users'] = $total_manually_added_users;

        return $this;
    }

    /**
     * Gets total_subscription_roles
     *
     * @return int|null
     */
    public function get_total_subscription_roles()
    {
        return $this->container['total_subscription_roles'];
    }

    /**
     * Sets total_subscription_roles
     *
     * @param int|null $total_subscription_roles total_subscription_roles
     *
     * @return self
     */
    public function set_total_subscription_roles($total_subscription_roles)
    {
        if (is_null($total_subscription_roles)) {
            throw new \InvalidArgumentException('non-nullable total_subscription_roles cannot be null');
        }
        $this->container['total_subscription_roles'] = $total_subscription_roles;

        return $this;
    }

    /**
     * Gets total_user_roles
     *
     * @return int|null
     */
    public function get_total_user_roles()
    {
        return $this->container['total_user_roles'];
    }

    /**
     * Sets total_user_roles
     *
     * @param int|null $total_user_roles total_user_roles
     *
     * @return self
     */
    public function set_total_user_roles($total_user_roles)
    {
        if (is_null($total_user_roles)) {
            throw new \InvalidArgumentException('non-nullable total_user_roles cannot be null');
        }
        $this->container['total_user_roles'] = $total_user_roles;

        return $this;
    }

    /**
     * Gets total_web_rtc_calls
     *
     * @return int|null
     */
    public function get_total_web_rtc_calls()
    {
        return $this->container['total_web_rtc_calls'];
    }

    /**
     * Sets total_web_rtc_calls
     *
     * @param int|null $total_web_rtc_calls total_web_rtc_calls
     *
     * @return self
     */
    public function set_total_web_rtc_calls($total_web_rtc_calls)
    {
        if (is_null($total_web_rtc_calls)) {
            throw new \InvalidArgumentException('non-nullable total_web_rtc_calls cannot be null');
        }
        $this->container['total_web_rtc_calls'] = $total_web_rtc_calls;

        return $this;
    }

    /**
     * Gets matrix_bridge_enabled
     *
     * @return bool|null
     */
    public function get_matrix_bridge_enabled()
    {
        return $this->container['matrix_bridge_enabled'];
    }

    /**
     * Sets matrix_bridge_enabled
     *
     * @param bool|null $matrix_bridge_enabled matrix_bridge_enabled
     *
     * @return self
     */
    public function set_matrix_bridge_enabled($matrix_bridge_enabled)
    {
        if (is_null($matrix_bridge_enabled)) {
            throw new \InvalidArgumentException('non-nullable matrix_bridge_enabled cannot be null');
        }
        $this->container['matrix_bridge_enabled'] = $matrix_bridge_enabled;

        return $this;
    }

    /**
     * Gets uncaught_exceptions_count
     *
     * @return int|null
     */
    public function get_uncaught_exceptions_count()
    {
        return $this->container['uncaught_exceptions_count'];
    }

    /**
     * Sets uncaught_exceptions_count
     *
     * @param int|null $uncaught_exceptions_count uncaught_exceptions_count
     *
     * @return self
     */
    public function set_uncaught_exceptions_count($uncaught_exceptions_count)
    {
        if (is_null($uncaught_exceptions_count)) {
            throw new \InvalidArgumentException('non-nullable uncaught_exceptions_count cannot be null');
        }
        $this->container['uncaught_exceptions_count'] = $uncaught_exceptions_count;

        return $this;
    }

    /**
     * Gets home_title_changed
     *
     * @return bool|null
     */
    public function get_home_title_changed()
    {
        return $this->container['home_title_changed'];
    }

    /**
     * Sets home_title_changed
     *
     * @param bool|null $home_title_changed home_title_changed
     *
     * @return self
     */
    public function set_home_title_changed($home_title_changed)
    {
        if (is_null($home_title_changed)) {
            throw new \InvalidArgumentException('non-nullable home_title_changed cannot be null');
        }
        $this->container['home_title_changed'] = $home_title_changed;

        return $this;
    }

    /**
     * Gets home_body_changed
     *
     * @return bool|null
     */
    public function get_home_body_changed()
    {
        return $this->container['home_body_changed'];
    }

    /**
     * Sets home_body_changed
     *
     * @param bool|null $home_body_changed home_body_changed
     *
     * @return self
     */
    public function set_home_body_changed($home_body_changed)
    {
        if (is_null($home_body_changed)) {
            throw new \InvalidArgumentException('non-nullable home_body_changed cannot be null');
        }
        $this->container['home_body_changed'] = $home_body_changed;

        return $this;
    }

    /**
     * Gets custom_css_changed
     *
     * @return bool|null
     */
    public function get_custom_css_changed()
    {
        return $this->container['custom_css_changed'];
    }

    /**
     * Sets custom_css_changed
     *
     * @param bool|null $custom_css_changed custom_css_changed
     *
     * @return self
     */
    public function set_custom_css_changed($custom_css_changed)
    {
        if (is_null($custom_css_changed)) {
            throw new \InvalidArgumentException('non-nullable custom_css_changed cannot be null');
        }
        $this->container['custom_css_changed'] = $custom_css_changed;

        return $this;
    }

    /**
     * Gets on_logout_custom_script_changed
     *
     * @return bool|null
     */
    public function get_on_logout_custom_script_changed()
    {
        return $this->container['on_logout_custom_script_changed'];
    }

    /**
     * Sets on_logout_custom_script_changed
     *
     * @param bool|null $on_logout_custom_script_changed on_logout_custom_script_changed
     *
     * @return self
     */
    public function set_on_logout_custom_script_changed($on_logout_custom_script_changed)
    {
        if (is_null($on_logout_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable on_logout_custom_script_changed cannot be null');
        }
        $this->container['on_logout_custom_script_changed'] = $on_logout_custom_script_changed;

        return $this;
    }

    /**
     * Gets logged_out_custom_script_changed
     *
     * @return bool|null
     */
    public function get_logged_out_custom_script_changed()
    {
        return $this->container['logged_out_custom_script_changed'];
    }

    /**
     * Sets logged_out_custom_script_changed
     *
     * @param bool|null $logged_out_custom_script_changed logged_out_custom_script_changed
     *
     * @return self
     */
    public function set_logged_out_custom_script_changed($logged_out_custom_script_changed)
    {
        if (is_null($logged_out_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable logged_out_custom_script_changed cannot be null');
        }
        $this->container['logged_out_custom_script_changed'] = $logged_out_custom_script_changed;

        return $this;
    }

    /**
     * Gets logged_in_custom_script_changed
     *
     * @return bool|null
     */
    public function get_logged_in_custom_script_changed()
    {
        return $this->container['logged_in_custom_script_changed'];
    }

    /**
     * Sets logged_in_custom_script_changed
     *
     * @param bool|null $logged_in_custom_script_changed logged_in_custom_script_changed
     *
     * @return self
     */
    public function set_logged_in_custom_script_changed($logged_in_custom_script_changed)
    {
        if (is_null($logged_in_custom_script_changed)) {
            throw new \InvalidArgumentException('non-nullable logged_in_custom_script_changed cannot be null');
        }
        $this->container['logged_in_custom_script_changed'] = $logged_in_custom_script_changed;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function get_created_at()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function set_created_at($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string|null
     */
    public function get__updated_at()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string|null $_updated_at _updated_at
     *
     * @return self
     */
    public function set__updated_at($_updated_at)
    {
        if (is_null($_updated_at)) {
            throw new \InvalidArgumentException('non-nullable _updated_at cannot be null');
        }
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


