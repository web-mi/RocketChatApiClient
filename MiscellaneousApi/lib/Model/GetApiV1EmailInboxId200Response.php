<?php
/**
 * GetApiV1EmailInboxId200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatMiscellaneousApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Miscellaneous
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatMiscellaneousApi\Model;

use \ArrayAccess;
use \RocketChatMiscellaneousApi\ObjectSerializer;

/**
 * GetApiV1EmailInboxId200Response Class Doc Comment
 *
 * @category Class
 * @package  RocketChatMiscellaneousApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApiV1EmailInboxId200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_api_v1_email_inbox_id_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'active' => 'bool',
        'name' => 'string',
        'email' => 'string',
        'description' => 'string',
        'sender_info' => 'string',
        'department' => 'string',
        'smtp' => '\RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp',
        'imap' => '\RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp',
        '_created_at' => 'string',
        '_updated_at' => 'string',
        '_created_by' => '\RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerCreatedBy',
        'success' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'active' => null,
        'name' => null,
        'email' => null,
        'description' => null,
        'sender_info' => null,
        'department' => null,
        'smtp' => null,
        'imap' => null,
        '_created_at' => null,
        '_updated_at' => null,
        '_created_by' => null,
        'success' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'active' => false,
        'name' => false,
        'email' => false,
        'description' => false,
        'sender_info' => false,
        'department' => false,
        'smtp' => false,
        'imap' => false,
        '_created_at' => false,
        '_updated_at' => false,
        '_created_by' => false,
        'success' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'active' => 'active',
        'name' => 'name',
        'email' => 'email',
        'description' => 'description',
        'sender_info' => 'senderInfo',
        'department' => 'department',
        'smtp' => 'smtp',
        'imap' => 'imap',
        '_created_at' => '_createdAt',
        '_updated_at' => '_updatedAt',
        '_created_by' => '_createdBy',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'active' => 'setActive',
        'name' => 'setName',
        'email' => 'setEmail',
        'description' => 'setDescription',
        'sender_info' => 'setSenderInfo',
        'department' => 'setDepartment',
        'smtp' => 'setSmtp',
        'imap' => 'setImap',
        '_created_at' => 'setCreatedAt',
        '_updated_at' => 'setUpdatedAt',
        '_created_by' => 'setCreatedBy',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'active' => 'getActive',
        'name' => 'getName',
        'email' => 'getEmail',
        'description' => 'getDescription',
        'sender_info' => 'getSenderInfo',
        'department' => 'getDepartment',
        'smtp' => 'getSmtp',
        'imap' => 'getImap',
        '_created_at' => 'getCreatedAt',
        '_updated_at' => 'getUpdatedAt',
        '_created_by' => 'getCreatedBy',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('sender_info', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('smtp', $data ?? [], null);
        $this->setIfExists('imap', $data ?? [], null);
        $this->setIfExists('_created_at', $data ?? [], null);
        $this->setIfExists('_updated_at', $data ?? [], null);
        $this->setIfExists('_created_by', $data ?? [], null);
        $this->setIfExists('success', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sender_info
     *
     * @return string|null
     */
    public function getSenderInfo()
    {
        return $this->container['sender_info'];
    }

    /**
     * Sets sender_info
     *
     * @param string|null $sender_info sender_info
     *
     * @return self
     */
    public function setSenderInfo($sender_info)
    {
        if (is_null($sender_info)) {
            throw new \InvalidArgumentException('non-nullable sender_info cannot be null');
        }
        $this->container['sender_info'] = $sender_info;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp|null $smtp smtp
     *
     * @return self
     */
    public function setSmtp($smtp)
    {
        if (is_null($smtp)) {
            throw new \InvalidArgumentException('non-nullable smtp cannot be null');
        }
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets imap
     *
     * @return \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp|null
     */
    public function getImap()
    {
        return $this->container['imap'];
    }

    /**
     * Sets imap
     *
     * @param \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerSmtp|null $imap imap
     *
     * @return self
     */
    public function setImap($imap)
    {
        if (is_null($imap)) {
            throw new \InvalidArgumentException('non-nullable imap cannot be null');
        }
        $this->container['imap'] = $imap;

        return $this;
    }

    /**
     * Gets _created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['_created_at'];
    }

    /**
     * Sets _created_at
     *
     * @param string|null $_created_at _created_at
     *
     * @return self
     */
    public function setCreatedAt($_created_at)
    {
        if (is_null($_created_at)) {
            throw new \InvalidArgumentException('non-nullable _created_at cannot be null');
        }
        $this->container['_created_at'] = $_created_at;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string|null $_updated_at _updated_at
     *
     * @return self
     */
    public function setUpdatedAt($_updated_at)
    {
        if (is_null($_updated_at)) {
            throw new \InvalidArgumentException('non-nullable _updated_at cannot be null');
        }
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets _created_by
     *
     * @return \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['_created_by'];
    }

    /**
     * Sets _created_by
     *
     * @param \RocketChatMiscellaneousApi\Model\GetApiV1EmailInboxList200ResponseEmailInboxesInnerCreatedBy|null $_created_by _created_by
     *
     * @return self
     */
    public function setCreatedBy($_created_by)
    {
        if (is_null($_created_by)) {
            throw new \InvalidArgumentException('non-nullable _created_by cannot be null');
        }
        $this->container['_created_by'] = $_created_by;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


