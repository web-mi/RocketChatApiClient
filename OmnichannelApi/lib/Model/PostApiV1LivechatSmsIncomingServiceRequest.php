<?php
/**
 * PostApiV1LivechatSmsIncomingServiceRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatOmnichannelApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatOmnichannelApi\Model;

use \ArrayAccess;
use \RocketChatOmnichannelApi\ObjectSerializer;

/**
 * PostApiV1LivechatSmsIncomingServiceRequest Class Doc Comment
 *
 * @category Class
 * @package  RocketChatOmnichannelApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1LivechatSmsIncomingServiceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_livechat_sms_incoming_service_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from' => 'string',
        'to' => 'string',
        'body' => 'string',
        'to_country' => 'string',
        'to_state' => 'string',
        'to_city' => 'string',
        'to_zip' => 'string',
        'from_country' => 'string',
        'from_state' => 'string',
        'from_city' => 'string',
        'from_zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from' => null,
        'to' => null,
        'body' => null,
        'to_country' => null,
        'to_state' => null,
        'to_city' => null,
        'to_zip' => null,
        'from_country' => null,
        'from_state' => null,
        'from_city' => null,
        'from_zip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from' => false,
        'to' => false,
        'body' => false,
        'to_country' => false,
        'to_state' => false,
        'to_city' => false,
        'to_zip' => false,
        'from_country' => false,
        'from_state' => false,
        'from_city' => false,
        'from_zip' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'From',
        'to' => 'To',
        'body' => 'Body',
        'to_country' => 'ToCountry',
        'to_state' => 'ToState',
        'to_city' => 'ToCity',
        'to_zip' => 'ToZip',
        'from_country' => 'FromCountry',
        'from_state' => 'FromState',
        'from_city' => 'FromCity',
        'from_zip' => 'FromZip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'body' => 'setBody',
        'to_country' => 'setToCountry',
        'to_state' => 'setToState',
        'to_city' => 'setToCity',
        'to_zip' => 'setToZip',
        'from_country' => 'setFromCountry',
        'from_state' => 'setFromState',
        'from_city' => 'setFromCity',
        'from_zip' => 'setFromZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'body' => 'getBody',
        'to_country' => 'getToCountry',
        'to_state' => 'getToState',
        'to_city' => 'getToCity',
        'to_zip' => 'getToZip',
        'from_country' => 'getFromCountry',
        'from_state' => 'getFromState',
        'from_city' => 'getFromCity',
        'from_zip' => 'getFromZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('to_country', $data ?? [], null);
        $this->setIfExists('to_state', $data ?? [], null);
        $this->setIfExists('to_city', $data ?? [], null);
        $this->setIfExists('to_zip', $data ?? [], null);
        $this->setIfExists('from_country', $data ?? [], null);
        $this->setIfExists('from_state', $data ?? [], null);
        $this->setIfExists('from_city', $data ?? [], null);
        $this->setIfExists('from_zip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets to_country
     *
     * @return string|null
     */
    public function getToCountry()
    {
        return $this->container['to_country'];
    }

    /**
     * Sets to_country
     *
     * @param string|null $to_country to_country
     *
     * @return self
     */
    public function setToCountry($to_country)
    {
        if (is_null($to_country)) {
            throw new \InvalidArgumentException('non-nullable to_country cannot be null');
        }
        $this->container['to_country'] = $to_country;

        return $this;
    }

    /**
     * Gets to_state
     *
     * @return string|null
     */
    public function getToState()
    {
        return $this->container['to_state'];
    }

    /**
     * Sets to_state
     *
     * @param string|null $to_state to_state
     *
     * @return self
     */
    public function setToState($to_state)
    {
        if (is_null($to_state)) {
            throw new \InvalidArgumentException('non-nullable to_state cannot be null');
        }
        $this->container['to_state'] = $to_state;

        return $this;
    }

    /**
     * Gets to_city
     *
     * @return string|null
     */
    public function getToCity()
    {
        return $this->container['to_city'];
    }

    /**
     * Sets to_city
     *
     * @param string|null $to_city to_city
     *
     * @return self
     */
    public function setToCity($to_city)
    {
        if (is_null($to_city)) {
            throw new \InvalidArgumentException('non-nullable to_city cannot be null');
        }
        $this->container['to_city'] = $to_city;

        return $this;
    }

    /**
     * Gets to_zip
     *
     * @return string|null
     */
    public function getToZip()
    {
        return $this->container['to_zip'];
    }

    /**
     * Sets to_zip
     *
     * @param string|null $to_zip to_zip
     *
     * @return self
     */
    public function setToZip($to_zip)
    {
        if (is_null($to_zip)) {
            throw new \InvalidArgumentException('non-nullable to_zip cannot be null');
        }
        $this->container['to_zip'] = $to_zip;

        return $this;
    }

    /**
     * Gets from_country
     *
     * @return string|null
     */
    public function getFromCountry()
    {
        return $this->container['from_country'];
    }

    /**
     * Sets from_country
     *
     * @param string|null $from_country from_country
     *
     * @return self
     */
    public function setFromCountry($from_country)
    {
        if (is_null($from_country)) {
            throw new \InvalidArgumentException('non-nullable from_country cannot be null');
        }
        $this->container['from_country'] = $from_country;

        return $this;
    }

    /**
     * Gets from_state
     *
     * @return string|null
     */
    public function getFromState()
    {
        return $this->container['from_state'];
    }

    /**
     * Sets from_state
     *
     * @param string|null $from_state from_state
     *
     * @return self
     */
    public function setFromState($from_state)
    {
        if (is_null($from_state)) {
            throw new \InvalidArgumentException('non-nullable from_state cannot be null');
        }
        $this->container['from_state'] = $from_state;

        return $this;
    }

    /**
     * Gets from_city
     *
     * @return string|null
     */
    public function getFromCity()
    {
        return $this->container['from_city'];
    }

    /**
     * Sets from_city
     *
     * @param string|null $from_city from_city
     *
     * @return self
     */
    public function setFromCity($from_city)
    {
        if (is_null($from_city)) {
            throw new \InvalidArgumentException('non-nullable from_city cannot be null');
        }
        $this->container['from_city'] = $from_city;

        return $this;
    }

    /**
     * Gets from_zip
     *
     * @return string|null
     */
    public function getFromZip()
    {
        return $this->container['from_zip'];
    }

    /**
     * Sets from_zip
     *
     * @param string|null $from_zip from_zip
     *
     * @return self
     */
    public function setFromZip($from_zip)
    {
        if (is_null($from_zip)) {
            throw new \InvalidArgumentException('non-nullable from_zip cannot be null');
        }
        $this->container['from_zip'] = $from_zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


