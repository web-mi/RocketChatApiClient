<?php
/**
 * PostApiV1LivechatUpload200ResponseAttachmentsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\OmnichannelApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\OmnichannelApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\OmnichannelApi\ObjectSerializer;

/**
 * PostApiV1LivechatUpload200ResponseAttachmentsInner Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\OmnichannelApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1LivechatUpload200ResponseAttachmentsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_livechat_upload_200_response_attachments_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ts' => 'string',
        'title' => 'string',
        'title_link' => 'string',
        'title_link_download' => 'bool',
        'image_dimensions' => '\WebMI\RocketChatApiClient\OmnichannelApi\Model\PostApiV1LivechatUpload200ResponseAttachmentsInnerImageDimensions',
        'image_preview' => 'string',
        'image_url' => 'string',
        'image_type' => 'string',
        'image_size' => 'int',
        'type' => 'string',
        'description' => 'string',
        'description_md' => '\WebMI\RocketChatApiClient\OmnichannelApi\Model\GetApiV1LivechatRoom200ResponseRoomLastMessageMdInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ts' => null,
        'title' => null,
        'title_link' => null,
        'title_link_download' => null,
        'image_dimensions' => null,
        'image_preview' => null,
        'image_url' => null,
        'image_type' => null,
        'image_size' => null,
        'type' => null,
        'description' => null,
        'description_md' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ts' => false,
        'title' => false,
        'title_link' => false,
        'title_link_download' => false,
        'image_dimensions' => false,
        'image_preview' => false,
        'image_url' => false,
        'image_type' => false,
        'image_size' => false,
        'type' => false,
        'description' => false,
        'description_md' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ts' => 'ts',
        'title' => 'title',
        'title_link' => 'title_link',
        'title_link_download' => 'title_link_download',
        'image_dimensions' => 'image_dimensions',
        'image_preview' => 'image_preview',
        'image_url' => 'image_url',
        'image_type' => 'image_type',
        'image_size' => 'image_size',
        'type' => 'type',
        'description' => 'description',
        'description_md' => 'descriptionMd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ts' => 'set_ts',
        'title' => 'set_title',
        'title_link' => 'set_title_link',
        'title_link_download' => 'set_title_link_download',
        'image_dimensions' => 'set_image_dimensions',
        'image_preview' => 'set_image_preview',
        'image_url' => 'set_image_url',
        'image_type' => 'set_image_type',
        'image_size' => 'set_image_size',
        'type' => 'set_type',
        'description' => 'set_description',
        'description_md' => 'set_description_md'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ts' => 'get_ts',
        'title' => 'get_title',
        'title_link' => 'get_title_link',
        'title_link_download' => 'get_title_link_download',
        'image_dimensions' => 'get_image_dimensions',
        'image_preview' => 'get_image_preview',
        'image_url' => 'get_image_url',
        'image_type' => 'get_image_type',
        'image_size' => 'get_image_size',
        'type' => 'get_type',
        'description' => 'get_description',
        'description_md' => 'get_description_md'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('title_link', $data ?? [], null);
        $this->setIfExists('title_link_download', $data ?? [], null);
        $this->setIfExists('image_dimensions', $data ?? [], null);
        $this->setIfExists('image_preview', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('image_type', $data ?? [], null);
        $this->setIfExists('image_size', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_md', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ts
     *
     * @return string|null
     */
    public function get_ts()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string|null $ts ts
     *
     * @return self
     */
    public function set_ts($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function get_title()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function set_title($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_link
     *
     * @return string|null
     */
    public function get_title_link()
    {
        return $this->container['title_link'];
    }

    /**
     * Sets title_link
     *
     * @param string|null $title_link title_link
     *
     * @return self
     */
    public function set_title_link($title_link)
    {
        if (is_null($title_link)) {
            throw new \InvalidArgumentException('non-nullable title_link cannot be null');
        }
        $this->container['title_link'] = $title_link;

        return $this;
    }

    /**
     * Gets title_link_download
     *
     * @return bool|null
     */
    public function get_title_link_download()
    {
        return $this->container['title_link_download'];
    }

    /**
     * Sets title_link_download
     *
     * @param bool|null $title_link_download title_link_download
     *
     * @return self
     */
    public function set_title_link_download($title_link_download)
    {
        if (is_null($title_link_download)) {
            throw new \InvalidArgumentException('non-nullable title_link_download cannot be null');
        }
        $this->container['title_link_download'] = $title_link_download;

        return $this;
    }

    /**
     * Gets image_dimensions
     *
     * @return \WebMI\RocketChatApiClient\OmnichannelApi\Model\PostApiV1LivechatUpload200ResponseAttachmentsInnerImageDimensions|null
     */
    public function get_image_dimensions()
    {
        return $this->container['image_dimensions'];
    }

    /**
     * Sets image_dimensions
     *
     * @param \WebMI\RocketChatApiClient\OmnichannelApi\Model\PostApiV1LivechatUpload200ResponseAttachmentsInnerImageDimensions|null $image_dimensions image_dimensions
     *
     * @return self
     */
    public function set_image_dimensions($image_dimensions)
    {
        if (is_null($image_dimensions)) {
            throw new \InvalidArgumentException('non-nullable image_dimensions cannot be null');
        }
        $this->container['image_dimensions'] = $image_dimensions;

        return $this;
    }

    /**
     * Gets image_preview
     *
     * @return string|null
     */
    public function get_image_preview()
    {
        return $this->container['image_preview'];
    }

    /**
     * Sets image_preview
     *
     * @param string|null $image_preview image_preview
     *
     * @return self
     */
    public function set_image_preview($image_preview)
    {
        if (is_null($image_preview)) {
            throw new \InvalidArgumentException('non-nullable image_preview cannot be null');
        }
        $this->container['image_preview'] = $image_preview;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function get_image_url()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return self
     */
    public function set_image_url($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string|null
     */
    public function get_image_type()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string|null $image_type image_type
     *
     * @return self
     */
    public function set_image_type($image_type)
    {
        if (is_null($image_type)) {
            throw new \InvalidArgumentException('non-nullable image_type cannot be null');
        }
        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets image_size
     *
     * @return int|null
     */
    public function get_image_size()
    {
        return $this->container['image_size'];
    }

    /**
     * Sets image_size
     *
     * @param int|null $image_size image_size
     *
     * @return self
     */
    public function set_image_size($image_size)
    {
        if (is_null($image_size)) {
            throw new \InvalidArgumentException('non-nullable image_size cannot be null');
        }
        $this->container['image_size'] = $image_size;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function get_description()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function set_description($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_md
     *
     * @return \WebMI\RocketChatApiClient\OmnichannelApi\Model\GetApiV1LivechatRoom200ResponseRoomLastMessageMdInner[]|null
     */
    public function get_description_md()
    {
        return $this->container['description_md'];
    }

    /**
     * Sets description_md
     *
     * @param \WebMI\RocketChatApiClient\OmnichannelApi\Model\GetApiV1LivechatRoom200ResponseRoomLastMessageMdInner[]|null $description_md description_md
     *
     * @return self
     */
    public function set_description_md($description_md)
    {
        if (is_null($description_md)) {
            throw new \InvalidArgumentException('non-nullable description_md cannot be null');
        }
        $this->container['description_md'] = $description_md;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


