<?php
/**
 * PostApiV1ChatSendMessageRequestMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\CustomApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Custom
 *
 * These are some extra routes for rocket.chat because open api files from rocket.chat has some missing stuff
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\CustomApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\CustomApi\ObjectSerializer;

/**
 * PostApiV1ChatSendMessageRequestMessage Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\CustomApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1ChatSendMessageRequestMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_chat_sendMessage_request_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        't' => 'string',
        'rid' => 'string',
        'msg' => 'string',
        'alias' => 'string',
        'emoji' => 'string',
        'avatar' => 'string',
        'attachments' => '\WebMI\RocketChatApiClient\CustomApi\Model\PostApiV1ChatSendMessageRequestMessageAttachmentsInner[]',
        'tmid' => 'string',
        'tshow' => 'string',
        'blocks' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        't' => null,
        'rid' => null,
        'msg' => null,
        'alias' => null,
        'emoji' => null,
        'avatar' => null,
        'attachments' => null,
        'tmid' => null,
        'tshow' => null,
        'blocks' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        't' => false,
        'rid' => false,
        'msg' => false,
        'alias' => false,
        'emoji' => false,
        'avatar' => false,
        'attachments' => false,
        'tmid' => false,
        'tshow' => false,
        'blocks' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        't' => 't',
        'rid' => 'rid',
        'msg' => 'msg',
        'alias' => 'alias',
        'emoji' => 'emoji',
        'avatar' => 'avatar',
        'attachments' => 'attachments',
        'tmid' => 'tmid',
        'tshow' => 'tshow',
        'blocks' => 'blocks',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        't' => 'set_t',
        'rid' => 'set_rid',
        'msg' => 'set_msg',
        'alias' => 'set_alias',
        'emoji' => 'set_emoji',
        'avatar' => 'set_avatar',
        'attachments' => 'set_attachments',
        'tmid' => 'set_tmid',
        'tshow' => 'set_tshow',
        'blocks' => 'set_blocks',
        'custom_fields' => 'set_custom_fields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        't' => 'get_t',
        'rid' => 'get_rid',
        'msg' => 'get_msg',
        'alias' => 'get_alias',
        'emoji' => 'get_emoji',
        'avatar' => 'get_avatar',
        'attachments' => 'get_attachments',
        'tmid' => 'get_tmid',
        'tshow' => 'get_tshow',
        'blocks' => 'get_blocks',
        'custom_fields' => 'get_custom_fields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('t', $data ?? [], null);
        $this->setIfExists('rid', $data ?? [], null);
        $this->setIfExists('msg', $data ?? [], null);
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('emoji', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('tmid', $data ?? [], null);
        $this->setIfExists('tshow', $data ?? [], null);
        $this->setIfExists('blocks', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rid'] === null) {
            $invalidProperties[] = "'rid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets t
     *
     * @return string|null
     */
    public function get_t()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string|null $t The message type e.g. e2e
     *
     * @return self
     */
    public function set_t($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }

    /**
     * Gets rid
     *
     * @return string
     */
    public function get_rid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid The room ID where the message is to be sent.
     *
     * @return self
     */
    public function set_rid($rid)
    {
        if (is_null($rid)) {
            throw new \InvalidArgumentException('non-nullable rid cannot be null');
        }
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string|null
     */
    public function get_msg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string|null $msg The message text to send, it is optional because of attachments.
     *
     * @return self
     */
    public function set_msg($msg)
    {
        if (is_null($msg)) {
            throw new \InvalidArgumentException('non-nullable msg cannot be null');
        }
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function get_alias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias This will cause the message's name to appear as the given alias, but your username will still be displayed. Requires the `impersonate-other-user` permission
     *
     * @return self
     */
    public function set_alias($alias)
    {
        if (is_null($alias)) {
            throw new \InvalidArgumentException('non-nullable alias cannot be null');
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string|null
     */
    public function get_emoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string|null $emoji If provided, the avatar will be displayed as the emoji.
     *
     * @return self
     */
    public function set_emoji($emoji)
    {
        if (is_null($emoji)) {
            throw new \InvalidArgumentException('non-nullable emoji cannot be null');
        }
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function get_avatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar If provided, the avatar will be displayed as the provided image url. Requires the  `impersonate-other-user` permission.
     *
     * @return self
     */
    public function set_avatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \WebMI\RocketChatApiClient\CustomApi\Model\PostApiV1ChatSendMessageRequestMessageAttachmentsInner[]|null
     */
    public function get_attachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \WebMI\RocketChatApiClient\CustomApi\Model\PostApiV1ChatSendMessageRequestMessageAttachmentsInner[]|null $attachments The attachment is an array of objects with any of the following properties. One attachment can have many sections, including: * General * Author Information * Title Information * Image * Audio * Video * Table/Fields
     *
     * @return self
     */
    public function set_attachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tmid
     *
     * @return string|null
     */
    public function get_tmid()
    {
        return $this->container['tmid'];
    }

    /**
     * Sets tmid
     *
     * @param string|null $tmid The message ID to create a thread.
     *
     * @return self
     */
    public function set_tmid($tmid)
    {
        if (is_null($tmid)) {
            throw new \InvalidArgumentException('non-nullable tmid cannot be null');
        }
        $this->container['tmid'] = $tmid;

        return $this;
    }

    /**
     * Gets tshow
     *
     * @return string|null
     */
    public function get_tshow()
    {
        return $this->container['tshow'];
    }

    /**
     * Sets tshow
     *
     * @param string|null $tshow Used when replying in a thread. Message will be sent in channel also if value is true
     *
     * @return self
     */
    public function set_tshow($tshow)
    {
        if (is_null($tshow)) {
            throw new \InvalidArgumentException('non-nullable tshow cannot be null');
        }
        $this->container['tshow'] = $tshow;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return object|null
     */
    public function get_blocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param object|null $blocks A message block is an array of objects with any of the following properties. Blocks can have many sections: - type - text - fields
     *
     * @return self
     */
    public function set_blocks($blocks)
    {
        if (is_null($blocks)) {
            throw new \InvalidArgumentException('non-nullable blocks cannot be null');
        }
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function get_custom_fields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the <a href='https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message' target='_blank'>Message</a> settings for further information.
     *
     * @return self
     */
    public function set_custom_fields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


