<?php
/**
 * PostApiApps200ResponseImplemented
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatMarketplaceAppsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Marketplace Apps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatMarketplaceAppsApi\Model;

use \ArrayAccess;
use \RocketChatMarketplaceAppsApi\ObjectSerializer;

/**
 * PostApiApps200ResponseImplemented Class Doc Comment
 *
 * @category Class
 * @package  RocketChatMarketplaceAppsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiApps200ResponseImplemented implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_apps_200_response_implemented';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'i_pre_message_sent_prevent' => 'bool',
        'i_pre_message_sent_extend' => 'bool',
        'i_pre_message_sent_modify' => 'bool',
        'i_post_message_sent' => 'bool',
        'i_pre_message_delete_prevent' => 'bool',
        'i_post_message_deleted' => 'bool',
        'i_pre_message_updated_prevent' => 'bool',
        'i_pre_message_updated_extend' => 'bool',
        'i_pre_message_updated_modify' => 'bool',
        'i_post_message_updated' => 'bool',
        'i_post_message_reacted' => 'bool',
        'i_post_message_followed' => 'bool',
        'i_post_message_pinned' => 'bool',
        'i_post_message_starred' => 'bool',
        'i_post_message_reported' => 'bool',
        'i_pre_room_create_prevent' => 'bool',
        'i_pre_room_create_extend' => 'bool',
        'i_pre_room_create_modify' => 'bool',
        'i_post_room_create' => 'bool',
        'i_pre_room_delete_prevent' => 'bool',
        'i_post_room_deleted' => 'bool',
        'i_pre_room_user_joined' => 'bool',
        'i_post_room_user_joined' => 'bool',
        'i_pre_room_user_leave' => 'bool',
        'i_post_room_user_leave' => 'bool',
        'i_post_external_component_opened' => 'bool',
        'i_post_external_component_closed' => 'bool',
        'iui_kit_interaction_handler' => 'bool',
        'iui_kit_livechat_interaction_handler' => 'bool',
        'i_post_livechat_room_started' => 'bool',
        'i_post_livechat_room_closed' => 'bool',
        'i_livechat_room_closed_handler' => 'bool',
        'i_post_livechat_agent_assigned' => 'bool',
        'i_post_livechat_agent_unassigned' => 'bool',
        'i_post_livechat_room_transferred' => 'bool',
        'i_post_livechat_guest_saved' => 'bool',
        'i_post_livechat_room_saved' => 'bool',
        'i_pre_file_upload' => 'bool',
        'i_pre_email_sent' => 'bool',
        'i_post_user_created' => 'bool',
        'i_post_user_updated' => 'bool',
        'i_post_user_deleted' => 'bool',
        'i_post_user_logged_in' => 'bool',
        'i_post_user_logged_out' => 'bool',
        'i_post_user_status_changed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'i_pre_message_sent_prevent' => null,
        'i_pre_message_sent_extend' => null,
        'i_pre_message_sent_modify' => null,
        'i_post_message_sent' => null,
        'i_pre_message_delete_prevent' => null,
        'i_post_message_deleted' => null,
        'i_pre_message_updated_prevent' => null,
        'i_pre_message_updated_extend' => null,
        'i_pre_message_updated_modify' => null,
        'i_post_message_updated' => null,
        'i_post_message_reacted' => null,
        'i_post_message_followed' => null,
        'i_post_message_pinned' => null,
        'i_post_message_starred' => null,
        'i_post_message_reported' => null,
        'i_pre_room_create_prevent' => null,
        'i_pre_room_create_extend' => null,
        'i_pre_room_create_modify' => null,
        'i_post_room_create' => null,
        'i_pre_room_delete_prevent' => null,
        'i_post_room_deleted' => null,
        'i_pre_room_user_joined' => null,
        'i_post_room_user_joined' => null,
        'i_pre_room_user_leave' => null,
        'i_post_room_user_leave' => null,
        'i_post_external_component_opened' => null,
        'i_post_external_component_closed' => null,
        'iui_kit_interaction_handler' => null,
        'iui_kit_livechat_interaction_handler' => null,
        'i_post_livechat_room_started' => null,
        'i_post_livechat_room_closed' => null,
        'i_livechat_room_closed_handler' => null,
        'i_post_livechat_agent_assigned' => null,
        'i_post_livechat_agent_unassigned' => null,
        'i_post_livechat_room_transferred' => null,
        'i_post_livechat_guest_saved' => null,
        'i_post_livechat_room_saved' => null,
        'i_pre_file_upload' => null,
        'i_pre_email_sent' => null,
        'i_post_user_created' => null,
        'i_post_user_updated' => null,
        'i_post_user_deleted' => null,
        'i_post_user_logged_in' => null,
        'i_post_user_logged_out' => null,
        'i_post_user_status_changed' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'i_pre_message_sent_prevent' => false,
        'i_pre_message_sent_extend' => false,
        'i_pre_message_sent_modify' => false,
        'i_post_message_sent' => false,
        'i_pre_message_delete_prevent' => false,
        'i_post_message_deleted' => false,
        'i_pre_message_updated_prevent' => false,
        'i_pre_message_updated_extend' => false,
        'i_pre_message_updated_modify' => false,
        'i_post_message_updated' => false,
        'i_post_message_reacted' => false,
        'i_post_message_followed' => false,
        'i_post_message_pinned' => false,
        'i_post_message_starred' => false,
        'i_post_message_reported' => false,
        'i_pre_room_create_prevent' => false,
        'i_pre_room_create_extend' => false,
        'i_pre_room_create_modify' => false,
        'i_post_room_create' => false,
        'i_pre_room_delete_prevent' => false,
        'i_post_room_deleted' => false,
        'i_pre_room_user_joined' => false,
        'i_post_room_user_joined' => false,
        'i_pre_room_user_leave' => false,
        'i_post_room_user_leave' => false,
        'i_post_external_component_opened' => false,
        'i_post_external_component_closed' => false,
        'iui_kit_interaction_handler' => false,
        'iui_kit_livechat_interaction_handler' => false,
        'i_post_livechat_room_started' => false,
        'i_post_livechat_room_closed' => false,
        'i_livechat_room_closed_handler' => false,
        'i_post_livechat_agent_assigned' => false,
        'i_post_livechat_agent_unassigned' => false,
        'i_post_livechat_room_transferred' => false,
        'i_post_livechat_guest_saved' => false,
        'i_post_livechat_room_saved' => false,
        'i_pre_file_upload' => false,
        'i_pre_email_sent' => false,
        'i_post_user_created' => false,
        'i_post_user_updated' => false,
        'i_post_user_deleted' => false,
        'i_post_user_logged_in' => false,
        'i_post_user_logged_out' => false,
        'i_post_user_status_changed' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'i_pre_message_sent_prevent' => 'IPreMessageSentPrevent',
        'i_pre_message_sent_extend' => 'IPreMessageSentExtend',
        'i_pre_message_sent_modify' => 'IPreMessageSentModify',
        'i_post_message_sent' => 'IPostMessageSent',
        'i_pre_message_delete_prevent' => 'IPreMessageDeletePrevent',
        'i_post_message_deleted' => 'IPostMessageDeleted',
        'i_pre_message_updated_prevent' => 'IPreMessageUpdatedPrevent',
        'i_pre_message_updated_extend' => 'IPreMessageUpdatedExtend',
        'i_pre_message_updated_modify' => 'IPreMessageUpdatedModify',
        'i_post_message_updated' => 'IPostMessageUpdated',
        'i_post_message_reacted' => 'IPostMessageReacted',
        'i_post_message_followed' => 'IPostMessageFollowed',
        'i_post_message_pinned' => 'IPostMessagePinned',
        'i_post_message_starred' => 'IPostMessageStarred',
        'i_post_message_reported' => 'IPostMessageReported',
        'i_pre_room_create_prevent' => 'IPreRoomCreatePrevent',
        'i_pre_room_create_extend' => 'IPreRoomCreateExtend',
        'i_pre_room_create_modify' => 'IPreRoomCreateModify',
        'i_post_room_create' => 'IPostRoomCreate',
        'i_pre_room_delete_prevent' => 'IPreRoomDeletePrevent',
        'i_post_room_deleted' => 'IPostRoomDeleted',
        'i_pre_room_user_joined' => 'IPreRoomUserJoined',
        'i_post_room_user_joined' => 'IPostRoomUserJoined',
        'i_pre_room_user_leave' => 'IPreRoomUserLeave',
        'i_post_room_user_leave' => 'IPostRoomUserLeave',
        'i_post_external_component_opened' => 'IPostExternalComponentOpened',
        'i_post_external_component_closed' => 'IPostExternalComponentClosed',
        'iui_kit_interaction_handler' => 'IUIKitInteractionHandler',
        'iui_kit_livechat_interaction_handler' => 'IUIKitLivechatInteractionHandler',
        'i_post_livechat_room_started' => 'IPostLivechatRoomStarted',
        'i_post_livechat_room_closed' => 'IPostLivechatRoomClosed',
        'i_livechat_room_closed_handler' => 'ILivechatRoomClosedHandler',
        'i_post_livechat_agent_assigned' => 'IPostLivechatAgentAssigned',
        'i_post_livechat_agent_unassigned' => 'IPostLivechatAgentUnassigned',
        'i_post_livechat_room_transferred' => 'IPostLivechatRoomTransferred',
        'i_post_livechat_guest_saved' => 'IPostLivechatGuestSaved',
        'i_post_livechat_room_saved' => 'IPostLivechatRoomSaved',
        'i_pre_file_upload' => 'IPreFileUpload',
        'i_pre_email_sent' => 'IPreEmailSent',
        'i_post_user_created' => 'IPostUserCreated',
        'i_post_user_updated' => 'IPostUserUpdated',
        'i_post_user_deleted' => 'IPostUserDeleted',
        'i_post_user_logged_in' => 'IPostUserLoggedIn',
        'i_post_user_logged_out' => 'IPostUserLoggedOut',
        'i_post_user_status_changed' => 'IPostUserStatusChanged'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'i_pre_message_sent_prevent' => 'setIPreMessageSentPrevent',
        'i_pre_message_sent_extend' => 'setIPreMessageSentExtend',
        'i_pre_message_sent_modify' => 'setIPreMessageSentModify',
        'i_post_message_sent' => 'setIPostMessageSent',
        'i_pre_message_delete_prevent' => 'setIPreMessageDeletePrevent',
        'i_post_message_deleted' => 'setIPostMessageDeleted',
        'i_pre_message_updated_prevent' => 'setIPreMessageUpdatedPrevent',
        'i_pre_message_updated_extend' => 'setIPreMessageUpdatedExtend',
        'i_pre_message_updated_modify' => 'setIPreMessageUpdatedModify',
        'i_post_message_updated' => 'setIPostMessageUpdated',
        'i_post_message_reacted' => 'setIPostMessageReacted',
        'i_post_message_followed' => 'setIPostMessageFollowed',
        'i_post_message_pinned' => 'setIPostMessagePinned',
        'i_post_message_starred' => 'setIPostMessageStarred',
        'i_post_message_reported' => 'setIPostMessageReported',
        'i_pre_room_create_prevent' => 'setIPreRoomCreatePrevent',
        'i_pre_room_create_extend' => 'setIPreRoomCreateExtend',
        'i_pre_room_create_modify' => 'setIPreRoomCreateModify',
        'i_post_room_create' => 'setIPostRoomCreate',
        'i_pre_room_delete_prevent' => 'setIPreRoomDeletePrevent',
        'i_post_room_deleted' => 'setIPostRoomDeleted',
        'i_pre_room_user_joined' => 'setIPreRoomUserJoined',
        'i_post_room_user_joined' => 'setIPostRoomUserJoined',
        'i_pre_room_user_leave' => 'setIPreRoomUserLeave',
        'i_post_room_user_leave' => 'setIPostRoomUserLeave',
        'i_post_external_component_opened' => 'setIPostExternalComponentOpened',
        'i_post_external_component_closed' => 'setIPostExternalComponentClosed',
        'iui_kit_interaction_handler' => 'setIuiKitInteractionHandler',
        'iui_kit_livechat_interaction_handler' => 'setIuiKitLivechatInteractionHandler',
        'i_post_livechat_room_started' => 'setIPostLivechatRoomStarted',
        'i_post_livechat_room_closed' => 'setIPostLivechatRoomClosed',
        'i_livechat_room_closed_handler' => 'setILivechatRoomClosedHandler',
        'i_post_livechat_agent_assigned' => 'setIPostLivechatAgentAssigned',
        'i_post_livechat_agent_unassigned' => 'setIPostLivechatAgentUnassigned',
        'i_post_livechat_room_transferred' => 'setIPostLivechatRoomTransferred',
        'i_post_livechat_guest_saved' => 'setIPostLivechatGuestSaved',
        'i_post_livechat_room_saved' => 'setIPostLivechatRoomSaved',
        'i_pre_file_upload' => 'setIPreFileUpload',
        'i_pre_email_sent' => 'setIPreEmailSent',
        'i_post_user_created' => 'setIPostUserCreated',
        'i_post_user_updated' => 'setIPostUserUpdated',
        'i_post_user_deleted' => 'setIPostUserDeleted',
        'i_post_user_logged_in' => 'setIPostUserLoggedIn',
        'i_post_user_logged_out' => 'setIPostUserLoggedOut',
        'i_post_user_status_changed' => 'setIPostUserStatusChanged'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'i_pre_message_sent_prevent' => 'getIPreMessageSentPrevent',
        'i_pre_message_sent_extend' => 'getIPreMessageSentExtend',
        'i_pre_message_sent_modify' => 'getIPreMessageSentModify',
        'i_post_message_sent' => 'getIPostMessageSent',
        'i_pre_message_delete_prevent' => 'getIPreMessageDeletePrevent',
        'i_post_message_deleted' => 'getIPostMessageDeleted',
        'i_pre_message_updated_prevent' => 'getIPreMessageUpdatedPrevent',
        'i_pre_message_updated_extend' => 'getIPreMessageUpdatedExtend',
        'i_pre_message_updated_modify' => 'getIPreMessageUpdatedModify',
        'i_post_message_updated' => 'getIPostMessageUpdated',
        'i_post_message_reacted' => 'getIPostMessageReacted',
        'i_post_message_followed' => 'getIPostMessageFollowed',
        'i_post_message_pinned' => 'getIPostMessagePinned',
        'i_post_message_starred' => 'getIPostMessageStarred',
        'i_post_message_reported' => 'getIPostMessageReported',
        'i_pre_room_create_prevent' => 'getIPreRoomCreatePrevent',
        'i_pre_room_create_extend' => 'getIPreRoomCreateExtend',
        'i_pre_room_create_modify' => 'getIPreRoomCreateModify',
        'i_post_room_create' => 'getIPostRoomCreate',
        'i_pre_room_delete_prevent' => 'getIPreRoomDeletePrevent',
        'i_post_room_deleted' => 'getIPostRoomDeleted',
        'i_pre_room_user_joined' => 'getIPreRoomUserJoined',
        'i_post_room_user_joined' => 'getIPostRoomUserJoined',
        'i_pre_room_user_leave' => 'getIPreRoomUserLeave',
        'i_post_room_user_leave' => 'getIPostRoomUserLeave',
        'i_post_external_component_opened' => 'getIPostExternalComponentOpened',
        'i_post_external_component_closed' => 'getIPostExternalComponentClosed',
        'iui_kit_interaction_handler' => 'getIuiKitInteractionHandler',
        'iui_kit_livechat_interaction_handler' => 'getIuiKitLivechatInteractionHandler',
        'i_post_livechat_room_started' => 'getIPostLivechatRoomStarted',
        'i_post_livechat_room_closed' => 'getIPostLivechatRoomClosed',
        'i_livechat_room_closed_handler' => 'getILivechatRoomClosedHandler',
        'i_post_livechat_agent_assigned' => 'getIPostLivechatAgentAssigned',
        'i_post_livechat_agent_unassigned' => 'getIPostLivechatAgentUnassigned',
        'i_post_livechat_room_transferred' => 'getIPostLivechatRoomTransferred',
        'i_post_livechat_guest_saved' => 'getIPostLivechatGuestSaved',
        'i_post_livechat_room_saved' => 'getIPostLivechatRoomSaved',
        'i_pre_file_upload' => 'getIPreFileUpload',
        'i_pre_email_sent' => 'getIPreEmailSent',
        'i_post_user_created' => 'getIPostUserCreated',
        'i_post_user_updated' => 'getIPostUserUpdated',
        'i_post_user_deleted' => 'getIPostUserDeleted',
        'i_post_user_logged_in' => 'getIPostUserLoggedIn',
        'i_post_user_logged_out' => 'getIPostUserLoggedOut',
        'i_post_user_status_changed' => 'getIPostUserStatusChanged'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('i_pre_message_sent_prevent', $data ?? [], null);
        $this->setIfExists('i_pre_message_sent_extend', $data ?? [], null);
        $this->setIfExists('i_pre_message_sent_modify', $data ?? [], null);
        $this->setIfExists('i_post_message_sent', $data ?? [], null);
        $this->setIfExists('i_pre_message_delete_prevent', $data ?? [], null);
        $this->setIfExists('i_post_message_deleted', $data ?? [], null);
        $this->setIfExists('i_pre_message_updated_prevent', $data ?? [], null);
        $this->setIfExists('i_pre_message_updated_extend', $data ?? [], null);
        $this->setIfExists('i_pre_message_updated_modify', $data ?? [], null);
        $this->setIfExists('i_post_message_updated', $data ?? [], null);
        $this->setIfExists('i_post_message_reacted', $data ?? [], null);
        $this->setIfExists('i_post_message_followed', $data ?? [], null);
        $this->setIfExists('i_post_message_pinned', $data ?? [], null);
        $this->setIfExists('i_post_message_starred', $data ?? [], null);
        $this->setIfExists('i_post_message_reported', $data ?? [], null);
        $this->setIfExists('i_pre_room_create_prevent', $data ?? [], null);
        $this->setIfExists('i_pre_room_create_extend', $data ?? [], null);
        $this->setIfExists('i_pre_room_create_modify', $data ?? [], null);
        $this->setIfExists('i_post_room_create', $data ?? [], null);
        $this->setIfExists('i_pre_room_delete_prevent', $data ?? [], null);
        $this->setIfExists('i_post_room_deleted', $data ?? [], null);
        $this->setIfExists('i_pre_room_user_joined', $data ?? [], null);
        $this->setIfExists('i_post_room_user_joined', $data ?? [], null);
        $this->setIfExists('i_pre_room_user_leave', $data ?? [], null);
        $this->setIfExists('i_post_room_user_leave', $data ?? [], null);
        $this->setIfExists('i_post_external_component_opened', $data ?? [], null);
        $this->setIfExists('i_post_external_component_closed', $data ?? [], null);
        $this->setIfExists('iui_kit_interaction_handler', $data ?? [], null);
        $this->setIfExists('iui_kit_livechat_interaction_handler', $data ?? [], null);
        $this->setIfExists('i_post_livechat_room_started', $data ?? [], null);
        $this->setIfExists('i_post_livechat_room_closed', $data ?? [], null);
        $this->setIfExists('i_livechat_room_closed_handler', $data ?? [], null);
        $this->setIfExists('i_post_livechat_agent_assigned', $data ?? [], null);
        $this->setIfExists('i_post_livechat_agent_unassigned', $data ?? [], null);
        $this->setIfExists('i_post_livechat_room_transferred', $data ?? [], null);
        $this->setIfExists('i_post_livechat_guest_saved', $data ?? [], null);
        $this->setIfExists('i_post_livechat_room_saved', $data ?? [], null);
        $this->setIfExists('i_pre_file_upload', $data ?? [], null);
        $this->setIfExists('i_pre_email_sent', $data ?? [], null);
        $this->setIfExists('i_post_user_created', $data ?? [], null);
        $this->setIfExists('i_post_user_updated', $data ?? [], null);
        $this->setIfExists('i_post_user_deleted', $data ?? [], null);
        $this->setIfExists('i_post_user_logged_in', $data ?? [], null);
        $this->setIfExists('i_post_user_logged_out', $data ?? [], null);
        $this->setIfExists('i_post_user_status_changed', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets i_pre_message_sent_prevent
     *
     * @return bool|null
     */
    public function getIPreMessageSentPrevent()
    {
        return $this->container['i_pre_message_sent_prevent'];
    }

    /**
     * Sets i_pre_message_sent_prevent
     *
     * @param bool|null $i_pre_message_sent_prevent i_pre_message_sent_prevent
     *
     * @return self
     */
    public function setIPreMessageSentPrevent($i_pre_message_sent_prevent)
    {
        if (is_null($i_pre_message_sent_prevent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_sent_prevent cannot be null');
        }
        $this->container['i_pre_message_sent_prevent'] = $i_pre_message_sent_prevent;

        return $this;
    }

    /**
     * Gets i_pre_message_sent_extend
     *
     * @return bool|null
     */
    public function getIPreMessageSentExtend()
    {
        return $this->container['i_pre_message_sent_extend'];
    }

    /**
     * Sets i_pre_message_sent_extend
     *
     * @param bool|null $i_pre_message_sent_extend i_pre_message_sent_extend
     *
     * @return self
     */
    public function setIPreMessageSentExtend($i_pre_message_sent_extend)
    {
        if (is_null($i_pre_message_sent_extend)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_sent_extend cannot be null');
        }
        $this->container['i_pre_message_sent_extend'] = $i_pre_message_sent_extend;

        return $this;
    }

    /**
     * Gets i_pre_message_sent_modify
     *
     * @return bool|null
     */
    public function getIPreMessageSentModify()
    {
        return $this->container['i_pre_message_sent_modify'];
    }

    /**
     * Sets i_pre_message_sent_modify
     *
     * @param bool|null $i_pre_message_sent_modify i_pre_message_sent_modify
     *
     * @return self
     */
    public function setIPreMessageSentModify($i_pre_message_sent_modify)
    {
        if (is_null($i_pre_message_sent_modify)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_sent_modify cannot be null');
        }
        $this->container['i_pre_message_sent_modify'] = $i_pre_message_sent_modify;

        return $this;
    }

    /**
     * Gets i_post_message_sent
     *
     * @return bool|null
     */
    public function getIPostMessageSent()
    {
        return $this->container['i_post_message_sent'];
    }

    /**
     * Sets i_post_message_sent
     *
     * @param bool|null $i_post_message_sent i_post_message_sent
     *
     * @return self
     */
    public function setIPostMessageSent($i_post_message_sent)
    {
        if (is_null($i_post_message_sent)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_sent cannot be null');
        }
        $this->container['i_post_message_sent'] = $i_post_message_sent;

        return $this;
    }

    /**
     * Gets i_pre_message_delete_prevent
     *
     * @return bool|null
     */
    public function getIPreMessageDeletePrevent()
    {
        return $this->container['i_pre_message_delete_prevent'];
    }

    /**
     * Sets i_pre_message_delete_prevent
     *
     * @param bool|null $i_pre_message_delete_prevent i_pre_message_delete_prevent
     *
     * @return self
     */
    public function setIPreMessageDeletePrevent($i_pre_message_delete_prevent)
    {
        if (is_null($i_pre_message_delete_prevent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_delete_prevent cannot be null');
        }
        $this->container['i_pre_message_delete_prevent'] = $i_pre_message_delete_prevent;

        return $this;
    }

    /**
     * Gets i_post_message_deleted
     *
     * @return bool|null
     */
    public function getIPostMessageDeleted()
    {
        return $this->container['i_post_message_deleted'];
    }

    /**
     * Sets i_post_message_deleted
     *
     * @param bool|null $i_post_message_deleted i_post_message_deleted
     *
     * @return self
     */
    public function setIPostMessageDeleted($i_post_message_deleted)
    {
        if (is_null($i_post_message_deleted)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_deleted cannot be null');
        }
        $this->container['i_post_message_deleted'] = $i_post_message_deleted;

        return $this;
    }

    /**
     * Gets i_pre_message_updated_prevent
     *
     * @return bool|null
     */
    public function getIPreMessageUpdatedPrevent()
    {
        return $this->container['i_pre_message_updated_prevent'];
    }

    /**
     * Sets i_pre_message_updated_prevent
     *
     * @param bool|null $i_pre_message_updated_prevent i_pre_message_updated_prevent
     *
     * @return self
     */
    public function setIPreMessageUpdatedPrevent($i_pre_message_updated_prevent)
    {
        if (is_null($i_pre_message_updated_prevent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_updated_prevent cannot be null');
        }
        $this->container['i_pre_message_updated_prevent'] = $i_pre_message_updated_prevent;

        return $this;
    }

    /**
     * Gets i_pre_message_updated_extend
     *
     * @return bool|null
     */
    public function getIPreMessageUpdatedExtend()
    {
        return $this->container['i_pre_message_updated_extend'];
    }

    /**
     * Sets i_pre_message_updated_extend
     *
     * @param bool|null $i_pre_message_updated_extend i_pre_message_updated_extend
     *
     * @return self
     */
    public function setIPreMessageUpdatedExtend($i_pre_message_updated_extend)
    {
        if (is_null($i_pre_message_updated_extend)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_updated_extend cannot be null');
        }
        $this->container['i_pre_message_updated_extend'] = $i_pre_message_updated_extend;

        return $this;
    }

    /**
     * Gets i_pre_message_updated_modify
     *
     * @return bool|null
     */
    public function getIPreMessageUpdatedModify()
    {
        return $this->container['i_pre_message_updated_modify'];
    }

    /**
     * Sets i_pre_message_updated_modify
     *
     * @param bool|null $i_pre_message_updated_modify i_pre_message_updated_modify
     *
     * @return self
     */
    public function setIPreMessageUpdatedModify($i_pre_message_updated_modify)
    {
        if (is_null($i_pre_message_updated_modify)) {
            throw new \InvalidArgumentException('non-nullable i_pre_message_updated_modify cannot be null');
        }
        $this->container['i_pre_message_updated_modify'] = $i_pre_message_updated_modify;

        return $this;
    }

    /**
     * Gets i_post_message_updated
     *
     * @return bool|null
     */
    public function getIPostMessageUpdated()
    {
        return $this->container['i_post_message_updated'];
    }

    /**
     * Sets i_post_message_updated
     *
     * @param bool|null $i_post_message_updated i_post_message_updated
     *
     * @return self
     */
    public function setIPostMessageUpdated($i_post_message_updated)
    {
        if (is_null($i_post_message_updated)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_updated cannot be null');
        }
        $this->container['i_post_message_updated'] = $i_post_message_updated;

        return $this;
    }

    /**
     * Gets i_post_message_reacted
     *
     * @return bool|null
     */
    public function getIPostMessageReacted()
    {
        return $this->container['i_post_message_reacted'];
    }

    /**
     * Sets i_post_message_reacted
     *
     * @param bool|null $i_post_message_reacted i_post_message_reacted
     *
     * @return self
     */
    public function setIPostMessageReacted($i_post_message_reacted)
    {
        if (is_null($i_post_message_reacted)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_reacted cannot be null');
        }
        $this->container['i_post_message_reacted'] = $i_post_message_reacted;

        return $this;
    }

    /**
     * Gets i_post_message_followed
     *
     * @return bool|null
     */
    public function getIPostMessageFollowed()
    {
        return $this->container['i_post_message_followed'];
    }

    /**
     * Sets i_post_message_followed
     *
     * @param bool|null $i_post_message_followed i_post_message_followed
     *
     * @return self
     */
    public function setIPostMessageFollowed($i_post_message_followed)
    {
        if (is_null($i_post_message_followed)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_followed cannot be null');
        }
        $this->container['i_post_message_followed'] = $i_post_message_followed;

        return $this;
    }

    /**
     * Gets i_post_message_pinned
     *
     * @return bool|null
     */
    public function getIPostMessagePinned()
    {
        return $this->container['i_post_message_pinned'];
    }

    /**
     * Sets i_post_message_pinned
     *
     * @param bool|null $i_post_message_pinned i_post_message_pinned
     *
     * @return self
     */
    public function setIPostMessagePinned($i_post_message_pinned)
    {
        if (is_null($i_post_message_pinned)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_pinned cannot be null');
        }
        $this->container['i_post_message_pinned'] = $i_post_message_pinned;

        return $this;
    }

    /**
     * Gets i_post_message_starred
     *
     * @return bool|null
     */
    public function getIPostMessageStarred()
    {
        return $this->container['i_post_message_starred'];
    }

    /**
     * Sets i_post_message_starred
     *
     * @param bool|null $i_post_message_starred i_post_message_starred
     *
     * @return self
     */
    public function setIPostMessageStarred($i_post_message_starred)
    {
        if (is_null($i_post_message_starred)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_starred cannot be null');
        }
        $this->container['i_post_message_starred'] = $i_post_message_starred;

        return $this;
    }

    /**
     * Gets i_post_message_reported
     *
     * @return bool|null
     */
    public function getIPostMessageReported()
    {
        return $this->container['i_post_message_reported'];
    }

    /**
     * Sets i_post_message_reported
     *
     * @param bool|null $i_post_message_reported i_post_message_reported
     *
     * @return self
     */
    public function setIPostMessageReported($i_post_message_reported)
    {
        if (is_null($i_post_message_reported)) {
            throw new \InvalidArgumentException('non-nullable i_post_message_reported cannot be null');
        }
        $this->container['i_post_message_reported'] = $i_post_message_reported;

        return $this;
    }

    /**
     * Gets i_pre_room_create_prevent
     *
     * @return bool|null
     */
    public function getIPreRoomCreatePrevent()
    {
        return $this->container['i_pre_room_create_prevent'];
    }

    /**
     * Sets i_pre_room_create_prevent
     *
     * @param bool|null $i_pre_room_create_prevent i_pre_room_create_prevent
     *
     * @return self
     */
    public function setIPreRoomCreatePrevent($i_pre_room_create_prevent)
    {
        if (is_null($i_pre_room_create_prevent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_create_prevent cannot be null');
        }
        $this->container['i_pre_room_create_prevent'] = $i_pre_room_create_prevent;

        return $this;
    }

    /**
     * Gets i_pre_room_create_extend
     *
     * @return bool|null
     */
    public function getIPreRoomCreateExtend()
    {
        return $this->container['i_pre_room_create_extend'];
    }

    /**
     * Sets i_pre_room_create_extend
     *
     * @param bool|null $i_pre_room_create_extend i_pre_room_create_extend
     *
     * @return self
     */
    public function setIPreRoomCreateExtend($i_pre_room_create_extend)
    {
        if (is_null($i_pre_room_create_extend)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_create_extend cannot be null');
        }
        $this->container['i_pre_room_create_extend'] = $i_pre_room_create_extend;

        return $this;
    }

    /**
     * Gets i_pre_room_create_modify
     *
     * @return bool|null
     */
    public function getIPreRoomCreateModify()
    {
        return $this->container['i_pre_room_create_modify'];
    }

    /**
     * Sets i_pre_room_create_modify
     *
     * @param bool|null $i_pre_room_create_modify i_pre_room_create_modify
     *
     * @return self
     */
    public function setIPreRoomCreateModify($i_pre_room_create_modify)
    {
        if (is_null($i_pre_room_create_modify)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_create_modify cannot be null');
        }
        $this->container['i_pre_room_create_modify'] = $i_pre_room_create_modify;

        return $this;
    }

    /**
     * Gets i_post_room_create
     *
     * @return bool|null
     */
    public function getIPostRoomCreate()
    {
        return $this->container['i_post_room_create'];
    }

    /**
     * Sets i_post_room_create
     *
     * @param bool|null $i_post_room_create i_post_room_create
     *
     * @return self
     */
    public function setIPostRoomCreate($i_post_room_create)
    {
        if (is_null($i_post_room_create)) {
            throw new \InvalidArgumentException('non-nullable i_post_room_create cannot be null');
        }
        $this->container['i_post_room_create'] = $i_post_room_create;

        return $this;
    }

    /**
     * Gets i_pre_room_delete_prevent
     *
     * @return bool|null
     */
    public function getIPreRoomDeletePrevent()
    {
        return $this->container['i_pre_room_delete_prevent'];
    }

    /**
     * Sets i_pre_room_delete_prevent
     *
     * @param bool|null $i_pre_room_delete_prevent i_pre_room_delete_prevent
     *
     * @return self
     */
    public function setIPreRoomDeletePrevent($i_pre_room_delete_prevent)
    {
        if (is_null($i_pre_room_delete_prevent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_delete_prevent cannot be null');
        }
        $this->container['i_pre_room_delete_prevent'] = $i_pre_room_delete_prevent;

        return $this;
    }

    /**
     * Gets i_post_room_deleted
     *
     * @return bool|null
     */
    public function getIPostRoomDeleted()
    {
        return $this->container['i_post_room_deleted'];
    }

    /**
     * Sets i_post_room_deleted
     *
     * @param bool|null $i_post_room_deleted i_post_room_deleted
     *
     * @return self
     */
    public function setIPostRoomDeleted($i_post_room_deleted)
    {
        if (is_null($i_post_room_deleted)) {
            throw new \InvalidArgumentException('non-nullable i_post_room_deleted cannot be null');
        }
        $this->container['i_post_room_deleted'] = $i_post_room_deleted;

        return $this;
    }

    /**
     * Gets i_pre_room_user_joined
     *
     * @return bool|null
     */
    public function getIPreRoomUserJoined()
    {
        return $this->container['i_pre_room_user_joined'];
    }

    /**
     * Sets i_pre_room_user_joined
     *
     * @param bool|null $i_pre_room_user_joined i_pre_room_user_joined
     *
     * @return self
     */
    public function setIPreRoomUserJoined($i_pre_room_user_joined)
    {
        if (is_null($i_pre_room_user_joined)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_user_joined cannot be null');
        }
        $this->container['i_pre_room_user_joined'] = $i_pre_room_user_joined;

        return $this;
    }

    /**
     * Gets i_post_room_user_joined
     *
     * @return bool|null
     */
    public function getIPostRoomUserJoined()
    {
        return $this->container['i_post_room_user_joined'];
    }

    /**
     * Sets i_post_room_user_joined
     *
     * @param bool|null $i_post_room_user_joined i_post_room_user_joined
     *
     * @return self
     */
    public function setIPostRoomUserJoined($i_post_room_user_joined)
    {
        if (is_null($i_post_room_user_joined)) {
            throw new \InvalidArgumentException('non-nullable i_post_room_user_joined cannot be null');
        }
        $this->container['i_post_room_user_joined'] = $i_post_room_user_joined;

        return $this;
    }

    /**
     * Gets i_pre_room_user_leave
     *
     * @return bool|null
     */
    public function getIPreRoomUserLeave()
    {
        return $this->container['i_pre_room_user_leave'];
    }

    /**
     * Sets i_pre_room_user_leave
     *
     * @param bool|null $i_pre_room_user_leave i_pre_room_user_leave
     *
     * @return self
     */
    public function setIPreRoomUserLeave($i_pre_room_user_leave)
    {
        if (is_null($i_pre_room_user_leave)) {
            throw new \InvalidArgumentException('non-nullable i_pre_room_user_leave cannot be null');
        }
        $this->container['i_pre_room_user_leave'] = $i_pre_room_user_leave;

        return $this;
    }

    /**
     * Gets i_post_room_user_leave
     *
     * @return bool|null
     */
    public function getIPostRoomUserLeave()
    {
        return $this->container['i_post_room_user_leave'];
    }

    /**
     * Sets i_post_room_user_leave
     *
     * @param bool|null $i_post_room_user_leave i_post_room_user_leave
     *
     * @return self
     */
    public function setIPostRoomUserLeave($i_post_room_user_leave)
    {
        if (is_null($i_post_room_user_leave)) {
            throw new \InvalidArgumentException('non-nullable i_post_room_user_leave cannot be null');
        }
        $this->container['i_post_room_user_leave'] = $i_post_room_user_leave;

        return $this;
    }

    /**
     * Gets i_post_external_component_opened
     *
     * @return bool|null
     */
    public function getIPostExternalComponentOpened()
    {
        return $this->container['i_post_external_component_opened'];
    }

    /**
     * Sets i_post_external_component_opened
     *
     * @param bool|null $i_post_external_component_opened i_post_external_component_opened
     *
     * @return self
     */
    public function setIPostExternalComponentOpened($i_post_external_component_opened)
    {
        if (is_null($i_post_external_component_opened)) {
            throw new \InvalidArgumentException('non-nullable i_post_external_component_opened cannot be null');
        }
        $this->container['i_post_external_component_opened'] = $i_post_external_component_opened;

        return $this;
    }

    /**
     * Gets i_post_external_component_closed
     *
     * @return bool|null
     */
    public function getIPostExternalComponentClosed()
    {
        return $this->container['i_post_external_component_closed'];
    }

    /**
     * Sets i_post_external_component_closed
     *
     * @param bool|null $i_post_external_component_closed i_post_external_component_closed
     *
     * @return self
     */
    public function setIPostExternalComponentClosed($i_post_external_component_closed)
    {
        if (is_null($i_post_external_component_closed)) {
            throw new \InvalidArgumentException('non-nullable i_post_external_component_closed cannot be null');
        }
        $this->container['i_post_external_component_closed'] = $i_post_external_component_closed;

        return $this;
    }

    /**
     * Gets iui_kit_interaction_handler
     *
     * @return bool|null
     */
    public function getIuiKitInteractionHandler()
    {
        return $this->container['iui_kit_interaction_handler'];
    }

    /**
     * Sets iui_kit_interaction_handler
     *
     * @param bool|null $iui_kit_interaction_handler iui_kit_interaction_handler
     *
     * @return self
     */
    public function setIuiKitInteractionHandler($iui_kit_interaction_handler)
    {
        if (is_null($iui_kit_interaction_handler)) {
            throw new \InvalidArgumentException('non-nullable iui_kit_interaction_handler cannot be null');
        }
        $this->container['iui_kit_interaction_handler'] = $iui_kit_interaction_handler;

        return $this;
    }

    /**
     * Gets iui_kit_livechat_interaction_handler
     *
     * @return bool|null
     */
    public function getIuiKitLivechatInteractionHandler()
    {
        return $this->container['iui_kit_livechat_interaction_handler'];
    }

    /**
     * Sets iui_kit_livechat_interaction_handler
     *
     * @param bool|null $iui_kit_livechat_interaction_handler iui_kit_livechat_interaction_handler
     *
     * @return self
     */
    public function setIuiKitLivechatInteractionHandler($iui_kit_livechat_interaction_handler)
    {
        if (is_null($iui_kit_livechat_interaction_handler)) {
            throw new \InvalidArgumentException('non-nullable iui_kit_livechat_interaction_handler cannot be null');
        }
        $this->container['iui_kit_livechat_interaction_handler'] = $iui_kit_livechat_interaction_handler;

        return $this;
    }

    /**
     * Gets i_post_livechat_room_started
     *
     * @return bool|null
     */
    public function getIPostLivechatRoomStarted()
    {
        return $this->container['i_post_livechat_room_started'];
    }

    /**
     * Sets i_post_livechat_room_started
     *
     * @param bool|null $i_post_livechat_room_started i_post_livechat_room_started
     *
     * @return self
     */
    public function setIPostLivechatRoomStarted($i_post_livechat_room_started)
    {
        if (is_null($i_post_livechat_room_started)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_room_started cannot be null');
        }
        $this->container['i_post_livechat_room_started'] = $i_post_livechat_room_started;

        return $this;
    }

    /**
     * Gets i_post_livechat_room_closed
     *
     * @return bool|null
     */
    public function getIPostLivechatRoomClosed()
    {
        return $this->container['i_post_livechat_room_closed'];
    }

    /**
     * Sets i_post_livechat_room_closed
     *
     * @param bool|null $i_post_livechat_room_closed i_post_livechat_room_closed
     *
     * @return self
     */
    public function setIPostLivechatRoomClosed($i_post_livechat_room_closed)
    {
        if (is_null($i_post_livechat_room_closed)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_room_closed cannot be null');
        }
        $this->container['i_post_livechat_room_closed'] = $i_post_livechat_room_closed;

        return $this;
    }

    /**
     * Gets i_livechat_room_closed_handler
     *
     * @return bool|null
     */
    public function getILivechatRoomClosedHandler()
    {
        return $this->container['i_livechat_room_closed_handler'];
    }

    /**
     * Sets i_livechat_room_closed_handler
     *
     * @param bool|null $i_livechat_room_closed_handler i_livechat_room_closed_handler
     *
     * @return self
     */
    public function setILivechatRoomClosedHandler($i_livechat_room_closed_handler)
    {
        if (is_null($i_livechat_room_closed_handler)) {
            throw new \InvalidArgumentException('non-nullable i_livechat_room_closed_handler cannot be null');
        }
        $this->container['i_livechat_room_closed_handler'] = $i_livechat_room_closed_handler;

        return $this;
    }

    /**
     * Gets i_post_livechat_agent_assigned
     *
     * @return bool|null
     */
    public function getIPostLivechatAgentAssigned()
    {
        return $this->container['i_post_livechat_agent_assigned'];
    }

    /**
     * Sets i_post_livechat_agent_assigned
     *
     * @param bool|null $i_post_livechat_agent_assigned i_post_livechat_agent_assigned
     *
     * @return self
     */
    public function setIPostLivechatAgentAssigned($i_post_livechat_agent_assigned)
    {
        if (is_null($i_post_livechat_agent_assigned)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_agent_assigned cannot be null');
        }
        $this->container['i_post_livechat_agent_assigned'] = $i_post_livechat_agent_assigned;

        return $this;
    }

    /**
     * Gets i_post_livechat_agent_unassigned
     *
     * @return bool|null
     */
    public function getIPostLivechatAgentUnassigned()
    {
        return $this->container['i_post_livechat_agent_unassigned'];
    }

    /**
     * Sets i_post_livechat_agent_unassigned
     *
     * @param bool|null $i_post_livechat_agent_unassigned i_post_livechat_agent_unassigned
     *
     * @return self
     */
    public function setIPostLivechatAgentUnassigned($i_post_livechat_agent_unassigned)
    {
        if (is_null($i_post_livechat_agent_unassigned)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_agent_unassigned cannot be null');
        }
        $this->container['i_post_livechat_agent_unassigned'] = $i_post_livechat_agent_unassigned;

        return $this;
    }

    /**
     * Gets i_post_livechat_room_transferred
     *
     * @return bool|null
     */
    public function getIPostLivechatRoomTransferred()
    {
        return $this->container['i_post_livechat_room_transferred'];
    }

    /**
     * Sets i_post_livechat_room_transferred
     *
     * @param bool|null $i_post_livechat_room_transferred i_post_livechat_room_transferred
     *
     * @return self
     */
    public function setIPostLivechatRoomTransferred($i_post_livechat_room_transferred)
    {
        if (is_null($i_post_livechat_room_transferred)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_room_transferred cannot be null');
        }
        $this->container['i_post_livechat_room_transferred'] = $i_post_livechat_room_transferred;

        return $this;
    }

    /**
     * Gets i_post_livechat_guest_saved
     *
     * @return bool|null
     */
    public function getIPostLivechatGuestSaved()
    {
        return $this->container['i_post_livechat_guest_saved'];
    }

    /**
     * Sets i_post_livechat_guest_saved
     *
     * @param bool|null $i_post_livechat_guest_saved i_post_livechat_guest_saved
     *
     * @return self
     */
    public function setIPostLivechatGuestSaved($i_post_livechat_guest_saved)
    {
        if (is_null($i_post_livechat_guest_saved)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_guest_saved cannot be null');
        }
        $this->container['i_post_livechat_guest_saved'] = $i_post_livechat_guest_saved;

        return $this;
    }

    /**
     * Gets i_post_livechat_room_saved
     *
     * @return bool|null
     */
    public function getIPostLivechatRoomSaved()
    {
        return $this->container['i_post_livechat_room_saved'];
    }

    /**
     * Sets i_post_livechat_room_saved
     *
     * @param bool|null $i_post_livechat_room_saved i_post_livechat_room_saved
     *
     * @return self
     */
    public function setIPostLivechatRoomSaved($i_post_livechat_room_saved)
    {
        if (is_null($i_post_livechat_room_saved)) {
            throw new \InvalidArgumentException('non-nullable i_post_livechat_room_saved cannot be null');
        }
        $this->container['i_post_livechat_room_saved'] = $i_post_livechat_room_saved;

        return $this;
    }

    /**
     * Gets i_pre_file_upload
     *
     * @return bool|null
     */
    public function getIPreFileUpload()
    {
        return $this->container['i_pre_file_upload'];
    }

    /**
     * Sets i_pre_file_upload
     *
     * @param bool|null $i_pre_file_upload i_pre_file_upload
     *
     * @return self
     */
    public function setIPreFileUpload($i_pre_file_upload)
    {
        if (is_null($i_pre_file_upload)) {
            throw new \InvalidArgumentException('non-nullable i_pre_file_upload cannot be null');
        }
        $this->container['i_pre_file_upload'] = $i_pre_file_upload;

        return $this;
    }

    /**
     * Gets i_pre_email_sent
     *
     * @return bool|null
     */
    public function getIPreEmailSent()
    {
        return $this->container['i_pre_email_sent'];
    }

    /**
     * Sets i_pre_email_sent
     *
     * @param bool|null $i_pre_email_sent i_pre_email_sent
     *
     * @return self
     */
    public function setIPreEmailSent($i_pre_email_sent)
    {
        if (is_null($i_pre_email_sent)) {
            throw new \InvalidArgumentException('non-nullable i_pre_email_sent cannot be null');
        }
        $this->container['i_pre_email_sent'] = $i_pre_email_sent;

        return $this;
    }

    /**
     * Gets i_post_user_created
     *
     * @return bool|null
     */
    public function getIPostUserCreated()
    {
        return $this->container['i_post_user_created'];
    }

    /**
     * Sets i_post_user_created
     *
     * @param bool|null $i_post_user_created i_post_user_created
     *
     * @return self
     */
    public function setIPostUserCreated($i_post_user_created)
    {
        if (is_null($i_post_user_created)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_created cannot be null');
        }
        $this->container['i_post_user_created'] = $i_post_user_created;

        return $this;
    }

    /**
     * Gets i_post_user_updated
     *
     * @return bool|null
     */
    public function getIPostUserUpdated()
    {
        return $this->container['i_post_user_updated'];
    }

    /**
     * Sets i_post_user_updated
     *
     * @param bool|null $i_post_user_updated i_post_user_updated
     *
     * @return self
     */
    public function setIPostUserUpdated($i_post_user_updated)
    {
        if (is_null($i_post_user_updated)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_updated cannot be null');
        }
        $this->container['i_post_user_updated'] = $i_post_user_updated;

        return $this;
    }

    /**
     * Gets i_post_user_deleted
     *
     * @return bool|null
     */
    public function getIPostUserDeleted()
    {
        return $this->container['i_post_user_deleted'];
    }

    /**
     * Sets i_post_user_deleted
     *
     * @param bool|null $i_post_user_deleted i_post_user_deleted
     *
     * @return self
     */
    public function setIPostUserDeleted($i_post_user_deleted)
    {
        if (is_null($i_post_user_deleted)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_deleted cannot be null');
        }
        $this->container['i_post_user_deleted'] = $i_post_user_deleted;

        return $this;
    }

    /**
     * Gets i_post_user_logged_in
     *
     * @return bool|null
     */
    public function getIPostUserLoggedIn()
    {
        return $this->container['i_post_user_logged_in'];
    }

    /**
     * Sets i_post_user_logged_in
     *
     * @param bool|null $i_post_user_logged_in i_post_user_logged_in
     *
     * @return self
     */
    public function setIPostUserLoggedIn($i_post_user_logged_in)
    {
        if (is_null($i_post_user_logged_in)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_logged_in cannot be null');
        }
        $this->container['i_post_user_logged_in'] = $i_post_user_logged_in;

        return $this;
    }

    /**
     * Gets i_post_user_logged_out
     *
     * @return bool|null
     */
    public function getIPostUserLoggedOut()
    {
        return $this->container['i_post_user_logged_out'];
    }

    /**
     * Sets i_post_user_logged_out
     *
     * @param bool|null $i_post_user_logged_out i_post_user_logged_out
     *
     * @return self
     */
    public function setIPostUserLoggedOut($i_post_user_logged_out)
    {
        if (is_null($i_post_user_logged_out)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_logged_out cannot be null');
        }
        $this->container['i_post_user_logged_out'] = $i_post_user_logged_out;

        return $this;
    }

    /**
     * Gets i_post_user_status_changed
     *
     * @return bool|null
     */
    public function getIPostUserStatusChanged()
    {
        return $this->container['i_post_user_status_changed'];
    }

    /**
     * Sets i_post_user_status_changed
     *
     * @param bool|null $i_post_user_status_changed i_post_user_status_changed
     *
     * @return self
     */
    public function setIPostUserStatusChanged($i_post_user_status_changed)
    {
        if (is_null($i_post_user_status_changed)) {
            throw new \InvalidArgumentException('non-nullable i_post_user_status_changed cannot be null');
        }
        $this->container['i_post_user_status_changed'] = $i_post_user_status_changed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


