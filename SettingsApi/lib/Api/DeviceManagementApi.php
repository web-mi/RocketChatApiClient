<?php
/**
 * DeviceManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  RocketChatSettingsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Settings
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RocketChatSettingsApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RocketChatSettingsApi\ApiException;
use RocketChatSettingsApi\Configuration;
use RocketChatSettingsApi\HeaderSelector;
use RocketChatSettingsApi\ObjectSerializer;

/**
 * DeviceManagementApi Class Doc Comment
 *
 * @category Class
 * @package  RocketChatSettingsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeviceManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getApiV1SessionsInfo' => [
            'application/json',
        ],
        'getApiV1SessionsInfoAdmin' => [
            'application/json',
        ],
        'getApiV1SessionsList' => [
            'application/json',
        ],
        'getApiV1SessionsListAll' => [
            'application/json',
        ],
        'postApiV1SessionsLogout' => [
            'application/json',
        ],
        'postApiV1SessionsLogoutMe' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1SessionsInfo
     *
     * Get Current User Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfo'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response
     */
    public function getApiV1SessionsInfo($x_user_id, $x_auth_token, $session_id, string $contentType = self::contentTypes['getApiV1SessionsInfo'][0])
    {
        list($response) = $this->getApiV1SessionsInfoWithHttpInfo($x_user_id, $x_auth_token, $session_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1SessionsInfoWithHttpInfo
     *
     * Get Current User Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfo'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1SessionsInfoWithHttpInfo($x_user_id, $x_auth_token, $session_id, string $contentType = self::contentTypes['getApiV1SessionsInfo'][0])
    {
        $request = $this->getApiV1SessionsInfoRequest($x_user_id, $x_auth_token, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1SessionsInfoAsync
     *
     * Get Current User Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsInfoAsync($x_user_id, $x_auth_token, $session_id, string $contentType = self::contentTypes['getApiV1SessionsInfo'][0])
    {
        return $this->getApiV1SessionsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1SessionsInfoAsyncWithHttpInfo
     *
     * Get Current User Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsInfoAsyncWithHttpInfo($x_user_id, $x_auth_token, $session_id, string $contentType = self::contentTypes['getApiV1SessionsInfo'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsInfo200Response';
        $request = $this->getApiV1SessionsInfoRequest($x_user_id, $x_auth_token, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1SessionsInfo'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1SessionsInfoRequest($x_user_id, $x_auth_token, $session_id, string $contentType = self::contentTypes['getApiV1SessionsInfo'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1SessionsInfo'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1SessionsInfo'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getApiV1SessionsInfo'
            );
        }


        $resourcePath = '/api/v1/sessions/info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $session_id,
            'sessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1SessionsInfoAdmin
     *
     * Get Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfoAdmin'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response
     */
    public function getApiV1SessionsInfoAdmin($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['getApiV1SessionsInfoAdmin'][0])
    {
        list($response) = $this->getApiV1SessionsInfoAdminWithHttpInfo($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1SessionsInfoAdminWithHttpInfo
     *
     * Get Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfoAdmin'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1SessionsInfoAdminWithHttpInfo($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['getApiV1SessionsInfoAdmin'][0])
    {
        $request = $this->getApiV1SessionsInfoAdminRequest($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1SessionsInfoAdminAsync
     *
     * Get Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfoAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsInfoAdminAsync($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['getApiV1SessionsInfoAdmin'][0])
    {
        return $this->getApiV1SessionsInfoAdminAsyncWithHttpInfo($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1SessionsInfoAdminAsyncWithHttpInfo
     *
     * Get Session Information
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfoAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsInfoAdminAsyncWithHttpInfo($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['getApiV1SessionsInfoAdmin'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsInfoAdmin200Response';
        $request = $this->getApiV1SessionsInfoAdminRequest($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1SessionsInfoAdmin'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $session_id The session ID. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsInfoAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1SessionsInfoAdminRequest($x_user_id, $x_auth_token, $session_id, $x_2fa_code, $x_2fa_method, string $contentType = self::contentTypes['getApiV1SessionsInfoAdmin'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1SessionsInfoAdmin'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1SessionsInfoAdmin'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getApiV1SessionsInfoAdmin'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling getApiV1SessionsInfoAdmin'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling getApiV1SessionsInfoAdmin'
            );
        }


        $resourcePath = '/api/v1/sessions/info.admin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $session_id,
            'sessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['X-2fa-Code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['X-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1SessionsList
     *
     * Get Current User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsList'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\GetApiV1SessionsList200Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response
     */
    public function getApiV1SessionsList($x_user_id, $x_auth_token, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsList'][0])
    {
        list($response) = $this->getApiV1SessionsListWithHttpInfo($x_user_id, $x_auth_token, $filter, $offset, $count, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1SessionsListWithHttpInfo
     *
     * Get Current User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsList'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\GetApiV1SessionsList200Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1SessionsListWithHttpInfo($x_user_id, $x_auth_token, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsList'][0])
    {
        $request = $this->getApiV1SessionsListRequest($x_user_id, $x_auth_token, $filter, $offset, $count, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1SessionsListAsync
     *
     * Get Current User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsListAsync($x_user_id, $x_auth_token, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsList'][0])
    {
        return $this->getApiV1SessionsListAsyncWithHttpInfo($x_user_id, $x_auth_token, $filter, $offset, $count, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1SessionsListAsyncWithHttpInfo
     *
     * Get Current User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsListAsyncWithHttpInfo($x_user_id, $x_auth_token, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsList'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsList200Response';
        $request = $this->getApiV1SessionsListRequest($x_user_id, $x_auth_token, $filter, $offset, $count, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1SessionsList'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1SessionsListRequest($x_user_id, $x_auth_token, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsList'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1SessionsList'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1SessionsList'
            );
        }






        $resourcePath = '/api/v1/sessions/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1SessionsListAll
     *
     * Get All User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsListAll'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response|\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response
     */
    public function getApiV1SessionsListAll($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsListAll'][0])
    {
        list($response) = $this->getApiV1SessionsListAllWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter, $offset, $count, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1SessionsListAllWithHttpInfo
     *
     * Get All User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsListAll'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response|\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1SessionsListAllWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsListAll'][0])
    {
        $request = $this->getApiV1SessionsListAllRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter, $offset, $count, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1SessionsListAllAsync
     *
     * Get All User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsListAllAsync($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsListAll'][0])
    {
        return $this->getApiV1SessionsListAllAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter, $offset, $count, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1SessionsListAllAsyncWithHttpInfo
     *
     * Get All User Sessions
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1SessionsListAllAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsListAll'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll200Response';
        $request = $this->getApiV1SessionsListAllRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter, $offset, $count, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1SessionsListAll'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  string $filter Filter sessions list using regex. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count How many items to return. (optional)
     * @param  mixed $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1SessionsListAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1SessionsListAllRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $filter = null, $offset = null, $count = null, $sort = null, string $contentType = self::contentTypes['getApiV1SessionsListAll'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1SessionsListAll'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1SessionsListAll'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling getApiV1SessionsListAll'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling getApiV1SessionsListAll'
            );
        }






        $resourcePath = '/api/v1/sessions/list.all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['X-2fa-Code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['X-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1SessionsLogout
     *
     * Logout Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogout'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response|\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response
     */
    public function postApiV1SessionsLogout($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogout'][0])
    {
        list($response) = $this->postApiV1SessionsLogoutWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1SessionsLogoutWithHttpInfo
     *
     * Logout Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogout'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response|\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1SessionsLogoutWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogout'][0])
    {
        $request = $this->postApiV1SessionsLogoutRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1SessionsListAll400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1SessionsLogoutAsync
     *
     * Logout Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1SessionsLogoutAsync($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogout'][0])
    {
        return $this->postApiV1SessionsLogoutAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1SessionsLogoutAsyncWithHttpInfo
     *
     * Logout Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1SessionsLogoutAsyncWithHttpInfo($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogout'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response';
        $request = $this->postApiV1SessionsLogoutRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1SessionsLogout'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  string $x_2fa_code The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. (required)
     * @param  string $x_2fa_method The desired method to get the 2FA code. It can be &#x60;email&#x60;, &#x60;totp&#x60;, or &#x60;password&#x60;. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1SessionsLogoutRequest($x_user_id, $x_auth_token, $x_2fa_code, $x_2fa_method, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogout'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1SessionsLogout'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1SessionsLogout'
            );
        }

        // verify the required parameter 'x_2fa_code' is set
        if ($x_2fa_code === null || (is_array($x_2fa_code) && count($x_2fa_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_code when calling postApiV1SessionsLogout'
            );
        }

        // verify the required parameter 'x_2fa_method' is set
        if ($x_2fa_method === null || (is_array($x_2fa_method) && count($x_2fa_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_2fa_method when calling postApiV1SessionsLogout'
            );
        }



        $resourcePath = '/api/v1/sessions/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_2fa_code !== null) {
            $headerParams['X-2fa-Code'] = ObjectSerializer::toHeaderValue($x_2fa_code);
        }
        // header params
        if ($x_2fa_method !== null) {
            $headerParams['X-2fa-method'] = ObjectSerializer::toHeaderValue($x_2fa_method);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_sessions_logout_me_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_sessions_logout_me_request));
            } else {
                $httpBody = $post_api_v1_sessions_logout_me_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1SessionsLogoutMe
     *
     * Logout Current User Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogoutMe'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response
     */
    public function postApiV1SessionsLogoutMe($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogoutMe'][0])
    {
        list($response) = $this->postApiV1SessionsLogoutMeWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1SessionsLogoutMeWithHttpInfo
     *
     * Logout Current User Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogoutMe'] to see the possible values for this operation
     *
     * @throws \RocketChatSettingsApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response|\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response|\RocketChatSettingsApi\Model\GetApiV1Settings401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1SessionsLogoutMeWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogoutMe'][0])
    {
        $request = $this->postApiV1SessionsLogoutMeRequest($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\RocketChatSettingsApi\Model\GetApiV1Settings401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\RocketChatSettingsApi\Model\GetApiV1Settings401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\PostApiV1CloudManualRegister400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RocketChatSettingsApi\Model\GetApiV1Settings401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1SessionsLogoutMeAsync
     *
     * Logout Current User Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogoutMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1SessionsLogoutMeAsync($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogoutMe'][0])
    {
        return $this->postApiV1SessionsLogoutMeAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1SessionsLogoutMeAsyncWithHttpInfo
     *
     * Logout Current User Session
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogoutMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1SessionsLogoutMeAsyncWithHttpInfo($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogoutMe'][0])
    {
        $returnType = '\RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMe200Response';
        $request = $this->postApiV1SessionsLogoutMeRequest($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1SessionsLogoutMe'
     *
     * @param  string $x_user_id The user ID. (required)
     * @param  string $x_auth_token The authentication token. (required)
     * @param  \RocketChatSettingsApi\Model\PostApiV1SessionsLogoutMeRequest $post_api_v1_sessions_logout_me_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1SessionsLogoutMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1SessionsLogoutMeRequest($x_user_id, $x_auth_token, $post_api_v1_sessions_logout_me_request = null, string $contentType = self::contentTypes['postApiV1SessionsLogoutMe'][0])
    {

        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling postApiV1SessionsLogoutMe'
            );
        }

        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling postApiV1SessionsLogoutMe'
            );
        }



        $resourcePath = '/api/v1/sessions/logout.me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_api_v1_sessions_logout_me_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_api_v1_sessions_logout_me_request));
            } else {
                $httpBody = $post_api_v1_sessions_logout_me_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
