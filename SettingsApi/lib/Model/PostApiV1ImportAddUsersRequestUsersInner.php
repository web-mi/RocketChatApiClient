<?php
/**
 * PostApiV1ImportAddUsersRequestUsersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\SettingsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Settings
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\SettingsApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\SettingsApi\ObjectSerializer;

/**
 * PostApiV1ImportAddUsersRequestUsersInner Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\SettingsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1ImportAddUsersRequestUsersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_import_addUsers_request_users_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'emails' => 'string[]',
        'import_ids' => 'string[]',
        'name' => 'string',
        'password' => 'string',
        'utc_offset' => 'float',
        'roles' => 'string[]',
        'type' => 'string',
        'bio' => 'string',
        'deleted' => 'bool',
        'avatar_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'emails' => null,
        'import_ids' => null,
        'name' => null,
        'password' => null,
        'utc_offset' => null,
        'roles' => null,
        'type' => null,
        'bio' => null,
        'deleted' => null,
        'avatar_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'username' => false,
        'emails' => false,
        'import_ids' => false,
        'name' => false,
        'password' => false,
        'utc_offset' => false,
        'roles' => false,
        'type' => false,
        'bio' => false,
        'deleted' => false,
        'avatar_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'emails' => 'emails',
        'import_ids' => 'importIds',
        'name' => 'name',
        'password' => 'password',
        'utc_offset' => 'utcOffset',
        'roles' => 'roles',
        'type' => 'type',
        'bio' => 'bio',
        'deleted' => 'deleted',
        'avatar_url' => 'avatarUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'set_username',
        'emails' => 'set_emails',
        'import_ids' => 'set_import_ids',
        'name' => 'set_name',
        'password' => 'set_password',
        'utc_offset' => 'set_utc_offset',
        'roles' => 'set_roles',
        'type' => 'set_type',
        'bio' => 'set_bio',
        'deleted' => 'set_deleted',
        'avatar_url' => 'set_avatar_url'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'get_username',
        'emails' => 'get_emails',
        'import_ids' => 'get_import_ids',
        'name' => 'get_name',
        'password' => 'get_password',
        'utc_offset' => 'get_utc_offset',
        'roles' => 'get_roles',
        'type' => 'get_type',
        'bio' => 'get_bio',
        'deleted' => 'get_deleted',
        'avatar_url' => 'get_avatar_url'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('import_ids', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('utc_offset', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('bio', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('avatar_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ($this->container['import_ids'] === null) {
            $invalidProperties[] = "'import_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string|null
     */
    public function get_username()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The user name.
     *
     * @return self
     */
    public function set_username($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function get_emails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails The user email addresses.
     *
     * @return self
     */
    public function set_emails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets import_ids
     *
     * @return string[]
     */
    public function get_import_ids()
    {
        return $this->container['import_ids'];
    }

    /**
     * Sets import_ids
     *
     * @param string[] $import_ids A list of IDs that can identify the user.
     *
     * @return self
     */
    public function set_import_ids($import_ids)
    {
        if (is_null($import_ids)) {
            throw new \InvalidArgumentException('non-nullable import_ids cannot be null');
        }
        $this->container['import_ids'] = $import_ids;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The user's display name.
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function get_password()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password A password to assign to this user.
     *
     * @return self
     */
    public function set_password($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets utc_offset
     *
     * @return float|null
     */
    public function get_utc_offset()
    {
        return $this->container['utc_offset'];
    }

    /**
     * Sets utc_offset
     *
     * @param float|null $utc_offset The user's timezone, in number of hours relative to UTC.
     *
     * @return self
     */
    public function set_utc_offset($utc_offset)
    {
        if (is_null($utc_offset)) {
            throw new \InvalidArgumentException('non-nullable utc_offset cannot be null');
        }
        $this->container['utc_offset'] = $utc_offset;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function get_roles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles A list of roles to assign to the user
     *
     * @return self
     */
    public function set_roles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The user type, must be either \"user\" or \"bot\".
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string|null
     */
    public function get_bio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string|null $bio The user's profile bio.
     *
     * @return self
     */
    public function set_bio($bio)
    {
        if (is_null($bio)) {
            throw new \InvalidArgumentException('non-nullable bio cannot be null');
        }
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function get_deleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Was the user deleted from the previous system?
     *
     * @return self
     */
    public function set_deleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function get_avatar_url()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url A URL pointing to the user's avatar picture.
     *
     * @return self
     */
    public function set_avatar_url($avatar_url)
    {
        if (is_null($avatar_url)) {
            throw new \InvalidArgumentException('non-nullable avatar_url cannot be null');
        }
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


