<?php
/**
 * PostApiV1ChatPostMessageRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Messaging
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\RocketChatApiClient\MessagingApi\Model;

use \ArrayAccess;
use \WebMI\RocketChatApiClient\MessagingApi\ObjectSerializer;

/**
 * PostApiV1ChatPostMessageRequest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\RocketChatApiClient\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostApiV1ChatPostMessageRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_api_v1_chat_postMessage_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alias' => 'string',
        'avatar' => 'string',
        'channel' => 'string',
        'emoji' => 'string',
        'room_id' => 'string',
        'text' => 'string',
        'attachments' => '\WebMI\RocketChatApiClient\MessagingApi\Model\PostApiV1ChatPostMessageRequestAttachmentsInner[]',
        'tmid' => 'string',
        'tmshow' => 'bool',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alias' => null,
        'avatar' => null,
        'channel' => null,
        'emoji' => null,
        'room_id' => null,
        'text' => null,
        'attachments' => null,
        'tmid' => null,
        'tmshow' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alias' => false,
        'avatar' => false,
        'channel' => false,
        'emoji' => false,
        'room_id' => false,
        'text' => false,
        'attachments' => false,
        'tmid' => false,
        'tmshow' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'avatar' => 'avatar',
        'channel' => 'channel',
        'emoji' => 'emoji',
        'room_id' => 'roomId',
        'text' => 'text',
        'attachments' => 'attachments',
        'tmid' => 'tmid',
        'tmshow' => 'tmshow',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'set_alias',
        'avatar' => 'set_avatar',
        'channel' => 'set_channel',
        'emoji' => 'set_emoji',
        'room_id' => 'set_room_id',
        'text' => 'set_text',
        'attachments' => 'set_attachments',
        'tmid' => 'set_tmid',
        'tmshow' => 'set_tmshow',
        'custom_fields' => 'set_custom_fields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'get_alias',
        'avatar' => 'get_avatar',
        'channel' => 'get_channel',
        'emoji' => 'get_emoji',
        'room_id' => 'get_room_id',
        'text' => 'get_text',
        'attachments' => 'get_attachments',
        'tmid' => 'get_tmid',
        'tmshow' => 'get_tmshow',
        'custom_fields' => 'get_custom_fields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('emoji', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('tmid', $data ?? [], null);
        $this->setIfExists('tmshow', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['room_id'] === null) {
            $invalidProperties[] = "'room_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias
     *
     * @return string|null
     */
    public function get_alias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias This will cause the message's name to appear as the given alias, but your username will still be displayed.
     *
     * @return self
     */
    public function set_alias($alias)
    {
        if (is_null($alias)) {
            throw new \InvalidArgumentException('non-nullable alias cannot be null');
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function get_avatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar If provided, the avatar will be displayed as the provided image URL.
     *
     * @return self
     */
    public function set_avatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function get_channel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel channel
     *
     * @return self
     */
    public function set_channel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string|null
     */
    public function get_emoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string|null $emoji If provided, the avatar will be displayed as an emoji.
     *
     * @return self
     */
    public function set_emoji($emoji)
    {
        if (is_null($emoji)) {
            throw new \InvalidArgumentException('non-nullable emoji cannot be null');
        }
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return string
     */
    public function get_room_id()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id The room ID where the message is to be sent. You can use channel name or username. The channel name must have the `#` prefix. `@` refers to username.
     *
     * @return self
     */
    public function set_room_id($room_id)
    {
        if (is_null($room_id)) {
            throw new \InvalidArgumentException('non-nullable room_id cannot be null');
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function get_text()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The message text to send, it is optional because of attachments.
     *
     * @return self
     */
    public function set_text($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \WebMI\RocketChatApiClient\MessagingApi\Model\PostApiV1ChatPostMessageRequestAttachmentsInner[]|null
     */
    public function get_attachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \WebMI\RocketChatApiClient\MessagingApi\Model\PostApiV1ChatPostMessageRequestAttachmentsInner[]|null $attachments attachments
     *
     * @return self
     */
    public function set_attachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tmid
     *
     * @return string|null
     */
    public function get_tmid()
    {
        return $this->container['tmid'];
    }

    /**
     * Sets tmid
     *
     * @param string|null $tmid The message ID of the original message to reply to or to create a thread on.
     *
     * @return self
     */
    public function set_tmid($tmid)
    {
        if (is_null($tmid)) {
            throw new \InvalidArgumentException('non-nullable tmid cannot be null');
        }
        $this->container['tmid'] = $tmid;

        return $this;
    }

    /**
     * Gets tmshow
     *
     * @return bool|null
     */
    public function get_tmshow()
    {
        return $this->container['tmshow'];
    }

    /**
     * Sets tmshow
     *
     * @param bool|null $tmshow Defaults to true when the `tmid` parameter is specified. Message will also be shown in the room if the value is true.
     *
     * @return self
     */
    public function set_tmshow($tmshow)
    {
        if (is_null($tmshow)) {
            throw new \InvalidArgumentException('non-nullable tmshow cannot be null');
        }
        $this->container['tmshow'] = $tmshow;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function get_custom_fields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the <a href=\"https://docs.rocket.chat/docs/message\" target=\"_blank\">Message</a> settings for further information.
     *
     * @return self
     */
    public function set_custom_fields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


